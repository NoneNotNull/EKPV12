require({cache:{
'kms/ask/mobile/js/view/item/AskAdditionItemMixin':function(){
define([ "dojo/_base/declare", "dojox/mobile/_ItemBase", "dojo/dom-construct",
		"dojo/string", "dojo/dom-class", "dojo/touch", "mui/util",
		"dojo/request", "mui/rtf/RtfResizeUtil", "dojo/_base/lang" ], function(
		declare, ItemBase, domConstruct, string, domClass, touch, util,
		request, RtfResizeUtil, lang) {
	var item = declare("kms.ask.item.AskAdditionItemMixin", [ ItemBase ], {

		tag : "li",

		buildRendering : function() {
			this._templated = !!this.templateString;
			if (!this._templated) {
				this.domNode = this.containerNode = this.srcNodeRef
						|| domConstruct.create(this.tag, {
							className : 'muiAskAdditionItem'
						});
				this.contentNode = domConstruct.create('div', {
					className : 'muiAskAdditionListItem'
				}, this.domNode);
			}
			this.inherited(arguments);
			if (!this._templated)
				this.buildInternalRender();
		},

		buildInternalRender : function() {

			this.infoNode = domConstruct.create('div', {
				className : 'muiAskInfo'
			}, this.containerNode);
			this.contentNode = domConstruct.create('div', {
				className : 'muiAskContent',
				innerHTML : this.docContent + '<span class="muiAskTime">'
						+ this.fdTime + '</span>'
			}, this.infoNode);
			var resize = new RtfResizeUtil({
				channel : 'ask',
				containerNode : this.contentNode
			});

			this.subscribe('/mui/list/onPull', lang.hitch(resize,
					resize.destroy));
		},

		_setLabelAttr : function(text) {
			if (text)
				this._set("label", text);
		}
	});
	return item;
});
},
'kms/ask/mobile/js/view/AskAdditionItemListMixin':function(){
define([ "dojo/_base/declare", "mui/list/_TemplateItemListMixin",
		"kms/ask/mobile/js/view/item/AskAdditionItemMixin", "dojo/query",
		"dijit/registry" ], function(declare, _TemplateItemListMixin,
		AskAdditionItemMixin, query, registry) {

	return declare("kms.ask.AskAdditionItemListMixin",
			[ _TemplateItemListMixin ], {
				itemRenderer : AskAdditionItemMixin,
				onComplete : function(items) {
					this.inherited(arguments);
					if (items.length == 0)
						query('.muiAskAddition').style('display', 'none');
				}
			});
});
},
'kms/ask/mobile/js/view/AskCloseButtonMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/topic", "dijit/registry", "dojo/request",
				"mui/util", "dojo/string", "mui/dialog/Confirm",
				"dojo/_base/lang", "mui/dialog/Tip" ],
		function(declare, topic, registry, request, util, string, Confirm,
				lang, tip) {

			return declare(
					"kms.ask.AskCloseButtonsMixin",
					null,
					{

						name : 'docContent',

						_url : '/kms/ask/kms_ask_topic/kmsAskTopic.do?method=close&fdId=${fdId}',

						close : function() {
							var promise = request.post(util.formatUrl(string
									.substitute(this._url, {
										fdId : this.fdId
									})), {});
							var self = this;
							promise.response.then(function(data) {
								if (data.status == 200) {
									location.reload();
								} else
									tip.fail({
										text : '操作失败'
									});
							});
						},

						onClick : function(evt) {
							Confirm('确定结束问题？', null, lang.hitch(this, function(
									flag, dialog) {
								if (flag)
									this.close();
							}));
							this.inherited(arguments);
						}

					});
		});
},
'kms/ask/mobile/js/view/item/AskReplyItemMixin':function(){
define(
		[ "dojo/_base/declare", "dojox/mobile/_ItemBase", "dojo/dom-construct",
				"dojo/string", "dojox/mobile/Tooltip", "dojo/dom-class",
				"dojo/touch", "mui/util",
				"kms/ask/mobile/js/view/AskEvaluationMixin", "dojo/request",
				"kms/ask/mobile/js/view/AskBeBestMixin",
				"mui/rtf/RtfResizeUtil", "dojo/_base/lang",
				"kms/ask/mobile/js/view/AskAdditionMixin",
				"mui/dialog/OperaTip" ],
		function(declare, ItemBase, domConstruct, string, Tooltip, domClass,
				touch, util, AskEvaluationMixin, request, AskBeBestMixin,
				RtfResizeUtil, lang, AskAdditionMixin, OperaTip) {
			var item = declare(
					"kms.ask.item.AskReplyItemMixin",
					[ ItemBase, AskEvaluationMixin, AskBeBestMixin,
							AskAdditionMixin ],
					{

						tag : "li",

						buildRendering : function() {
							this._templated = !!this.templateString;
							if (!this._templated) {
								this.domNode = this.containerNode = this.srcNodeRef
										|| domConstruct.create(this.tag, {
											className : 'muiPostItem'
										});
								this.contentNode = domConstruct.create('div', {
									className : 'muiPostContent'
								}, this.domNode);
							}
							this.canOperate = this.beOperate();
							this.inherited(arguments);
							if (!this._templated)
								this.buildInternalRender();
						},

						beOperate : function() {
							var bool = false;
							for (name in this) {
								if (/^can[A-Z](.*)B$/.test(name)) {
									bool = bool || this[name] == 'true';
								}
							}
							return bool;
						},

						onBodyClick : function(evt) {
							var target = evt.target, isHide = true;
							while (target) {
								if (target == this.operationNode) {
									isHide = false;
									break;
								}
								target = target.parentNode;
							}
							if (isHide) {
								this.defer(function() {
									this.tooltip.hide();
									this.tooltip.destroy();
									this.show = false;
									this.disconnect(this.handle);
								}, 500);
							}
						},

						buildInternalRender : function() {

							this.infosNode = domConstruct.create('div', {
								className : 'muiPostContentT'
							}, this.contentNode);

							this.infoNode = domConstruct.create('div', {
								className : 'muiPostHead'
							}, this.infosNode);

							// 头像节点
							this.imageNode = domConstruct.create('div', {
								innerHTML : string.substitute(
										'<img src="${d}">', {
											d : this.icon
										}),
								className : 'muiPostIcon'
							}, this.infoNode);

							this.creatNode = domConstruct.create('div', {
								className : 'muiPostCreate'
							}, this.infoNode);

							this.nameNode = domConstruct.create('div', {
								innerHTML : this.fdName,
								className : 'muiPostCreator muiAuthor'
							}, this.creatNode);

							this.timeNode = domConstruct
									.create(
											'div',
											{
												innerHTML : '<span><i class="mui mui-time"></i>'
														+ this.fdPostTime
														+ '</span>',
												className : 'muiPostCreated'
											}, this.creatNode);

							this.bestIconNode = domConstruct.create('span', {
								className : 'muiAskBestIcon'
							}, this.infoNode);

							if (this.canOperate) {
								this.operationNode = domConstruct
										.create(
												'div',
												{
													className : 'muiPostReplyOpt',
													innerHTML : '<div class="muiTopicReplyOperation"><span class="l"></span><span class="f"></span><i class="mui mui-more"></i></div>'
												}, this.infoNode);
								this.connect(this.operationNode, 'click',
										'onOperationClick');
							}

							var contentNode = domConstruct.create('div', {
								className : 'muiPostContentC',
								innerHTML : '<div class="muiFieldRtf">'
										+ this.label + '</div>'
							}, this.contentNode);
							
							var resize = new RtfResizeUtil({
								channel : 'ask',
								containerNode : contentNode
							});

							this.subscribe('/mui/list/onPull', lang.hitch(
									resize, resize.destroy));

							// 补充节点
							this.additionNode = domConstruct.create('div', {
								className : 'muiAskPostAddition',
								innerHTML : '<div></div>',
								id : 'addition_' + this.fdId
							}, this.contentNode);

							// 点评节点
							this.evaluatoinNode = domConstruct.create('div', {
								className : 'muiTopicReplyEvaluation',
								id : 'evaluation_' + this.fdId
							}, this.contentNode);

							if (this.fdIsBest == 'true') {
								domConstruct
										.create(
												'img',
												{
													src : util
															.formatUrl('/kms/ask/mobile/css/images/best.png')
												}, this.bestIconNode);
							}
						},

						_setLabelAttr : function(text) {
							if (text)
								this._set("label", text);
						},

						buildTooltip : function() {
							this.inherited(arguments);
						},

						onOperationClick : function(evt) {
							if (this.operaTip && this.operaTip.isShow)
								return;
							this.operas = [];
							this.buildTooltip();
							this.operaTip = OperaTip.tip({
								refNode : this.operationNode,
								operas : this.operas
							});
							this.inherited(arguments);
						}
					});
			return item;
		});
},
'kms/ask/mobile/js/view/AskReplyButtonMixin':function(){
define(
		[ "dojo/_base/declare", "mui/form/editor/EditorPopupMixin",
				"dojo/topic", "dijit/registry" ],
		function(declare, EditorPopupMixin, topic, registry) {

			return declare(
					"kms.ask.AskReplyButtonsMixin",
					EditorPopupMixin,
					{

						name : 'docContent',

						_url : '/kms/ask/kms_ask_post/kmsAskPost.do?method=save&fdTopicId=${fdId}',

						onClick : function(evt) {
							this.defer(function() {
								this.onEditorClick(evt);
							}, 300);
							this.inherited(arguments);
						},

						afterHideMask : function() {
							this.inherited(arguments);
							location.reload();
						}
					});
		});
},
'kms/ask/mobile/js/view/AskReplyItemListMixin':function(){
define(
		[ "dojo/_base/declare", "mui/list/_TemplateItemListMixin",
				"kms/ask/mobile/js/view/item/AskReplyItemMixin",
				"dojo/request", "mui/util", "dojo/_base/array",
				"dojo/_base/json", "dojo/dom-construct", "dojo/query",
				"mui/rtf/RtfResizeUtil", "dojo/_base/lang" ],
		function(declare, _TemplateItemListMixin, AskReplyItemMixin, request,
				util, array, json, domConstruct, query, RtfResizeUtil, lang) {

			return declare(
					"kms.ask.AskReplyItemListMixin",
					[ _TemplateItemListMixin ],
					{

						itemRenderer : AskReplyItemMixin,

						evalDataUrl : '/kms/ask/kms_ask_comment/kmsAskComment.do?method=listComment',

						additionDataUrl : '/kms/ask/kms_ask_addition/kmsAskAddition.do?method=listAddition',

						buildRendering : function() {
							this.inherited(arguments);
							this.subscribe('/mui/list/loaded', 'requestEval');
							this.subscribe('/mui/list/loaded',
									'requestAddition');
						},

						// 构建点评列表
						requestEval : function(obj, evt) {
							if (obj != this)
								return;
							if (!evt)
								return;
							this.buildPostIds(evt);
							var self = this;

							request.post(util.formatUrl(this.evalDataUrl), {
								data : {
									fdPostIds : this.fdPostIds
								}
							}).response.then(function(data) {
								var jsonData = json.fromJson(data.text);
								self.renderEvalList(jsonData);
							});
						},

						buildPostIds : function(evt) {
							if (this.fdPostIds)
								return;
							this.fdPostIds = '';
							var datas = evt.datas;
							array.forEach(datas, function(data, index) {
								if (data[0] && data[0].value) {
									var id = data[0].value;
									this.fdPostIds += (index == 0 ? id : ';'
											+ id);
								}
							}, this);
						},

						// 构建补充回复列表
						requestAddition : function(obj, evt) {
							if (obj != this)
								return;
							if (!evt)
								return;
							this.buildPostIds(evt);
							var self = this;
							request.post(util.formatUrl(this.additionDataUrl),
									{
										data : {
											fdIds : this.fdPostIds
										}
									}).response.then(function(data) {
								var jsonData = json.fromJson(data.text);
								self.renderAdditionList(jsonData);
							});

						},

						// 渲染补充列表
						renderAdditionList : function(datas) {
							if (datas.length == 0) {
								query('.muiAskPostAddition').style('display',
										'none');
								return;
							}
							array
									.forEach(
											datas,
											function(data, index) {
												var fdPostId = data.fdPostId;
												var additionNode = query('#addition_'
														+ fdPostId)[0], contentNode = query(
														'div', additionNode)[0];

												if (contentNode.childNodes.length == 0) {
													domConstruct
															.create(
																	'span',
																	{
																		innerHTML : '补充回答：'
																	},
																	additionNode,
																	'first')
												}

												var content = domConstruct
														.create(
																'div',
																{
																	innerHTML : '<div class="muiAskInfo"><div class="muiAskContent">'
																			+ data.docContent
																			+ '<span class="muiAskTime">'
																			+ data.fdTime
																			+ '</span></div></div>',
																	className : 'muiAskAdditionItem'
																}, contentNode,
																'last');
												var resize = new RtfResizeUtil(
														{
															channel : 'ask',
															containerNode : content
														});
												this
														.subscribe(
																'/mui/list/onPull',
																lang
																		.hitch(
																				resize,
																				resize.destroy));
											}, this);
						},

						// 渲染点评列表
						renderEvalList : function(datas) {
							array
									.forEach(
											datas,
											function(data, index) {
												var fdPostId = data.fdPostId;
												var content = domConstruct
														.create(
																'div',
																{
																	innerHTML : '<span class="muiAuthor">'
																			+ data.fdName
																			+ '：</span>'
																			+ data.docContent
																			+ '<i class="muiTopicReplyEvaTime">'
																			+ data.fdTime
																			+ '</i>',
																	className : 'muiTopicReplyEvaluationLi'
																},
																query('#evaluation_'
																		+ fdPostId)[0],
																'last');
												var resize = new RtfResizeUtil(
														{
															channel : 'ask',
															containerNode : content
														});

												this
														.subscribe(
																'/mui/list/onPull',
																lang
																		.hitch(
																				resize,
																				resize.destroy));
											}, this);
						}
					});
		});
},
'kms/ask/mobile/js/view/AskAdditionMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style",
				"mui/form/Editor", "dojo/string", "dojo/query", "dojo/request",
				"mui/dialog/Tip", "dojo/_base/array", "mui/util",
				"dojo/Deferred", "dojo/_base/lang", "dojo/when", "dojo/topic",
				"dijit/registry", "mui/form/editor/EditorUtil" ],
		function(declare, domConstruct, domStyle, Editor, string, query,
				request, tip, array, util, Deferred, lang, when, topic,
				registry, EditorUtil) {

			return declare(
					"kms.ask.AskAdditionMixin",
					null,
					{

						additionUrl : '/kms/ask/kms_ask_addition/kmsAskAddition.do?method=save&fdKmsAskTopicId=${fdTopicId}&fdKmsAskPostId=${fdId}',

						canAdditionB : null,

						buildTooltip : function() {
							this.inherited(arguments);
							if (this.canAdditionB == 'true') {
								var self = this;
								this.operas
										.push({
											'icon' : 'mui-addInfo',
											'text' : '补充',
											'func' : function() {
												EditorUtil
														.popup(
																self.additionUrl,
																{
																	fdTopicId : self.fdTopicId,
																	fdId : self.fdId,
																	name : 'docContent'
																},
																function(data) {
																	topic
																			.publish(
																					"/mui/list/onPull",
																					registry
																							.byId('askPostList'));
																});
											}
										});
							}
						}

					});
		});
},
'kms/ask/mobile/js/view/AskEvaluationMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style",
				"mui/form/Editor", "dojo/string", "dojo/query", "dojo/request",
				"mui/dialog/Tip", "dojo/_base/array", "mui/util",
				"dojo/Deferred", "dojo/_base/lang", "dojo/when", "dojo/topic",
				"dijit/registry", "mui/form/editor/EditorUtil" ],
		function(declare, domConstruct, domStyle, Editor, string, query,
				request, tip, array, util, Deferred, lang, when, topic,
				registry, EditorUtil) {

			return declare(
					"kms.ask.AskEvaluationMixin",
					null,
					{
						evaluationUrl : '/kms/ask/kms_ask_comment/kmsAskComment.do?method=save&fdPostId=${fdId}',

						canEvalB : null,

						buildTooltip : function() {
							this.inherited(arguments);
							if (this.canEvalB == 'true') {
								var self = this;
								this.operas
										.push({
											'icon' : 'mui-evaluation',
											'text' : '点评',
											'func' : function() {
												EditorUtil
														.popup(
																self.evaluationUrl,
																{
																	fdId : self.fdId,
																	name : 'docContent'
																},
																function(data) {
																	topic
																			.publish(
																					"/mui/list/onPull",
																					registry
																							.byId('askPostList'));
																});
											}
										});
							}
						}

					});
		});
},
'kms/ask/mobile/js/view/AskBeBestMixin':function(){
define(
		[ "dojo/_base/declare", "mui/dialog/Confirm", "dojo/request",
				"mui/util", "dojo/_base/lang", "dojo/string", "dijit/registry",
				"dojo/topic", "dojo/dom-construct" ],
		function(declare, Confirm, request, util, lang, string, registry,
				topic, domConstruct) {

			return declare(
					"kms.ask.AskBeBestMixin",
					null,
					{
						canSetBestB : null,

						bestUrl : '/kms/ask/kms_ask_post/kmsAskPost.do?method=best&fdPostId=${fdId}&fdTopicId=${fdTopicId}',

						buildTooltip : function() {
							this.inherited(arguments);
							if (this.canSetBestB == 'true') {
								var self = this;
								this.operas.push({
									'icon' : 'mui-checked',
									'text' : '采纳',
									'func' : function() {
										self.onBeBest();
									}
								})
							}
						},

						best : function() {
							var promise = request.post(util.formatUrl(string
									.substitute(this.bestUrl, {
										fdId : this.fdId,
										fdTopicId : this.fdTopicId
									})), {});
							var self = this;
							promise.response.then(function(data) {
								if (data.status == 200) {
									location.reload();
								} else
									tip.fail({
										text : '操作失败'
									});
							});
						},

						onBeBest : function(evt) {
							Confirm('确定置为最佳？', null, lang.hitch(this, function(
									flag, dialog) {
								if (flag)
									this.best();
							}));
						}

					});
		});
}
}});