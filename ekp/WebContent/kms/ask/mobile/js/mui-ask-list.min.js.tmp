require({cache:{
'kms/ask/mobile/js/list/AskListScrollableViewMixin':function(){
define([ "dojo/_base/declare", "dojo/topic", "dojo/query", "dojo/dom-style",
		"dojo/_base/array", "mui/util", "dojox/mobile/viewRegistry" ],
		function(declare, topic, query, domStyle, array, util, viewRegistry) {
			var claz = declare("km.ask.AskListScrollableViewMixin", null, {

				SCROLL_UP : '/kms/ask/scrollup',
				SCROLL_DOWN : '/kms/ask/scrolldown',

				buildRendering : function() {
					this.inherited(arguments);
					this.subscribe(this.SCROLL_UP, 'scrollup');
					this.subscribe(this.SCROLL_DOWN, 'scrolldown')
				},

				scrollup : function(obj, evt) {
					this.defer(function() {
						this.enableTouchScroll(false);
					}, 1)
				},

				resize : function() {
					this.inherited(arguments);
					var viewNodes = query('.mblView', this.domNode);
					array.forEach(viewNodes, function(item) {
						var view = viewRegistry.getEnclosingView(item);
						view.height = util.getScreenSize().h - ___header_height
								- _footerHeight + 'px'
					}, this)
				},

				scrolldown : function(obj, evt) {
					// topic.publish('/mui/list/toTop', this);
					this.defer(function() {
						this.enableTouchScroll(true);
					}, 100)
				},

				generateSwapList : function() {
					this.inherited(arguments);
					this.enableTouchScroll(true);
				},

				enableTouchScroll : function(fire) {
					var c = this.getChildren();
					for (var j = 0; j < c.length; j++) {
						var children = c[j].getChildren();
						for (var i = 0; i < children.length; i++) {
							children[i].disableTouchScroll = fire;
						}
					}
				}
			});
			return claz;
		});
},
'kms/ask/mobile/js/list/AskItemListMixin':function(){
define([ "dojo/_base/declare", "mui/list/_TemplateItemListMixin",
		"kms/ask/mobile/js/list/item/AskItemMixin" ], function(declare,
		_TemplateItemListMixin, AskItemMixin) {

	return declare("kms.ask.AskItemListMixin", [ _TemplateItemListMixin ], {

		itemRenderer : AskItemMixin
	});
});
},
'kms/ask/mobile/js/list/AskHeaderMixin':function(){
define(
		[ "dojo/_base/declare", "mui/nav/MobileCfgNavBar", "dojo/request",
				"mui/util", "dojo/text!./tmpl/header.html", "dojo/string",
				"dojo/dom-construct", "dojo/Deferred", "dojo/when",
				"dojo/_base/lang", "dojo/_base/json", "dojo/_base/array",
				"dojo/dom-style", "dojox/mobile/_css3", "dojo/dom-attr",
				"dojo/topic" ],
		function(declare, Nav, request, util, tmpl, string, domConstruct,
				Deferred, when, lang, json, array, domStyle, css3, domAttr,
				topic) {

			return declare(
					"kms.ask.AskHeaderMixin",
					null,
					{

						navCount : 3,

						SCROLL_UP : '/kms/ask/scrollup',
						SCROLL_DOWN : '/kms/ask/scrolldown',

						li : '<li data-index="${index}"><div><h3>${count}</h3><h4>${text}</h4></div></li>',

						buildRendering : function() {
							this.inherited(arguments);
							this.subscribe('/mui/nav/onComplete', 'onComplete');

							this.subscribe(this.SCROLL_UP, 'scrollup');
							this.subscribe(this.SCROLL_DOWN, 'scrolldown')
						},

						scrollup : function(obj, evt) {
							domStyle.set(this.headerNode, {
								'height' : 0
							});

							domStyle.set(this.navNode, {
								'height' : '3.8rem'
							});
						},

						scrolldown : function(obj, evt) {
							domStyle.set(this.headerNode, {
								'height' : window._header_height + 'px'
							});

							domStyle.set(this.navNode, {
								'height' : 0
							});
						},

						onComplete : function(obj, items) {
							if (!items)
								return;
							when(this.requestNav(items), lang.hitch(this,
									this.buildNav));
						},

						buildNav : function() {
							var ls = [];
							array.forEach(this.navSource,
									function(item, index) {
										ls.push(string.substitute(this.li, {
											count : item['count'],
											text : item['text'],
											index : index
										}))
									}, this);

							this.headerNode = domConstruct.toDom(string
									.substitute(tmpl, {
										name : this.name,
										imgUrl : this.imgUrl,
										bgUrl : this.bgUrl,
										nav : ls.join('')
									}));

							domConstruct.place(this.headerNode, this.domNode,
									'last');
							this.navNode = domConstruct.create('div', {
								className : 'muiAskHeaderNav'
							}, this.domNode);

							var children = this.getChildren();
							array.forEach(children, function(item) {
								domConstruct.place(item.domNode, this.navNode,
										'last');
							}, this);
							window._header_height = this.domNode.offsetHeight;

							// 切换nav标签事件
							this.connect(this.headerNode, 'click',
									'_onNavClick');
						},

						_onNavClick : function(evt) {
							var target = evt.target;
							while (target) {
								var index = domAttr.get(target, 'data-index');
								if (index) {
									topic.publish(this.SCROLL_UP, this, {});
									var navItem = this.getNav().getChildren()[index];
									navItem.setSelected();
									navItem.defaultClickAction(evt);
									break;
								}
								target = target.parentNode;
							}
						},

						getNav : function() {
							if (this.navClaz)
								return this.navClaz;
							var children = this.getChildren();
							for (var i = 0; i < children.length; i++) {
								if (children[i] instanceof Nav)
									return this.navClaz = children[i];
							}
						},

						navIndex : 0,

						requestNav : function(items) {
							this.nav_leng = Math.min(items.length,
									this.navCount);
							this.deferred = new Deferred();
							this.navSource = [];
							for (var i = 0; i < this.nav_leng; i++) {
								var item = items[i];
								var text = item['text'];
								var url = item['url'];
								this.navSource.push({
									text : text
								});
								var count = this.ajaxRequest(
										util.setUrlParameter(url, 'method',
												'count'), i);
							}
							return this.deferred.promise;
						},

						ajaxRequest : function(url, i) {
							var self = this;
							var promise = request.get(util.formatUrl(url), {
								handleAs : 'json'
							}).response.then(function(data) {
								if (data.status == 200) {
									self.navIndex++;
									self.navSource[i].count = json
											.fromJson(data.text)['count'];
									if (self.nav_leng == self.navIndex)
										self.deferred.resolve();
								}
							});
						},

						startup : function() {
							this.inherited(arguments);
							window.___header_height = this.domNode.offsetHeight;
						},

						makeTranslateStr : function(to) {
							var y = to.y;
							return "translate3d(0," + y + ",0px)";
						},

						// 让惯性变得平滑
						smooth : function(dom) {
							var cssKey = css3['transition'];
							domStyle.set(dom, cssKey,
									' -webkit-transform 100ms linear');
							this.defer(function() {
								domStyle.set(dom, cssKey, '')
							}, 100);
						},

						scrollTo : function(dom, to, smooth) {
							if (smooth)
								this.smooth(dom);
							var s = dom.style;
							s[css3.name("transform")] = this
									.makeTranslateStr(to);
						}

					});
		});
},
'kms/ask/mobile/js/list/item/AskItemMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-class",
				"dojo/dom-style", "dojo/dom-attr", "dojox/mobile/_ItemBase",
				"mui/util", "mui/list/item/_ListLinkItemMixin", "dojo/string",
				"mui/device/device", "dojo/_base/array",
				"mui/list/item/_ListThumbItemMixin" ],
		function(declare, domConstruct, domClass, domStyle, domAttr, ItemBase,
				util, _ListLinkItemMixin, string, device, array) {
			var item = declare(
					"kms.ask.item.AskItemMixin",
					[ ItemBase, _ListLinkItemMixin ],
					{

						tag : "li",

						thumbs : null,

						buildRendering : function() {
							this._templated = !!this.templateString;
							if (!this._templated) {
								this.domNode = this.containerNode = this.srcNodeRef
										|| domConstruct.create(this.tag, {
											className : 'muiMixContentItem'
										});
								this.contentNode = domConstruct.create('a', {
									className : 'muiListItem'
								}, this.domNode);
								this.makeLinkNode(this.contentNode);
							}
							this.inherited(arguments);
							if (!this._templated)
								this.buildInternalRender();
						},

						buildInternalRender : function() {
							var infoNode = domConstruct.create('div', {
								className : 'muiMixContentTop'
							}, this.contentNode);
							// 头像节点
							this.imageNode = domConstruct.create('div', {
								innerHTML : string.substitute(
										'<img src="${d}">', {
											d : this.icon
										}),
								className : 'muiMixContentIcon'
							}, infoNode);

							var infoSubNode = domConstruct.create('div', {
								className : 'muiMixContentCreate'
							}, infoNode);

							// 提问者名称节点
							this.nameNode = domConstruct
									.create(
											'div',
											{
												innerHTML : '<span>'
														+ this.creator
														+ '</span>',
												className : 'muiMixContentCreator muiAuthor'
											}, infoSubNode);

							// 是否已经结束
							if (this.fdStatus && this.fdStatus != 0)
								domConstruct
										.create(
												'div',
												{
													innerHTML : '<i class="mui-asklist-close mui"></i>',
													className : 'muiAskStatus'
												}, infoNode);

							var otherInfoNode = domConstruct.create('div', {
								className : 'muiMixContentCreated'
							}, infoSubNode);

							// 发布时间节点
							this.timeNode = domConstruct.create('span', {
								innerHTML : '<i class="mui mui-time"></i>'
										+ this.created,
								className : 'muiAskTime'
							}, otherInfoNode);

							if (this.fdPostFrom && this.fdPostFrom >= 0)
								this.fromNode = domConstruct
										.create(
												'span',
												{
													innerHTML : '来自'
															+ device
																	.getClientTypeStr(this.fdPostFrom),
													className : 'muiAskFrom'
												}, otherInfoNode);

							var contentNode = domConstruct.create('div', {
								className : 'muiMixContentMiddle'
							}, this.contentNode);

							if (this.label) {
								// 悬赏节点
								this.scoreNode = domConstruct
										.create(
												'div',
												{
													className : 'mui mui-score',
													innerHTML : '&nbsp;<span class="muiAskScore">'
															+ this.fdScore
															+ '</span>'
												});
								// 标题节点
								this.labelNode = domConstruct.create('div', {
									className : 'muiMixContentTitle',
									innerHTML : this.scoreNode.outerHTML
											+ this.label
								}, contentNode);
							}

							// this.buildThumb(this.thumbs, this.contentNode);

							if (this.tagName) {
								var tagNode = domConstruct.create('div', {
									className : 'muiAskTag'
								}, this.contentNode);

								var tagPre = domConstruct.create('i', {
									className : 'mui mui-label'
								}, tagNode);

								var tagContentNode = domConstruct.create(
										'span', {
											innerHTML : this.tagName
										}, tagNode);
							}

							var feedBackNode = domConstruct.create('div', {
								className : 'muiMixContentBottom'
							}, this.contentNode);

							// 回复数
							this.replyNode = domConstruct
									.create(
											'div',
											{
												className : 'muiMixContentNum',
												innerHTML : '<i class="mui mui-eval"></i><span class="muiNumber">'
														+ this.fdReplyCount
														+ '</span>'
											}, feedBackNode);
						},

						startup : function() {
							if (this._started)
								return;
							this.inherited(arguments);
						},

						_setLabelAttr : function(text) {
							if (text)
								this._set("label", text);
						}
					});
			return item;
		});
},
'kms/ask/mobile/js/list/AskScrollableViewMixin':function(){
define([ "dojo/_base/declare", "dojo/dom-geometry", "dojo/touch",
		"dojo/_base/window", "dojo/topic", "dojo/_base/array", "mui/util",
		'dojo/dom-style', "dojox/mobile/_css3" ], function(declare,
		domGeometry, touch, win, topic, array, util, domStyle, css3) {
	var claz = declare("kms.ask.AskScrollableViewMixin", null, {

		SCROLL_UP : '/kms/ask/scrollup',
		SCROLL_DOWN : '/kms/ask/scrolldown',

		connects : [],

		dy : 0,

		buildRendering : function() {
			this.inherited(arguments);
			this.bindEvent();
			this.subscribe(this.SCROLL_DOWN, 'scollDown');
			this.subscribe(this.SCROLL_UP, '_scrollUp');
		},

		bindEvent : function() {
			this.touchStartHandle = this.connect(this.domNode, touch.press,
					"onTouchStart");
		},

		unBindEvent : function() {
			this.disconnect(this.touchStartHandle);
		},

		_scrollUp : function() {
			this.unBindEvent();
		},

		// 触发向上滑事件
		scrollUp : function(y) {
			topic.publish(this.SCROLL_UP, this, {
				y : y
			});
		},

		// 触发向下滑事件
		scollDown : function(y) {
			this.bindEvent();
		},

		onTouchStart : function(e) {
			this.dy = 0;
			this.connects
					.push(this.connect(win.doc, touch.move, "onTouchMove"));
			this.connects.push(this.connect(win.doc, touch.release,
					"onTouchEnd"));
			this.touchStartY = e.touches ? e.touches[0].pageY : e.clientY;
			this.startPos = domGeometry.position(this.domNode);
		},

		onTouchMove : function(e) {
			var y = e.touches ? e.touches[0].pageY : e.clientY;
			this.dy = y - this.touchStartY;
			if (this.dy > 0)
				return;

			if (Math.abs(this.dy) >= window._header_height
					- window.___header_height)
				return;

			this.scrollTo({
				y : this.dy
			});
		},

		onTouchEnd : function(e) {
			var y = 0, top = 0;
			var header_height = window._header_height;
			if (this.dy <= 0 && Math.abs(this.dy) >= header_height >> 1) {
				y = -(header_height - window.___header_height);
				this.scrollUp(y);
			}
			this.defer(function() {
				this.scrollTo({
					y : 0
				}, true);
			}, 100)

			this.disconnects();
		},

		disconnects : function() {
			array.forEach(this.connects, function(item) {
				this.disconnect(item);
			}, this);
			this.connects = [];
		},

		/***********************************************************************
		 * 下面为滑动方法
		 **********************************************************************/
		makeTranslateStr : function(to) {
			var y = to.y + "px";
			return "translate3d(0," + y + ",0px)";
		},

		scrollTo : function(to, smooth) {
			if (smooth)
				this.smooth();
			var s = this.domNode.style;
			s[css3.name("transform")] = this.makeTranslateStr(to);
		},

		// 让惯性变得平滑
		smooth : function() {
			var cssKey = '-webkit-transition';
			domStyle.set(this.domNode, cssKey,
					' -webkit-transform 100ms linear');
			this.defer(function() {
				domStyle.set(this.domNode, cssKey, '')
			}, 100);
		}
	});
	return claz;
});
},
'kms/ask/mobile/js/list/AskView':function(){
define(
		[ "dojo/_base/declare", "dojox/mobile/View", "dojo/dom-style",
				"dojo/dom-class", "dojo/_base/window", "dijit/registry",
				"dojo/_base/array", "dojo/topic",
				"kms/ask/mobile/js/list/AskScrollableViewMixin" ],
		function(declare, View, domStyle, domClass, win, registry, array,
				topic, AskScrollableViewMixin) {
			var claz = declare(
					"kms.ask.AskView",
					[ View, AskScrollableViewMixin ],
					{

						buildRendering : function() {
							this.inherited(arguments);
						},

						startup : function() {
							if (this._started)
								return;
							this.findAppBar();
							this.inherited(arguments);
						},

						// 搜索fixed为bottom或top的节点
						findAppBar : function() {
							if (this.domNode.parentNode) {
								for (var i = 0, len = this.domNode.parentNode.childNodes.length; i < len; i++) {
									c = this.domNode.parentNode.childNodes[i];
									this.checkFixedBar(c);
								}
							}
						},

						checkFixedBar : function(node) {
							if (node.nodeType === 1) {
								var fixed = node.getAttribute("fixed")
										|| node
												.getAttribute("data-mobile-fixed")
										|| (registry.byNode(node) && registry
												.byNode(node).fixed);
								if (fixed === "top") {
									domClass.add(node, "mblFixedHeaderBar");
									this.fixedHeader = node;
								} else if (fixed === "bottom") {
									domClass.add(node, "mblFixedBottomBar");
									this.fixedFooter = node;
								}
							}
						},

						width : '100%',
						resize : function() {
							this.footerHeight = window._footerHeight = (this.fixedFooter) ? this.fixedFooter.offsetHeight
									: 0;
							this.headerHeight = (this.fixedHeader) ? this.fixedHeader.offsetHeight
									: 0;
							domStyle.set(this.domNode, 'height',
									win.global.innerHeight - this.footerHeight
											- this.headerHeight + 'px');
							topic.publish('/mui/calendar/viewComplete', this, {
								fixedHeaderHeight : this.headerHeight,
								fixedFooterHeight : this.footerHeight
							})
							array.forEach(this.getChildren(), function(child) {
								if (child.resize)
									child.resize();
							});
						}
					});
			return claz;
		});
},
'kms/ask/mobile/js/list/AskHomeButton':function(){
define([ "dojo/_base/declare", "dojo/topic", "dojo/dom-class" ], function(
		declare, topic, domClass) {
	return declare("kms.ask.mobile.AskHomeButton", null, {

		SCROLL_DOWN : '/kms/ask/scrolldown',

		icon : 'mui mui-home-opposite',

		buildRendering : function() {
			this.inherited(arguments);
			domClass.add(this.domNode, "muiHrefBack");
		},

		show : function() {
			topic.publish(this.SCROLL_DOWN, this, {});
		}
	});
});
}
}});