require({cache:{
'sys/mobile/js/mui/list/StoreScrollableView':function(){
define([
    "dojo/_base/declare",
	"dojox/mobile/ScrollableView",
	"./_ViewPullReloadMixin",
	"./_ViewPushAppendMixin",
	"./_ViewScrollEventPublisherMixin"
	], function(declare, ScrollableView, _ViewPullReloadMixin, _ViewPushAppendMixin, _ViewScrollEventPublisherMixin) {
	
	
	return declare("mui.list.StoreScrollableView", [ScrollableView, _ViewPullReloadMixin, _ViewPushAppendMixin, _ViewScrollEventPublisherMixin], {
		
		scrollBar : false,
		
		threshold : 50,
		
		hideTopBottom: true
	});
});
},
'sys/mobile/js/mui/nav/NavBarStore':function(){
define("mui/nav/NavBarStore", [
                "./NavBar", 
                "dojo/_base/declare",
				"./_StoreNavBarMixin"
                ], function(NavBar, declare,
				StoreNavBarMixin) {
	return declare('mui.nav.NavBarStore', [NavBar, StoreNavBarMixin], {
		height:'3.8rem'
	});
});
},
'sys/mobile/js/mui/main':function(){
define([
    "./iconUtils",
    'mui/dialog/Tip',
    'dojox/mobile/SwapView',
    'dojo/NodeList-dom',
	'dojo/NodeList-html',
	'dojo/NodeList-manipulate',
	'dojo/NodeList-traverse'
	], function(iconUtils, Tip, SwapView) {
	if (!window.building) {
		window.building = function(){
			Tip.tip({
				icon : 'mui mui-warn',
				text : '功能建设中'
			});
		};
	}
	// 修改 w/4 为 w/2
	SwapView.prototype.slideTo = function(/*Object*/to, /*Number*/duration, /*String*/easing, /*Object?*/fake_pos){
		// summary:
		//		Overrides dojox/mobile/scrollable.slideTo().
		if(!this._beingFlipped){
			var w = this.domNode.offsetWidth;
			var pos = fake_pos || this.getPos();
			var newView, newX;
			if(pos.x < 0){ // moving to left
				newView = this.nextView(this.domNode);
				if(pos.x < -w/2){ // slide to next
					if(newView){
						to.x = -w;
						newX = 0;
					}
				}else{ // go back
					if(newView){
						newX = w;
					}
				}
			}else{ // moving to right
				newView = this.previousView(this.domNode);
				if(pos.x > w/2){ // slide to previous
					if(newView){
						to.x = w;
						newX = 0;
					}
				}else{ // go back
					if(newView){
						newX = -w;
					}
				}
			}

			if(newView){
				newView._beingFlipped = true;
				newView.slideTo({x:newX}, duration, easing);
				newView._beingFlipped = false;
				newView.domNode._isShowing = (newView && newX === 0);
			}
			this.domNode._isShowing = !(newView && newX === 0);
		}
		// this.inherited(arguments);
		this._runSlideAnimation(this.getPos(), to, duration, easing, this.containerNode, 2);
		this.slideScrollBarTo(to, duration, easing);
	};
	return {"iconUtils": iconUtils, "building": building};
});
},
'sys/mobile/js/mui/device/kk5/easymilib':function(){
/**
 * v1.1
 * easymilib.js是对easymicore.js的封装,屏蔽三种平台(模拟器，iOS,Android)的差异
 * 以后更新需要增加changeLog.
 *
 * changeLog
 * v1.2 2013-7-31
 *   1.规范所有接口的错误回调，在错误回调时，可以获取错误码和错误原因
 *   2.新增网络类型判断，可以判断当前网络是wifi还是数据网络(3g/2g)
 *   3.适配新的EasyMI模拟器，新的模拟器可以进行上传、下载、文件判断、本地db、文件目录判断等操作。(旧的模拟器也可以使用新的easymilib.js文件)
 *
 * v1.2.1 2013-9-27 
 *   1. 加入联系人操作相关API: Easymi.contact
 *
 * v1.2.2 2013-10-15 
 *   1. 加入微信分享相关API: Easymi.weixin
 * 
 * v1.2.3 2013-11-12
 *   录制视频success回调中增加一个结束类型endingType
 *
 * v1.2.4 2013-11-20
 *   拨打电话 api 增加一个参数: confirm, 用于决定是否进入拨号界面进行确认 (iOS上只能进入拨号界面, 不能直接拨打)
 *
 * v1.2.5 2013-12-09
 *   1.新增应用获取推送消息列表方法和删除一条推送消息方法
 *   2.新增快钱支付API
 *
 * v1.2.6 2013-12-13
 *   录制视频 api 增加一个参数: duration, 用于指定录制视频的时间
 * 
 * v1.2.7 2014-4-16
 *   修改phone.call方法，传递给native的confirm参数值
 * 
 * v1.2.8 2014-8-25
 *   添加 Easymi.contactor.chooseContactors方法, 可以从门户通讯录中选择联系人
 * 
 * v1.2.9 2014-9-1
 *   添加 Easymi.proxy.requestSetup方法, 可以为request设置默认参数
 */
var Easymi={
    /**
	 * detailLog表示是否需要记录详细日志。在业务代理访问和db操作时，返回的数据较多。
	 * 可通过detailLog这个标志标记是否记录这些数据,缺省为false,应用可以通过修改这个值，
	 * 增加更详细的日志信息。
	 */
	detailLog:false,
    defaultFailCallback:function(errCode,errMsg){
		if(Was.isEmulator){
			console.error("[Easymi.defaultFailCallback]code="+errCode+',msg='+errMsg);
		}else{//device no error method!xx
			console.debug("[Easymi.defaultFailCallback]code="+errCode+',msg='+errMsg);
		}
    }
};
Easymi.Utils={
    /**
     * Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:
     *
     * - `null`
     * - `undefined`
     * - a zero-length array
     * - a zero-length string (Unless the `allowEmptyString` parameter is set to `true`)
     *
     * @param {Object} value The value to test
     * @param {Boolean} allowEmptyString (optional) true to allow empty strings (defaults to false)
     * @return {Boolean}
     * @markdown
     */
    isEmpty: function(value, allowEmptyString) {
        return (value === null) || (value === undefined) || (!allowEmptyString ? value === '' : false) || (Easymi.Utils.isArray(value) && value.length === 0);
    },

    /**
     * Returns true if the passed value is a JavaScript Array, false otherwise.
     *
     * @param {Object} target The target to test
     * @return {Boolean}
     * @method
     */
    isArray: ('isArray' in Array) ? Array.isArray : function(value) {
        return toString.call(value) === '[object Array]';
    },

    /**
     * Returns true if the passed value is a JavaScript Date object, false otherwise.
     * @param {Object} object The object to test
     * @return {Boolean}
     */
    isDate: function(value) {
        return toString.call(value) === '[object Date]';
    },

    /**
     * Returns true if the passed value is a JavaScript Object, false otherwise.
     * @param {Object} value The value to test
     * @return {Boolean}
     * @method
     */
    isObject: (toString.call(null) === '[object Object]') ?
        function(value) {
            // check ownerDocument here as well to exclude DOM nodes
            return value !== null && value !== undefined && toString.call(value) === '[object Object]' && value.ownerDocument === undefined;
        } :
        function(value) {
            return toString.call(value) === '[object Object]';
        },

    /**
     * Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.
     * @param {Object} value The value to test
     * @return {Boolean}
     */
    isPrimitive: function(value) {
        var type = typeof value;

        return type === 'string' || type === 'number' || type === 'boolean';
    },

    /**
     * Returns true if the passed value is a JavaScript Function, false otherwise.
     * @param {Object} value The value to test
     * @return {Boolean}
     * @method
     */
    isFunction:
    // Safari 3.x and 4.x returns 'function' for typeof <NodeList>, hence we need to fall back to using
    // Object.prorotype.toString (slower)
        (typeof document !== 'undefined' && typeof document.getElementsByTagName('body') === 'function') ? function(value) {
            return toString.call(value) === '[object Function]';
        } : function(value) {
            return typeof value === 'function';
        },

    /**
     * Returns true if the passed value is a number. Returns false for non-finite numbers.
     * @param {Object} value The value to test
     * @return {Boolean}
     */
    isNumber: function(value) {
        return typeof value === 'number' && isFinite(value);
    },

    /**
     * Validates that a value is numeric.
     * @param {Object} value Examples: 1, '1', '2.34'
     * @return {Boolean} True if numeric, false otherwise
     */
    isNumeric: function(value) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    },

    /**
     * Returns true if the passed value is a string.
     * @param {Object} value The value to test
     * @return {Boolean}
     */
    isString: function(value) {
        return typeof value === 'string';
    },

    /**
     * Returns true if the passed value is a boolean.
     *
     * @param {Object} value The value to test
     * @return {Boolean}
     */
    isBoolean: function(value) {
        return typeof value === 'boolean';
    },
    /**
     * 对象赋值
     * @param object
     * @param config
     * @return {*}
     */
    applyIf: function(object, config) {
        var property;

        if (object) {
            for (property in config) {
                if (object[property] === undefined) {
                    object[property] = config[property];
                }
            }
        }

        return object;
    },
    /**
     * 格式化字符串,用法：{1},{2}表示第1,2,...个参数
     *      var str="My name is {1},i am {2} years old."
     *      Easymi.Utils.format(str,"tom",25);==>"My name is tom,i am 25 years old."
     * @param str
     */
    format:function(str){
        var args = arguments;
        return str.replace(/\{(\d+)\}/g,
            function(m,i){
                return args[i];
            });
    },
    /**
     * 将src中的@key等变量替换为obj[key]值
     * 如果是字符串，自动加上单引号
     * 如果是Date类型，自动按照yyyy-MM-DD hh:mm:ss格式格式化
     * 如：
     * sql='update mytable set field2=@field2 where field1=@field1';
     * sql2=replace(sql,{field1:123,field2:'iame'});
     * 则sql2的值为
     *      update mytable set field2='iame' where field1=123
     * @param src
     * @param obj
     */
    replace:function(src,obj,isExecute){
        return src.replace(/@(\w*)/g,function(m){
            var key= m.replace('@','');
			var value=obj[key];
            if(typeof value=='string'){
				//modify by wangfg@2012-4-22 替换字符串中的'特殊字符为''(sqlite,websql都是这个要求)
				//在设备上还需要替换回车换行
                if(isExecute){ //modify by wangfg@2012-6-18只在insert/update时才替换特殊字符
                    if(Was.isEmulator){
                        value=value.replace(/'/g,"''");
                    }else{
                        value=value.replace(/'/g,"\'\'");
                        value=value.replace(/\n/g,"\\n");
                        value=value.replace(/\r/g,"\\r");
                        value=value.replace(/;/g,"/;");//如果内容中有;需要转义，避免和sql语句的分隔;混淆
                    }
                }
                if(value.charAt(0)=="'"){
                    return value;
                }else{
                    return "'"+value+"'";
                }

            }else if(value instanceof Date){
                return "'"+Easymi.Utils.formatDate(obj[key])+"'";
            }
            if(value===0){       //要三等号，双等号时0==''是true的！
                return 0;           //避免下面的return把0转换为''
            }
            return value||"''";
        });
    },
    /**
     *
     * @param name
     * @param value
     * @param recursive
     * @return {Array}
     */
    toQueryObjects: function(name, value, recursive) {
        var self = Easymi.Utils.toQueryObjects,
            objects = [],
            i, ln;

        if (Easymi.Utils.isArray(value)) {
            for (i = 0, ln = value.length; i < ln; i++) {
                if (recursive) {
                    objects = objects.concat(self(name + '[' + i + ']', value[i], true));
                }
                else {
                    objects.push({
                        name: name,
                        value: value[i]
                    });
                }
            }
        }
        else if (Easymi.Utils.isObject(value)) {
            for (i in value) {
                if (value.hasOwnProperty(i)) {
                    if (recursive) {
                        objects = objects.concat(self(name + '[' + i + ']', value[i], true));
                    }
                    else {
                        objects.push({
                            name: name,
                            value: value[i]
                        });
                    }
                }
            }
        }
        else {
            objects.push({
                name: name,
                value: value
            });
        }

        return objects;
    },

    /**
     * 将json转为queryString
     * @param object
     */
    toQueryString: function(object) {
        var paramObjects = [],
            params = [],
            i, j, ln, paramObject, value;

        for (i in object) {
            if (object.hasOwnProperty(i)) {
                paramObjects = paramObjects.concat(Easymi.Utils.toQueryObjects(i, object[i], true));
            }
        }

        for (j = 0, ln = paramObjects.length; j < ln; j++) {
            paramObject = paramObjects[j];
            value = paramObject.value;

            if (Easymi.Utils.isEmpty(value)) {
                value = '';
            }
            else if (Easymi.Utils.isDate(value)) {
                value = Easymi.Utils.formatDate(value);
            }

            params.push(encodeURIComponent(paramObject.name) + '=' + encodeURIComponent(String(value)));
        }

        return params.join('&');
    },
    /**
     * 从select语句中获取列数组
     * 例如 sql='select f1,f2 from T1 where f1=123';
     * 获取的结果为['f1','f2']
     * @param sql
     */
    getColumnFromSql:function(sql){
       var columns=sql.replace(/^select/i,'').replace(/from.*/i,'').split(',');
        var result=[],column,index,index2;
        for(var i=0;i<columns.length;i++){
            column=columns[i].replace(/(^\s*)|(\s*$)/g, '');//trim
            index=column.toLowerCase().indexOf(" as ");
            if(index==-1){
                index2=column.lastIndexOf(' ');//no as,use blank
                if(index2==-1){
                    result.push(column.replace(/.*\./,''));//convert ST.STAGE to STAGE
                }else{
                    result.push(column.substr(index2+1));
                }
            }else{
                result.push(column.substr(index+3).replace(/(^\s*)|(\s*$)/g, ''));
            }
        }
        return result;
    },
    /**
     * 模拟Javascript继承，用法
     * var Super=extend({
     *     init:function(name){     //必须，接收构造函数参数初始化
     *          this.name=name;
     *     },
     *     f1:function(){
     *         alert("Super Name is:"+this.name);
     *     }
     *     f2:function(){
     *         alert("f2");
     *     }
     * })
     * var Sub=extend(Super,{
     *     init:function(name,age){
     *          this.base(name);  //调用父类的同名方法，相当于Java的super
     *          this.age=age;
     *     },
     *     f1:function(){   //覆盖父类方法
     *          alert("Sub Name is:"+this.name);
     *     }
     * });
     *
     * var sub1=new Sub("wfg",30);
     * sub1.f1();   ==>Sub Name is:wfg
     * sub1.f2();   ==>f2
     *
     *
     * @param baseClass
     * @param props
     * @return {Function}
     */
    extend:function(baseClass,props){
        window.classInitializing=false;
        if(typeof(baseClass)==="object"){
            props=baseClass;
            baseClass=null;
        }
        function F(){
            if(!window.classInitializing){
                if(baseClass){
                    this.basePrototype=baseClass.prototype;
                }
                this.init.apply(this,arguments);
            }
        }
        if(baseClass){
            window.classInitializing=true;
            F.prototype=new baseClass();
            F.prototype.constructor=F;
            window.classInitializing=false;
        }
        for(var name in props){
            if(props.hasOwnProperty(name)){
                if(baseClass && typeof(props[name])==='function' && typeof (F.prototype[name])==='function'){
                    F.prototype[name]=(function(name,fn){
                        return function(){
                            this.base=baseClass.prototype[name];
                            return fn.apply(this,arguments);
                        };
                    })(name,props[name]);
                }else{
                    F.prototype[name]=props[name];
                }
            }
        }
        return F;
    },
    /**
     * 格式化日期(可以指定format)
     *      yyyy-year
     *      MM-Month
     *      dd-day
     *      hh-hour
     *      mm-minute
     *      ss-second
     * @param date
     * @param format
     * @return {*}
     */

    /*   formatDate:function(date,format) {
     var o = {
     "M+" : date.getMonth()+1, //month
     "d+" : date.getDate(),    //day
     "h+" : date.getHours(),   //hour
     "m+" : date.getMinutes(), //minute
     "s+" : date.getSeconds(), //second
     "q+" : Math.floor((date.getMonth()+3)/3),  //quarter
     "S" : date.getMilliseconds() //millisecond
     }
     if(/(y+)/.test(format)) format=format.replace(RegExp.$1,
     (date.getFullYear()+"").substr(4 - RegExp.$1.length));
     for(var k in o){
     if(new RegExp("("+ k +")").test(format)){
     format = format.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] :("00"+ o[k]).substr((""+ o[k]).length));
     }
     }
     return format;
     },*/
    /*
     将String类型解析为Date类型.
     parseDate('2006-1-1') return new Date(2006,0,1)
     parseDate(' 2006-1-1 ') return new Date(2006,0,1)
     parseDate('2006-1-1 15:14:16') return new Date(2006,0,1,15,14,16)
     parseDate(' 2006-1-1 15:14:16 ') return new Date(2006,0,1,15,14,16);
     parseDate('2006-1-1 15:14:16.254') return new Date(2006,0,1,15,14,16,254)
     parseDate(' 2006-1-1 15:14:16.254 ') return new Date(2006,0,1,15,14,16,254)
     parseDate('不正确的格式') retrun null
     */
    /**
     * 将字符串解析为Date，字符串格式必须为yyyy-MM-dd hh:mm:ss.ms
     * @param str
     * @return Date
     */
    parseDate:function(str){
        if(typeof str == 'string'){
            var results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) *$/);
            if(results && results.length>3)
                return new Date(parseInt(results[1]),parseInt(results[2]) -1,parseInt(results[3]));
            results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2}) *$/);
            if(results && results.length>6)
                return new Date(parseInt(results[1]),parseInt(results[2]) -1,parseInt(results[3]),parseInt(results[4]),parseInt(results[5]),parseInt(results[6]));
            results = str.match(/^ *(\d{4})-(\d{1,2})-(\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2})\.(\d{1,9}) *$/);
            if(results && results.length>7)
                return new Date(parseInt(results[1]),parseInt(results[2]) -1,parseInt(results[3]),parseInt(results[4]),parseInt(results[5]),parseInt(results[6]),parseInt(results[7]));
        }
        return null;
    },
    /**
     * 将date格式化，按照yyyy-MM-dd hh:mm:ss.ms格式
     * @param v
     * @return {String}
     */
    formatDate:function(v){
        if(v instanceof Date){
            var y = v.getFullYear();
            var m = v.getMonth() + 1;
            var d = v.getDate();
            var h = v.getHours();
            var i = v.getMinutes();
            var s = v.getSeconds();
            var ms = v.getMilliseconds();
            if(ms>0) return y + '-' + m + '-' + d + ' ' + h + ':' + i + ':' + s + '.' + ms;
            if(h>0 || i>0 || s>0) return y + '-' + m + '-' + d + ' ' + h + ':' + i + ':' + s;
            return y + '-' + m + '-' + d;
        }
        return 'argument is not date';
    }

}
/**
 * Created with JetBrains WebStorm.
 * User: wangfg
 * Date: 12-8-8
 * Time: 下午5:23
 * To change this template use File | Settings | File Templates.
 */
__App = function() {
}
/**
 * 退出应用
 */
__App.prototype.exit = function() {
    Was.exec('app', 'exitApp',{});
};

/**
 * 启动其他应用
 * @param command，需要保证command在目标应用的app.xml中有配置，且全局唯一
 * 例子：AppA调用AppB
 * 在AppB的app.xml中配置
 *      <command>AppB.main<command>
 *      <command>AppB.sub1<command>
 *  通过如下方法启动AppB:
 *      Was.app.callApp(''AppB.main',{...});
 *      然后在AppB的onCreate/onResume
 * @param args
 */
__App.prototype.callApp = function(command,args,successCB,failCB) {
    args["__command"] = command;
    Was.exec('app', 'callApp',args,successCB,failCB || Easymi.defaultFailCallback);
};
/**
 * 启动第三方native应用
 *  iOS输入参数：
 *      {
 *          __url:Native应用注册处理的url。
 *      }
 *  Android输入参数：
 *      {
 *          __url:Intent url
 *          __type:Intent MimeType
 *          __action:Intent Action
 *          __category:Intent category。暂不支持多个。
 *          __package:Intent package。
 *          __class:Intent class。
 *          __otherParam:作为extra放到启动Intent中.
 *          	key为extra的name,value为char(3)+char(type)+extra_value,其中:
 *          	type==1为字符串，此时value可以直接为extra_value。
 *          	type==2为整型。
 *          	type==3为浮点型。
 *          	type==4为字符串数组。数组元素用char(4)分隔。
 *          	type==5为整型数组。数组元素用char(4)分隔。
 *          	type==6为浮点型数组。数组元素用char(4)分隔。
 *          	type==8为HTML内容，需要执行HTML.parse操作。
 *          	type==9为url。
 *      }
 */
__App.prototype.callNativeApp=function(options,successCB,failCB){
	var fcb=failCB || Easymi.defaultFailCallback;
    if(!options){
        fcb(1,'必须传递参数');
		return;
    }
    if(options.__otherParam){
        Easymi.Utils.applyIf(options,options.__otherParam);
    }
    Was.exec('app', 'callNativeApp',options,function(){
		console.debug('[app][callNativeApp][successCB]');
		if(successCB){
			successCB();
		}
	},fcb);

}
/**
 * 启动邮件 Native应用,对callNativeApp函数，具体应用的调用封装。options为
 *      {
 *          sendTo:收件人，可以为一个或多个，如果是多个，传字符串数组
 *          subject:主题，字符串
 *          content:正文，字符串
 *          mimeType:正文的MIME_TYPE，缺省为text/html。
 *      }
 */
__App.prototype.callNativeApp_Email_Android=function(options,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    if(!options || !options.sendTo || !options.subject || !options.content){
        fcb(1,'必须传递相关参数');
		return;
    }
	//参数缺省处理
	options.mimeType=options.mimeType || 'text/html';
	if(options.mimeType.toLowerCase()=='text/html'){
		options.contentIsHtml=true;
	}
	if(!Easymi.Utils.isArray(options.sendTo)){
		options.sendTo=[options.sendTo];
	}
	//参数预处理
	var emailAddresses = String.fromCharCode(3)+String.fromCharCode(4);
    for(var i=0;i<options.sendTo.length;i++){
		emailAddresses = emailAddresses + options.sendTo[i];
		if(i!=options.sendTo.length - 1){
			emailAddresses = emailAddresses + String.fromCharCode(4);
		}
	}
	options.sendTo=emailAddresses;
	if(options.contentIsHtml){
		options.content = String.fromCharCode(3)+String.fromCharCode(8)+options.content;
	}
	//调用原子函数
	this.callNativeApp({
		__action:"android.intent.action.SEND",
		__category:"android.intent.category.DEFAULT",
		__type:options.mimeType,
		__otherParam:{
			"android.intent.extra.SUBJECT":options.subject,
			"android.intent.extra.TEXT":options.content,
			"android.intent.extra.EMAIL":options.sendTo
		}
	},successCB,fcb);
}
/**
 * 启动日历 Native应用,对callNativeApp函数，具体应用的调用封装。options为
 *      {
 *          date：定位到日历上的那一天，缺省为当前日期。日期格式为''
 *      }
 */
__App.prototype.callNativeApp_Calander_Android=function(options,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
	//参数缺省处理
	options=options||{};
	if(options.date){
		options.date=Easymi.Utils.parseDate(options.date);
	}else{
		options.date=new Date();
	}
	options.date=options.date.getTime();
	
	//调用原子函数
	this.callNativeApp({
		__url:"content://com.android.calendar/time/"+options.date,
		__action:"android.intent.action.VIEW",
	},successCB,fcb);
}
/**
 * 应用用来注册事件监听的方法
 * @param eventName,需要监听的事件名称
 *   包括:
 *      onCreate:应用启动，eventCB参数为
 *          netState：网络状态。1在线；0离线；
 *          startType：触发类型。
 *              1用户请求使用应用。
 *              2被推送消息拉起。
 *              3被其它应用调用拉起。
 *          callArgs：调用参数
 *              当startType==3时，为调用参数。
 *              当startType==2时，为推送消息数据，具体定义请参见onPushMessage事件中的描述。
 *       onPause:应用暂停。应用进入暂停之前，本事件发生。eventCB参数:无
 *       onResume:应用继续之后，本事件都会发生。。eventCB参数同onCreate事件
 *       onExit:应用退出之前，本事件发生。eventCB参数:无
 *       onPushMessage：推送消息到达之时，本事件发生。eventCB参数:
 *          type：推送消息类型
 *              1为推送到应用的消息
 *              2为推送到应用图标的消息
 *          format：消息内容类型
 *              1表示普通字符串
 *              2表示二进制内容经过BASE64编码得到的字符串
 *          content：推送消息的内容。
 *       onNetStateChange:托座的网络状态变化之后，本事件发生。eventCB参数:
 *          netState：网络状态
 *              1在线，0离线。
 *       onBackKeyPressed:返回键点击事件(Android Only)，eventCB参数：
 *			无
 *       onPhoneStateChange:电话状态改变的事件(Android Only)，eventCB参数:
 *          state:变化后的状态
 *              1:RING(响铃),2:OFFHOOK(摘机),3.IDLE(空闲)
 *          param:状态参数
 *              当state为1时，表示来电号码，state为其他值，param参数无意义
 *
 * @param eventCB,回调函数
 */
__App.prototype.addEventListener = function(eventName, eventCB) {
    Was.addEventListener(eventName, eventCB);
};
/**
 * 向当前应用的Context中设置参数
 * @param key
 * @param value
 */
__App.prototype.putContextValue=function(key,value){
    console.debug("[app][putContextValue]key="+key+",value="+value);
    Was.exec("context","put",{k:key,v:value},function(){
        console.debug("[app][putContextValue]sucessCB="+JSON.stringify(arguments));
    },Easymi.defaultFailCallback);
};

/**
 * 从当前应用的Context中获取参数，获取的参数通过successCB(value)得到
 * @param key
 * @param successCB
 */
__App.prototype.getContextValue=function(key,successCB){
    console.debug("[app][getContextValue]key="+key);
    Was.exec("context","get",{k:key},
        function(args){
            console.debug("[app][getContextValue]sucessCB:"+JSON.stringify(args));
            successCB(args["v"]);
        },
        Easymi.defaultFailCallback
    );
}
/**
 * 设置图标数字标记
 * @param value
 */
__App.prototype.setBadget=function(value){
    if(typeof value=="string"){
        value=parseInt(value);
    }
    if(typeof value!="number"){
        return;
    }
    Was.exec("message","setAppBadge",{num:value},null,Easymi.defaultFailCallback);
}

/**
 * 获取图标数字标记
 * @param successCB
 */
__App.prototype.getBadget=function(successCB){
    Was.exec("message","getAppBadge",{}
        ,function(args){
            successCB(args["num"]);
        },
        Easymi.defaultFailCallback
    );
}
/**
 * 获取应用的所有设置，sucessCB参数为获取到的JSON对象
 * @param successCB
 */
__App.prototype.getSettings=function(successCB){
    Was.exec("app","settings",{},successCB,Easymi.defaultFailCallback);
}
/**
 * 获取应用的所有设置，sucessCB参数为key对应的value
 * @param key
 * @param successCB
 */

__App.prototype.getSetting=function(key,successCB){
    Was.exec("app","setting",{key:key},function(setting){
        console.debug("[app][getSettings]success:"+JSON.stringify(arguments));
        successCB(setting['value']);
    },Easymi.defaultFailCallback);
}
/**
 * 获取HybirdEngine的网络状态：0:未连接。1:连接。
 */
__App.prototype.getNetState=function(){
    return Was.netState;
}
/**
 * return {
 *     os:操作系统,iOS/Android
 *     type:类型，phone/pad
 *     pixel:分辨率，形如:1024x767（大数在前）
 *     largerPixel:pixel中教大的一边
 *     smallerPixel:pixel中的较小的一边
 * }
  */
__App.prototype.getDeviceInfo=function(){
    if(Was.deviceInfo){//mobile device
        var p=Was.deviceInfo.pixel.split('x');
        return {
            os:Was.deviceInfo.os,
            type:Was.deviceInfo.type,
            largerPixel:parseInt(p[0]),
            smallerPixel:parseInt(p[1]),
            pixel:Was.deviceInfo.pixel
        };
    }

    return {
        os:'windows',
        type:'pad',
        largerPixel:screen.width,
        smallerPixel:screen.height,
        pixel:screen.width+'x'+screen.height
    };

};
/**
 * 获取用户信息,返回:
 * {
 *     userID:'xxx',        //用户ID
 *     loginName:'xxx'		//登录名
 *     userName:'xxx'       //用户实际名称
 * }
 *
 */
__App.prototype.getUserInfo=function(){
	//add by wangfg@2013-3-28 兼容还没有loginName的情况
	if(!Was.userInfo.loginName){
		Was.userInfo.loginName=Was.userInfo.userName
	}
    return Was.userInfo;
}
/**
 * 给WebView设置Cookie
 * @param url  要设置cookie的url
 * @param cookie 要设置的cookie内容，必须符合rfc2109规范。
 */
__App.prototype.setCookie=function(url,cookie,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("cookie","setCookie",{
        url:url,
        cookie:cookie
    },successCB,fcb);
}
/**
 * 从WebView中获取Cookie
 * @param url  要获取cookie的url
 * @param successCB 获取结果的回调函数，参数为cookie
 */
__App.prototype.getCookie=function(url,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("cookie","getCookie",{
        url:url
    },function(cookie){
        if(successCB){
            successCB(cookie);
        }
    },fcb);
}

/**
 * 方法getPushMsgList：获取推送消息列表，输入以下参数：
 * @param mode 过滤的消息模式
 *  	1：拉起应用；
 *		2：冒泡消息；
 *		3：应用消息数量消息；
 *		4：即时消息。
 * 备注：若不指定其值，则表示获取所有模式的推送消息。
 * @param start 从第几个消息开始读取，缺省值为0
 * 备注：若不指定其值，则从第一个消息开始读取。
 * @param recordCount 本次读取多少条消息。
 * 备注：若不指定其值，则读取全部信息。
 * 
 * @param successCB 成功返回值，包含以下参数：
 * 	msgCount:所有消息数量。
 * 	recordCount:本次获取到的记录数。
 *    EOF:0/1。1表示已经全部读完了。
 *		record:消息对象的JS对象格式化字符串[{消息1},{消息2}…{消息recordCount}]。其中，每个记录的格式为：
 * 		msgID:消息ID
 * 		title:消息标题
 * 		mode:模式。
 *  		pushTime:服务器推送时间。  
 *  		format:格式（1:文本;2：Base64编码文本。)
 * 		content:消息内容
 */
__App.prototype.getPushMsgList = function(args,successCB,failCB){
    var fcb = failCB || Easymi.defaultFailCallback;
	
	 if(!args){
		fcb(-1,'args can not be empty');
	 }

    Was.exec("message","getPushMsgList",args,function(result){
        console.debug("[app][getPushMsgList]success:"+JSON.stringify(result));

        result.record = eval(result.record);

        if(successCB){
            successCB(result);
        }
    },fcb);
}

/**
 * 方法delPushMsg ：删除一条推送消息，输入以下参数：
 * @param msgID 消息ID
 */
 __App.prototype.delPushMsg = function(args,successCB,failCB){
    var fcb = failCB || Easymi.defaultFailCallback;
	
	if(!args){
		fcb(-1,'args can not be empty');
	}
	
	if(!args.msgID){
		fcb(-1,'msgID can not be empty');
	}
	 
    Was.exec("message","delPushMsg",{
		msgID : args.msgID
	},function(){
        if(successCB){
            successCB();
        }
    },fcb);
}

/**
 * 应用截屏
 * @param  {Object}   option 配置参数
 *                        所有的配置项有
 *                        targetWidth:输出图片宽, 默认100
 *                        targetHeight:输出图片高, 需和targetHeight配合使用, 默认100
 *                        encodingType:输出格式 (jpeg,png), 默认png
 *                        quality: 输出图片质量 (0-100), 默认50
 *                        destinationType：输出形式(file,data), 默认 data
 *                        savePath：保存路径(只支持协议格式,如果不指定默认保存在
 *                            sdcard://easymi/ 下
 * @param  {Function} done   成功回调
 *                        成功回调函数接收一个对象作为参数, 对象中的参数有:
 *                        imageURI 处理后的文件保存路径(当destinationType为file时)
 *                        imageFileOSPath 处理后的文件的操作系统路径(当destinationType为file时)
 *                        imageData 图片内容的base编码(当destinationType为data时)"
 * @param  {Function}   fail   失败回调
 *                         失败毁掉接收错误代码作为参数, 目前定义的错误代码有:
 *                             -2: 参数错误
 */
__App.prototype.captureScreen = function (option, done, fail){
    fail = fail || Easymi.defaultFailCallback;
    option = option || {};
    option.targetWidth = option.targetWidth || 100;
    option.targetHeight = option.targetHeight || 100;
    option.encodingType = option.encodingType || 'png';
    option.quality = option.quality || 50;
    option.destinationType = option.destinationType || 'data';
    Was.exec('app', 'screenCapture', option, done, fail);
};

/**
 * 显示webview标题栏/导航栏
 */
__App.prototype.showTitleBar = function (){
    Was.exec('app', 'config', {isTitleBarVisible:true}, null, null);
};

/**
 * 隐藏webview标题栏/导航栏
 */
__App.prototype.hideTitleBar = function (){
    Was.exec('app', 'config', {'isTitleBarVisible': false}, null, null);
};

Easymi.app=new __App();


__Device = function() {}

/**
 * 控制设备屏幕的旋转
 * @param orientation的取值
 *  1：Portrait，竖屏
 *  2：Landscape，横屏
 */
__Device.prototype.setOrientation=function(orientation){
    console.debug("[Device][setOrientation]orientation="+orientation);
	if(orientation!=1 && orientation!=2){
		console.error("[Device][setOrientation]illegal param");
		return;
	}
    Was.exec("device","setOrientation",{orientation:orientation},function(){
        console.debug("[Device][setOrientation][successCB]:"+JSON.stringify(arguments));
    },Easymi.defaultFailCallback);

};

/**
 * 获取设备使用的网络类型
 * @param successCB(netType)
 * netType的值为2G/3G/WIFI，如果无网络返回''
 * 注：iOS无法区分2G/3G网络，因此，只要设备当前使用的是移动网络，则当成是3G。
 */
__Device.prototype.getCurrentNetType=function(successCB,failCB){
	var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("device","getCurrentNetType",{},function(netType){
        if(successCB){
		   successCB(netType);
		}
    },fcb);
}
Easymi.device=new __Device();
/**
 * Created with JetBrains WebStorm.
 * User: wangfg
 * Date: 12-8-23
 * Time: 下午2:56
 * To change this template use File | Settings | File Templates.
 */
function __File(fileName) {
    this.fileName=fileName;
};
/**
 * 获取文件在操作系统中的绝对路径
 * @param successCB(osPath)
 * @param failCB
 */
__File.prototype.getOSPath=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    console.debug("[file][getOSPath]fileName="+this.fileName);
    Was.exec("file","getFileOSPath",{EasyMIPath:this.fileName},function(args){
		console.debug('[file][getOSPath]successCB:'+JSON.stringify(args));
        if(successCB){
			successCB(args.OSPath);
		}
    },fcb);
}
/**
 * 获取文件信息
 * @param successCB(info)
 *      info:{
 *          isDir:true|false,
 *          size:大小，单位byte
 *          lastModifyTime:最后修改时间
 *      }
 * @param failCB
 */
__File.prototype.info=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("file","info",{filepath:this.fileName},function(info){
        console.debug('[file][info][successCB]'+JSON.stringify(info));
        if(successCB){
            info.isDir=info.isDir==1;
            successCB(info);
        }
    },fcb);
};
__File.prototype.exist=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    console.debug('[file][exist]fileName:' + this.fileName);
    Was.exec("file","exists",{filepath:this.fileName},function(args){
        console.debug('[file][exist][successCB]');
		//add by wangfg@2013-6-27 增加兼容性处理，兼容没有调整错误码前的逻辑，原先是根据retCode判断是否存在的
		var retCode = args["retCode"];
        if(retCode==0){
            successCB(true);
        }else if(retCode==1){
            successCB(false);
        }else if (retCode!=undefined){
            fcb();
		}else if(successCB){
            successCB(true);//新逻辑
        }
    },function(code,msg){
        console.debug('[file][exist][failCB]'+code+","+msg);
        if(code==1){
            if(successCB){
                successCB(false);
            }
        }else{
            fcb(code,msg);
        }
    });
}

__File.prototype.remove=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("file","delete",{filepath:this.fileName,needConfirm:0}
        ,function(){
            if(successCB){
                successCB();
            }
        },fcb);
}
/**
 * options:参数
 *    useWebview：是否使用webview打开，android Only
 *    otherButton:可以定义其他的按钮文字（缺省带返回按钮），如果多个用逗号分隔
 *    mimeType:文件的类型，如果不传，从文件名分析。
 * callback:按了按钮后的回调，参数为
 *    buttonIndex:按钮的顺序，1~N,0表示按了返回
 *    
 *
 */
__File.prototype.view=function(options,callback){
    console.debug("[file][view]fileName="+this.fileName);
	options=options||{};
	if(!options.hasOwnProperty('useWebview')){
		options.useWebview=false;  //default set to false
	}
	options.filepath=this.fileName;
    //Was.exec("file","viewdoc",{filepath:filepath},null,null);
    Was.exec("file","viewdoc",options,function(arg){
		console.debug("[file][view]callback,you clicked button "+arg.buttonIndex);
		if(callback){
		    callback(arg.buttonIndex);
		}
	});
}
__File.prototype.readAsText=function(encoding,successCB,failCB){
	if(Easymi.Utils.isFunction(encoding)){
		successCB=encoding;
		failCB=successCB;
		encoding='utf-8';
	}
    var fcb=failCB || Easymi.defaultFailCallback;
	console.debug("[file][readAsText]fileName="+this.fileName+',encoding='+encoding);
    Was.exec("file","getFileContent",{filepath:this.fileName,encode:encoding},function(args){
		console.debug("[file][readAsText]sucessCB");
		if(successCB){
			successCB(args.content);
		}
	},fcb);
}


Easymi.File=__File;

/**
 * Created with JetBrains WebStorm.
 * User: wangfg
 * Date: 12-8-16
 * Time: 上午10:12
 * To change this template use File | Settings | File Templates.
 */
var __Media=function(){

}
/**
 *   获取图片
 *   optionParams
 *          sourceType  数据来源  album/camera,缺省为camera
 *          destinationType 期望的数据类型 file|data,缺省为data
 *          targetWidth  期望的图片宽度，缺省为100
 *          targetHeight  期望的图片高度  (必须和targetWidth配合，同时使用)，缺省为100
 *          encodingType  期望得到的图片的格式  jpeg/ png，缺省为png
 *          quality  图片压缩率  : 0-100，缺省为50
 *          savePath   如果destinationType==file,savePath可以设置保存的文件路径
 *                      文件路径的格式参见《EasyMI JS API参考手册.doc》中的说明
 *          saveLocation 是否在照片中保存位置信息,只有在
 *                      sourceType==camera,
 *                      destinationType==file
 *                      encodingType==jpeg
 *                      三种条件下时，才生效
 *
 *   successCB  成功后的回调
 *          successCB(data,savePth)
 *              如果destinationType=='file',
					data为操作系统实际的路径，形如：file:///data/data/com.mibridge.easymi/appfile/common/photo/1364555998813.jpg,webapp拿到这个路径后，可以直接赋值给img.src等
					savePath为参数传入的路径(若没有传入，则系统自动生成一个路径)
				如果destinationType=='data'
					data为图片的base64后的编码,savePath为空
				
 *   failCB   失败后的回调
 */
__Media.prototype.getPicture=function(optionParams,successCB,failCB){
    optionParams=optionParams||{};
    if(!optionParams.sourceType){
        optionParams.sourceType="camera";
    }
    if(!optionParams.destinationType){
        optionParams.destinationType="data";
    }
    if(!optionParams.targetWidth){
        optionParams.targetWidth=100;
    }
    if(!optionParams.targetHeight){
        optionParams.targetHeight=100;
    }
    if(!optionParams.encodingType){
        optionParams.encodingType="jpeg";
    }
    if(!optionParams.quality){
        optionParams.quality=50;
    }
    optionParams.exifFlag=optionParams.saveLocation;
    var fcb=failCB || Easymi.defaultFailCallback;
    console.debug("[media][getPicture]optionParams:"+JSON.stringify(optionParams));
    Was.exec("image", "getPicture", optionParams,
        function(args) {
            console.debug("[media][getPicture][successCB]");
            if(optionParams.destinationType=="data"){
                successCB(args["imageData"]);
            }else{
                successCB(args["imageFileOSPath"],args["imageURI"]);
            }
        },fcb);
};

/**
 *   一次拍多张照片
 *   optionParams
 *          targetWidth  期望的图片宽度，缺省为100
 *          targetHeight  期望的图片高度  (必须和targetWidth配合，同时使用)，缺省为100
 *          encodingType  期望得到的图片的格式  jpeg/ png，缺省为png
 *          quality  图片压缩率  : 0-100，缺省为50
 *          savePath   照片的保存路径，用逗号(,)分隔多个文件路径
 *                      文件路径的格式参见《EasyMI JS API参考手册.doc》中的说明
 *			limitTime  拍照限制时间，单位为秒。不传认为不限制
 *
 *   successCB  成功后的回调
 *          successCB(imageURI,imageFileOSPath)
 *              imageURI为实际拍照的图片路径（传入的路径格式），以逗号分隔
 * 				imageFileOSPath为实际拍照的图片绝对路径，以逗号分隔
 *   failCB   失败后的回调
 */
__Media.prototype.getMultiPicture=function(optionParams,successCB,failCB){
    optionParams=optionParams||{};
    if(!optionParams.targetWidth){
        optionParams.targetWidth=100;
    }
    if(!optionParams.targetHeight){
        optionParams.targetHeight=100;
    }
    if(!optionParams.encodingType){
        optionParams.encodingType="jpeg";
    }
    if(!optionParams.quality){
        optionParams.quality=50;
    }
	if(!optionParams.limitTime){
        optionParams.limitTime=-1;
    }
	optionParams.exifFlag=false;
    var fcb=failCB || Easymi.defaultFailCallback;
    console.debug("[media][getMultiPicture]optionParams:"+JSON.stringify(optionParams));
    Was.exec("image", "getMultiCameraPics", optionParams,
        function(args) {
            console.debug("[media][getMultiPicture][successCB]:"+JSON.stringify(args));
            successCB(args["imageURI"],args["imageFileOSPath"]);
        }, function(code,msg){
			console.debug("[media][getMultiPicture][failCB]:"+JSON.stringify(args));
			fcb(code,msg);
		});
};

/**
 *   保存照片到相册
 *   options
 *          filepath  照片路径
 *   successCB  成功后的回调,无参数
 *   failCB   失败后的回调，参数为(errCode,errMsg)
 *   	errCode的取值
 *        	1：读取图片文件失败
 *			9：保存到相册失败
 */
__Media.prototype.save2album=function(options,successCB,failCB){
	console.debug("[media][save2album]options:"+JSON.stringify(options));
	var fcb=failCB||Easymi.defaultFailCallback;
	if(!options.filepath){
		fcb(1,'必须指定照片路径');
		return;
	}
    Was.exec("image", "save2album", options,
        function(args) {
            console.debug("[media][save2album][successCB]:"+JSON.stringify(args));
            if(successCB){
				successCB();
			}
        }, fcb);
};


/**
 * 开始音频录制，录制的格式取决于移动设备操作系统支持
 * 在Android下，录制的格式为amr(audio/amr)
 * 在iOS下，录制的格式为wav(audio/wav)
 *
 * @param options,录音参数
 *  {
 *      savePath:要保存的路径 (如果不指定，将使用sdcard://协议保存一个随机文件名)。
 *  }
 * @param successCB
 *    录制启动成功的回调
 * @param failCB
 *    录制启动失败的回调
 */
__Media.prototype.captureAudioStart=function(options,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "captureAudioStart",options, function(){
        console.debug("[media][captureAudioStart]successCB:"+JSON.stringify(arg));
        if(successCB){
            successCB();
        }
    },fcb);
}
/**
 * 录音暂停
 * @param successCB
 *    暂停成功的回调
 * @param failCB
 *    暂停失败的回调
 */
__Media.prototype.captureAudioPause=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "captureAudioPause",options, function(){
        console.debug("[media][captureAudioPause]successCB:"+JSON.stringify(arg));
        if(successCB){
            successCB();
        }
    },fcb);
}
/**
 * 录音继续
 * @param 
 * @param successCB
 *    录音继续成功的回调
 * @param failCB
 *    录音继续失败的回调
 */
__Media.prototype.captureAudioResume=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "captureAudioResume",options, function(){
        console.debug("[media][captureAudioResume]successCB:"+JSON.stringify(arg));
        if(successCB){
            successCB();
        }
    },fcb);
}


/**
 * 停止音频录制
 *
 * @param successCB
 *    录制停止成功的回调，参数为JSONObject,描述录制后的文件信息，包括：
 *        name:不含路径信息的文件名
 *        fullPath： 包含文件名的文件全路径
 *        type： MIME类型
 *        lastModifiedDate:文件最后修改的日期和时间
 *        size：以字节数表示的文件大小
 * @param failCB
 *    录制停止失败的回调
 */
__Media.prototype.captureAudioStop=function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "captureAudioStop", {},function(file){
        console.debug("[media][captureAudioStop]successCB:"+JSON.stringify(file));
        if(successCB){
            successCB(file);
        }
    },fcb);
};
/**
 * 获取设备支持的视频质量
 * @param successCB
 *    设备支持的视频质量列表，列表项之间通过逗号(,)分隔。
 *	  选择一种视频质量，作为参数传入视频录制的API中。
 *    视频质量可能的值包括：
 *        HIGH   
 *        MEDIUM 
 *        LOW    
 *        480P   
 *        540P   
 *        720P   
 *        1080P  
 *        QVGA   
 *        QCIF   
 *        CIF
 * 具体设备支持的质量参数是上述值的子集
 *      
 */
__Media.prototype.getSupportedVideoQuality=function(successCB){
    Was.exec("media", "getSupportVideo",{},function(arg){
        if(successCB){
            successCB(arg.supportList);
        }
    }, Easymi.defaultFailCallback);
};
/**
 * 开始视频录制，录制的格式取决于移动设备操作系统支持
 * 在Android下，录制的格式为3gpp(video/3gpp)
 * 在iOS下，录制的格式为mov(video/3gpp)
 * @param options，录制参数
 *  {
 *		quality:质量参数，来源于getSupportedVideoQuality方法，默认为LOW
 *      savePath:要保存的路径 (如果不指定，将使用sdcard://协议保存一个随机文件名)。
 *      duration:录像时常(单位:秒;如果不指定，则默认长度不做限制)。
 *  }
 *
 * @param successCB
 *    录制成功的回调,参数为JSONObject,描述录制后的文件信息，包括：
 *        name:不含路径信息的文件名
 *        fullPath： 包含文件名的文件全路径
 *        type： MIME类型
 *        lastModifiedDate:文件最后修改的日期和时间
 *        size：以字节数表示的文件大小
 *		  endingType:录制结束方式，0：手工结束，1：电话或其他因素打断
 *
 * @param failCB
 *    录制失败的回调
 */
__Media.prototype.captureVideo=function (options,successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
	options = options || {};
    Was.exec("media", "captureVideo",options,function(result){
        console.debug("[media][captureVideo]successCB:"+JSON.stringify(result));
        if(successCB){
            successCB(result);
        }
    },fcb);
};


/**
 * 带native UI的录音能力
 * @param  {Function} successCB 成功回调
 *                          成功回调接收一个对象作为参数, 该对象拥有的字段有:
 *                          name 文件名
 *                          fullPath 文件全路径
 *                          type 文件mime-type
 *                          size 文件大小（单位为字节）
 * @param  {Function} failCB    失败回调
 *                          失败回调接收错误代码作为参数, 目前定义的错误代码有:
 *                          -3:录音被取消了
 *                          -9:录音错误
 */
__Media.prototype.captureAudioView = function(successCB,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "captureAudioView",{},function(result){
        console.debug("[media][captureAudioView]successCB:"+JSON.stringify(result));
        if(successCB){
            successCB(result);
        }
    },fcb);
};

/**
 * 待native UI的音频播放能力
 * @param  {String}   filePath  音频文件路径
 * @param  {Function} failCB    失败回调
 *                           失败回调接收错误代码作为参数, 目前定义的错误代码有:
 *                           -3:播放被取消了
 *                           -9:播放错误
 */
__Media.prototype.playAudioView = function(filePath,failCB){
    var fcb=failCB || Easymi.defaultFailCallback;
    Was.exec("media", "playAudioView",{fileurl: filePath}, function(result){
        console.debug("[media][playAudioView]successCB:"+JSON.stringify(arguments));
    },fcb);
};

Easymi.media = new __Media();

var __Proxy=function(){

};

/**
 * 设置request的默认参数
 * @param  {Object} defaultOpts 默认参数, 参数形式和request的一致
 * @return {This}             proxy实例
 */
__Proxy.prototype.requestSetup =  function (defaultOpts) {
    this.defaultOpts = defaultOpts || {};
    return this;
};
__Proxy.prototype.extend =function(dest, source) {
  var args, i, k, ride, v;
  args = [].slice.call(arguments);
  ride = typeof args[args.length - 1] === 'boolean' ? args.pop() : true;
  i = 1;
  if (args.length === 1) {
    dest = {};
    i = 0;
  }
  while (source = args[i++]) {
    for (k in source) {
      v = source[k];
      if (ride || !(k in dest)) {
        dest[k] = v;
      }
    }
  }
  return dest;
};
/**
 * 设置request的请求参数
 * @param  {Object} opts request接受的参数
 * @return {Object}      处理完成的参数
 */
__Proxy.prototype._setOptions =  function (opts) {
    var defaultOpts = this.defaultOpts || {},
        res = {};
    opts = opts || {};
    opts = this.extend({}, defaultOpts, opts);

    res.__url = opts.url;

    if (defaultOpts.params && opts.params) {
        opts.params = this.extend({}, defaultOpts.params, opts.params);
    }
    //add by wangfg@2013-3-26 中间件不允许params为空，只好赋一个缺省占位值
    opts.params = opts.params || {_easymi_random_:new Date().getTime()};

    if (defaultOpts.headers && opts.headers) {
        opts.headers = this.extend({}, defaultOpts.headers, opts.headers);
    }
    opts.headers = opts.headers || {};

    var encoding = opts.encoding || 'UTF-8';
    var type, content;
    if (opts.format == 'json') {
        type = 'application/json';
        content = JSON.stringify(opts.params);
    } else {
        type = 'application/x-www-form-urlencoded';
        content = Easymi.Utils.toQueryString(opts.params);
    }

    res['Content-Type'] = Easymi.Utils.format("{1}; charset={2}",type,encoding);
    res.__content = content;
    this.extend(res,opts.headers,false);
    
    res.failure = opts.failure;
    res.success = opts.success;
    return res;
};
/**
 *  远程访问代理
 * @param options
 * {
 *      url:'/add.do',      //请求的URL
 *      params:{            //请求的参数,JSON Object
 *          x:'xxx',
 *          y:'yyy'
 *     },
 *     encoding:发送参数是的编码格式，缺省为UTF-8
 *     format:参数格式。form|json。缺省为form。
 *          如果是form,则到业务服务器请求的Content-Type为
 *              application/x-www-form-urlencoded
 *          如果是json,则到业务服务器请求的Content-Type为
 *              application/json
 *     headers:额外的http头，Object
 *     success:function(content){...}     		//成功回调
 *     failure:function(code,msg){...}          //失败回调
 * }
 */
__Proxy.prototype.request=function(options){
    options = options || {};
    var pkg = this._setOptions(options),
        fcb = pkg.failure || Easymi.defaultFailCallback,
        scb = pkg.success;
    console.debug("[proxy][request]options="+ JSON.stringify(options) );
    if(!pkg.__url) {
        return;
    }
    // 删除pkg中的回调
    delete pkg.failure;
    delete pkg.success;
    console.debug("pkg="+JSON.stringify(pkg));
    Was.exec("message","send",pkg,function(args){
		if(Easymi.detailLog){
			console.debug("[proxy][request][successCB]"+JSON.stringify(args));
		}else{
			console.debug("[proxy][request][successCB]");
		}
		scb && scb(args["content"]);
    },fcb);
    return this;
}

/**
 * @param url
 * @param path,路径说明
 *      temp/word.doc                   //当前应用的缺省路径
 *      public://subdir/word.doc    //公共区域
 *      album://photo.png             //相册
 * @param successCB
 *      successCB:function(progress,path),progress为下载进度，path为下载后的路径
 * @param failCB
 *      failCB:function(errorCode,errorMsg)
 * @constructor
 */
var __FileTrans=Easymi.Utils.extend({
    init:function(url,path,successCB,failCB,plugIn,methods){
        this.url=url;
        this.path=path;
        this.successCB=successCB;
        this.failCB=failCB || Easymi.defaultFailCallback;
        this.plugIn=plugIn;
        this.methods=methods;
        console.debug("[FileTrans][construtor]:"+JSON.stringify(this));
    },
	/**
	 * 启动上传、下载任务。参数
	 *   isInstant:是否即时任务。
	 *		true:表示任务是即时任务，处理过程中如果网络不可用则任务立刻终止，不会断点续传；
	 *		false:表示任务不是即时任务，处理过程中如果网络不可用则任务会暂停，网络可用之后任务会自动继续处理。
	 */
    start:function(isInstant){
        console.debug("[FileTrans][start]begin...");
        var that=this;
		isInstant=isInstant||false;	//不传默认为false
        // Was.exec("download","download", {
        Was.exec(that.plugIn, that.methods[0], {
            url : that.url,path : that.path,taskflag:isInstant
        }, function(args) {
            console.debug("[FileTrans][successCB]:"+JSON.stringify(args));
            that.successCB(args["progress"],args["path"]);
        },this.failCB);
    },
    pause:function(){
        console.debug("[FileTrans][start]pause...");
        Was.exec(this.plugIn, this.methods[1], {
            //Was.exec("download","pauseDownload",{
            url : this.url
        });
    },
    resume:function() {
        this.pause();
    },
    stop:function() {
        console.debug("[FileTrans][start]stop...");
        Was.exec(this.plugIn, this.methods[2], {
            //Was.exec("download","stopDownload",{
            url : this.url
        });
    }
});
/**
 * Download构造函数
 * Download(url,path,successCB,failCB,progressCB);
 *  用法：说明path的位置
 *      temp/word.doc                   //当前应用的缺省路径
 *      public://subdir/word.doc    //公共区域
 *      album://photo.png             //相册
 *  var d=new Was.proxy.Download('/word.doc','temp/word.doc',function(path){
 *      //下载成功后的处理，path为下载后的路径
 *  },function(){
 *      //下载失败后的处理
 *  },function(progress){
 *      //下载过程回调，progress是0~100的int值
 *  });
 *  d.start();
 *  d.pause();
 *  d.resume();
 *  d.stop();
 *
 */
__Proxy.prototype.Download=Easymi.Utils.extend(__FileTrans,{
    init:function(url,path,successCB,failCB){
        this.base(url,path,successCB,failCB,"download",['download','pausedown','stopdown']);
    }
});
/**
 * 用法同Download
 */
__Proxy.prototype.Upload=Easymi.Utils.extend(__FileTrans,{
    init:function(url,path,successCB,failCB){
        this.base(url,path,successCB,failCB,"upload",['upload','pauseupload','stopupload']);
    }
});

/**
 * 针对EKP定制的上传的接口
 * @param {Object}   option   上传配置项
 *                         配置项需包含以下参数
 *                         {
 *                             token 上传的token
 *                             url 上传至服务器的url
 *                             fullPath 文件在本地的路径
 *                         }
 * @param {Function} done     成功回调函数
 *                         成功回调接收一个对象作为参数, 该对象包含以下字段
 *                         {
 *                             progress 进度。0-100，100表示上传成功
 *                             // 以下参数只有上传成功才返回。
 *                             filekey 服务端返回的filekey。
 *                             name 上传文件名。
 *                             fullPath  上传文件全路径。
 *                             type 上传文件mime-type
 *                             size  上传文件大小（单位为字节）
 *                         }
 * @param {Function}   fail   失败回调函数
 *                         失败回调接收错误代码作为参数, 目前定义的错误代码有
 *                         -1 网络不可用
 *                         -2 调用参数错误
 *                         -3 上传被取消了
 *                         -9 服务端返回了错误
 */
__Proxy.prototype.uploadView = function (option, done, fail) {
    fail = fail || Easymi.defaultFailCallback;
    if (!option || (!option.userkey && !option.token)||
        !option.fullPath || !option.url ) {
        fail(1, '缺少必要参数');
        return;
    }
    if (option.userkey && !option.token) {
        option.token = option.userkey;
    }
    Was.exec('ekpupload', 'upload', option, done, fail);
}



Easymi.proxy=new __Proxy();

/**
 * Created with JetBrains WebStorm.
 * User: wangfg
 * Date: 12-8-9
 * Time: 上午11:42
 * To change this template use File | Settings | File Templates.
 *
 * 基本方法：
 * var db=new Easymi.sqlite.Connection();
 * db.execute('create table T1(f1 int,f2 char');
 * db.execute('insert into T1(f1,f2) values (@f1,@f2)',{
 *     f1:123,
 *     f2:'xxx'
 * });
 * var mycb=function(records){
 *      console.debug(records.length);
 *      for(var i=0;i<records.length;i++){
 *          var r=records[i];
 *          console.debug('##',r[0],r[1]);
 *      }
 * }
 * db.query('select f1,f2 from T1 where f1=@f1',{colsDef:'I,S'},{
 *      f1:234
 * },mycb);
 */
function __SqliteDB(dbName) {
    this.dbName=dbName?dbName:"";
    this.connID=-1;
};

/**
 * 打开db，如果不传dbName，打开当前App的私有db，如果传入了dbName，打开共享的db
 * @param dbName
 */
__SqliteDB.prototype.open = function(successCB,failCB) {
    var _this=this;
    var fcb=failCB || Easymi.defaultFailCallback;
    console.debug("[sqlite][open]enter,dbName="+this.dbName);
    Was.exec("sdb","open",{dbname:this.dbName},function(args){
        console.debug("[sqlite][open][sucessCB]:args="+JSON.stringify(args));
        _this.connID=args.connID;
		if(successCB){
			successCB();
		}
    },fcb);
};
/**
 * 关闭db
 */
__SqliteDB.prototype.close = function() {
    console.debug("[sqlite][close]enter,connID="+this.connID);
	var that=this;
    Was.exec("sdb","close",{connID:this.connID},function(args){
		that.connID=-1;
        console.debug("[sqlite][close][sucessCB]:args="+JSON.stringify(args));
    },function(code,msg){
		that.connID=-1;
		console.debug("[sqlite][close][failCB]:args="+JSON.stringify(args));
		Easymi.defaultFailCallback(code,msg);
	});
};
/**
 * 执行语句，用来执行没有返回值的sql，如insert,updte,delete,create table等
 * 可以带参数，参数用法参见query
 * @param sql
 *      可以含有@打头的变量，可以是单sql，也可以是sql数组
 * @param params
 *      JSON对象数组，可选。包含sql中的变量值，执行时，替换sql中的变量
 * @param returnRowId
 *      当insert时，如果有autoincrement字段，设置这属性为true，可返回新增后的id值。如果sql是数组，忽略该值
 * @param successCB
 *      如果returnRowId为true，successCB返回新的ID
 * @param failCB(code,msg)
 *
 */
__SqliteDB.prototype.execute = function(sql,params,returnRowId,successCB,failCB) {
    var fcb=failCB || Easymi.defaultFailCallback;
    if(this.connID==-1){
        fcb(-1,"connection is not ready!");
        return;
    }
    var finalSql,sqlArray;
    if(Easymi.Utils.isArray(sql)){
        returnRowId=false;
        sqlArray=[];
        for(var i=0;i<sql.length;i++){
            sqlArray.push(Easymi.Utils.replace(sql[i],params?params[i]:undefined,true));
        }
        //add by wangfg@2013-5-23 模拟器上可以直接传数组，设备上要把数组join成字符串
        if(Was.isEmulator){
            finalSql=sqlArray;
        }else{
            finalSql=sqlArray.join(";");
        }

    }else{
        finalSql=Easymi.Utils.replace(sql,params,true);
    }
	if(Easymi.detailLog){
		console.debug("[sqlite][execute]connID="+this.connID+",sql:"+finalSql);
	}else{
		console.debug("[sqlite][execute]connID="+this.connID);
	}
    
    Was.exec("sdb","execute",{connID:this.connID,sql:finalSql,getNewRowID:returnRowId},function(args){
        console.debug("[sqlite][execute][sucessCB]:args="+JSON.stringify(args));
		if(successCB){
			successCB(args["rowID"]);
		}
    },fcb);
};
/**
 * 执行查询语句，sql中可以带参数，结果数组通过successCB(records)返回
 * 注意：不支持select *，必须指定要获取的列。select f1,f2或者select count(*)都可以
 * 示例：
 *   sql='select field1,field2 from mytable where field1=@field1';
 *   params={field1:'xxxx'}
 *   Was.sqlite.execute(sql,params);
 *   实际执行的sql为
 *      select count(*) from mytable where field1='xxxx'
 *  返回的结果集
 * @param sql
 * @param params
 * @param queryConfig
 *      colsDef         列的类型：I:int;S:string;F:float;L:long(一般用于日期)
 *      recordType   结果记录的格式：array:数组；object:对象,default is object,如果是对象，
 *          必须保证select的列名是合法的标示符[大小字母、数字、下划线( _ )和美元符号$组成，标识符不能以数字开头]，
 *          对于计算列，需要增加别名。如:
 *          select name,count(*) as c from ....。获取的对象结构为
 *          {
 *              name:'xxx',
 *              c:100
 *          }
 *
 * @param successCB
 */
__SqliteDB.prototype.query=function(sql,params,queryConfig,successCB,failCB){
    console.debug("[sqlite][query]enter");
    var errorMsg;
    var fcb=failCB || Easymi.defaultFailCallback;
    if(this.connID==-1){
		fcb(-1,"connection is not ready!");
        return;
    }
    if(!queryConfig || !(queryConfig.colsDef)){
        errorMsg="[sqlite][query] queryConfig.colsDef must define";
        fcb(errorMsg);
        return;
    }
    queryConfig.columnTypes=queryConfig.colsDef.split(",");
    if(!(queryConfig.recordType)){
        queryConfig.recordType="object";
    }
	//add by wangfg@2013-6-18
	//新增countPerNext参数，读取数据时，每次Next从NativeDB读取多少条，缺省为10。一般用于读取较多数据(>20条)时，
	//为了减少Native<-->JS之间传递解析时间，修改这个值。模拟器不支持这个参数(2013-6-18)
	if(!(queryConfig.countPerNext)){
        queryConfig.countPerNext=10;
    }
    if(queryConfig.recordType=="object"){
        queryConfig.objectNames=Easymi.Utils.getColumnFromSql(sql);
    }
    var _this=this;
    sql=Easymi.Utils.replace(sql,params);
    if(queryConfig.recordType=="object" && queryConfig.objectNames.length!=queryConfig.columnTypes.length){
        errorMsg="[sqlite][query]select中的列数量与queryConfig.colsDef数量不同，执行中断！！！"+sql;
        fcb(-1,errorMsg);
        return;
    }
    console.debug("[sqlite][query]connID="+this.connID+",sql:"+sql+",queryConfig:"+JSON.stringify(queryConfig));
    var records=[];
    Was.exec("sdb","query",{connID:this.connID,sql:sql},
        function(args){
            console.debug("[sqlite][query][sucessCB]:connId="+_this.connID+JSON.stringify(args));
            _this._next(_this,args.cursorID,queryConfig,records,successCB,fcb);
        },
        fcb
    );
};

//内部方法，不将cursor暴露给使用者
__SqliteDB.prototype._next=function(_this,cursorId,queryConfig,records,callback,failCB){
	if(Easymi.detailLog){
		console.debug("[sqlite][_next],connID="+_this.connID+",cursorId="+cursorId);
	}
    Was.exec("sdb","next",{cursorID:cursorId,colsTypeDef:queryConfig.colsDef,readCount:queryConfig.countPerNext},
        function(args){
			if(Easymi.detailLog){
				console.debug("[sqlite][_next][sucessCB]connID="+_this.connID+",cusorID="+cursorId+',args='+JSON.stringify(args));
			}
			//add begin by wangfg@2013-6-28 增加兼容性处理，兼容没有调整错误码前的逻辑，原先是根据retCode判断是否存在的
			 var retCode=args.retCode;
            if(retCode==-1){
                console.debug("[sqlite][_next],retCode=-1,release cursor and return result");
                //释放游标
                Was.exec("sdb","releaseCursor",{cursorID:cursorId},null);
                //返回结果
                callback(records);
				return;
			}
			//add end
            if(Was.isEmulator){
                var temp=args.record;
            }else{
                eval("var temp ="+args.record+";");
            }
			//add by wangfg@2013-6-18 一个next返回多条记录
			//统一转化为数组，兼容老版本
			if(!(Easymi.Utils.isArray(temp))){
				temp=[temp];
			}
			if(Easymi.detailLog){
				console.debug("[sqlite][_next]temp="+JSON.stringify(temp));
			}
			for(var ri=0;ri<temp.length;ri++){
			    var tempi=temp[ri];
				if(queryConfig.recordType=='array'){
					if(Easymi.detailLog){
						console.debug("to array begin");
					}
					var r=[],v;
					for(var i=0;i<100;i++){
						v=tempi[i];
						if(v!=undefined){
							if(queryConfig.columnTypes[i]=='D'){
								r.push(Easymi.Utils.parseDate(v));
							}else{
								r.push(v);
							}
						}else{
							break;
						}
					}
					if(Easymi.detailLog){
						console.debug("to array end."+JSON.stringify(r));
					}
					records.push(r);
				}else{
					if(Easymi.detailLog){
						console.debug("to object begin");
					}
					var r={},v;
					for(var i=0;i<100;i++){
						v=tempi[i];
						if(v!=undefined){
							if(queryConfig.columnTypes[i]=='D'){
								r[queryConfig.objectNames[i]]=Easymi.Utils.parseDate(v);
							}else{
								r[queryConfig.objectNames[i]]=v;
							}
						}else{
							break;
						}
					}
					if(Easymi.detailLog){
						console.debug("to object end."+JSON.stringify(r));
					}
					records.push(r);
				}
			}
			//EOF==1,表示结果取完了
			if(args.EOF==1){
				Was.exec("sdb","releaseCursor",{cursorID:cursorId},null);
                //返回结果
                callback(records);
			}else{
				//继续获取下一批
				_this._next(_this,cursorId,queryConfig,records,callback,failCB);
			}
        },
        function(code,msg){
            if(code==-1){
                console.debug("[sqlite][_next],retCode=-1,release cursor and return result");
                //释放游标
                Was.exec("sdb","releaseCursor",{cursorID:cursorId},null);
                //返回结果
                callback(records);
            }else{
                failCB(code,msg);
            }
        }
    );
};
/**
 * 执行语句的快捷方法，内部自动进行数据库连接打开，关闭
 */
__SqliteDB.prototype.executeQ = function(sql,params,returnRowId,successCB,failCB) {
    var _this=this;
    this.open(function(){
        _this.execute(sql,params,returnRowId,function(rowid){
            _this.close();
            if(successCB){
                successCB(rowid);
            }
        },failCB);
    },failCB);
};
/**
 * 执行查询的快捷方法，内部自动进行数据库连接打开，关闭
 */
__SqliteDB.prototype.queryQ = function(sql,params,queryConfig,successCB,failCB) {
    var _this=this;
    this.open(function(){
        _this.query(sql,params,queryConfig,function(records){
            _this.close();
            successCB(records);
        },failCB);
    },failCB);
};
/**
 * 判断某个db是否存在，不需要事先Open
 */
__SqliteDB.prototype.exists = function(successCB,failCB){
	var fcb=failCB || Easymi.defaultFailCallback;
	if(!successCB){
		fcb(-1,'必须有successCB回调函数');
		return;
	}
	Was.exec("sdb","exists",{dbname:this.dbName},function(){
		successCB(true);
	},function(code,msg){
		if(code==1){
			successCB(false);
		}else{
			fcb(code,msg);
		}
	});
};
/**
 * 恢复数据库,不需要open
 */
__SqliteDB.prototype.restore = function(sourceDBPath,successCB,failCB){
	var fcb=failCB || Easymi.defaultFailCallback;
	Was.exec("sdb","restore",{dbname:this.dbName,sourceDBPath:sourceDBPath},function(){
		if(successCB){
			successCB();
		}
	},fcb);
};

Easymi.sqlite={
	Connection:__SqliteDB
};


/**
 *  加解密等安全相关类
 */
Easymi.crypto={
    /**
     * 使用密钥对src加密，加密后的内容从successCB中获取
     * @param src
     * @param key
     * @param successCB
     * @param failCB
     */
    encrypt:function(src,key,successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        console.debug("[crypto][encrypt]:key="+key+",src="+src);
        Was.exec("crypto","AESEncode",{key:key,text:src},function(args){
            console.debug("[crypto][encrypt]sucessCB:"+JSON.stringify(args));
			if(successCB){
				successCB(args["text"]);
			}
        },fcb);
    },
    decrypt:function(src,key,successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        console.debug("[crypto][decrypt]:key="+key+",src="+src);
        Was.exec("crypto","AESDecode",{key:key,text:src},function(args){
            console.debug("[crypto][decrypt]sucessCB:"+JSON.stringify(args));
			if(successCB){
				successCB(args["text"]);
			}
        },fcb);
    },
    /**
     * 混淆文件
     * @param options，参数
     *  {
     *      obscure:混淆因子
     *      sourceFile:源文件路径
     *      outputFile:输出文件路径。
     *  }
     * @param successCB
     *   successCB  成功回调
     * @param failCB
     *  failCB(errorCode,errorMsg)
     *      errorCode:错误代码
     *      errorrMsg:错误信息
     */
    obscureFile:function(options,successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        if(!options ||!options.obscure ||!options.sourceFile || !options.outputFile){
            fcb(-1,'必须设置options的obscure,sourceFile,outputFile属性');
            return;
        }
        console.debug("[crypto][obscureFile]:options:"+JSON.stringify(options));
        Was.exec("crypto","obscureFile",options,function(args){
            console.debug("[crypto][obscureFile]successCB:"+JSON.stringify(args));
            if(successCB){
                successCB();
            }
        },fcb);
    },
    /**
     * 恢复文件
     * @param options，参数
     *  {
     *      obscure:混淆因子
     *      sourceFile:源文件路径
     *      outputFile:输出文件路径。
     *  }
     * @param successCB
     *   successCB  成功回调
     * @param failCB
     *  failCB(errorCode,errorMsg)
     *      errorCode:错误代码
     *      errorrMsg:错误信息
     */
    restoreFile:function(options,successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        if(!options ||!options.obscure ||!options.sourceFile || !options.outputFile){
            fcb(-1,'必须设置options的obscure,sourceFile,outputFile属性');
            return;
        }
        console.debug("[crypto][restoreFile]:options:"+JSON.stringify(options));
        Was.exec("crypto","restoreFile",options,function(args){
            console.debug("[crypto][restoreFile]successCB:"+JSON.stringify(args));
            if(successCB){
                successCB();
            }
        },fcb);
    }
}
/**
 *  扫描相关
 */
Easymi.scaner={
    /**
     * 扫描条形码
     * @param successCB
     *      successCB(code):code为扫描到的内容
     * @param failCB
     */
    scanBarCode:function(successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        Was.exec("barcode","getBarcode",{},function(args){
            console.debug("[barcode][getBarcode]successCB:"+JSON.stringify(args));
            if(successCB){
                successCB(args.code);
            }
        },fcb);
    },
    /**
     * 扫描二维(Two-Dimension)码
     * @param successCB
     *      successCB(code):code为扫描到的内容
     * @param failCB
     */
    scanTDCode:function(successCB,failCB){
        var fcb=failCB || Easymi.defaultFailCallback;
        Was.exec("barcode","getTdBarcode",{},function(args){
            console.debug("[barcode][getTdBarcode]successCB:"+JSON.stringify(args));
            if(successCB){
                successCB(args.code);
            }
        },fcb);
    }
};
/**
 *  定位相关API
 */
Easymi.location={
    /**
     * 获取当前位置(通过wifi/基站)
     * @param successCB，获取成功的回调，参数为JSON对象
     *  {
     *      longitude:经度
     *      latitude:维度
	 *		altitude:海拔
     *  }
     * @param failCB，获取失败的回调，参数为JSON对象
     *  {
     *      errorCode:错误码
     *      errorMsg:错误信息
     *  }
     */
    getCurrentPosition:function(successCB,failCB){
        console.debug("[location][locate]begin...");
        var fcb=failCB || Easymi.defaultFailCallback;
        Was.exec("location","locate",{type:"Cell"},function(args){
            console.debug("[location][locate]success:"+JSON.stringify(args));
            if(successCB){
                successCB(args);
            }
        },fcb);
    },
	/**
     * 获取当前位置(通过GPS)
     * @param successCB，获取成功的回调，参数为JSON对象
     *  {
     *      longitude:经度
     *      latitude:维度
	 *		altitude:海拔
     *  }
     * @param failCB，获取失败的回调，参数为JSON对象
     *  {
     *      errorCode:错误码
     *      errorMsg:错误信息
     *  }
     */
    getCurrentPositionByGPS:function(successCB,failCB){
        console.debug("[location][locateByGPS]begin...");
        var fcb=failCB || Easymi.defaultFailCallback;
        Was.exec("location","locate",{type:"GPS"},function(args){
            console.debug("[location][locateByGPS]success:"+JSON.stringify(args));
            if(successCB){
                successCB(args);
            }
        },fcb);
    }
};

/**
 *  压缩解压相关
 */
Easymi.zip={
    /**
     * 解压缩
     * @param zipFile 要解压的zip文件名
     * @param outPath  解压输出的路径
     * @param successCB  成功后的回调
     * @param failCB   失败回调
     */
    unzip:function(zipFile,outPath,successCB,failCB){
        console.debug("[zip][unzip]param:"+zipFile+','+outPath);
        var fcb=failCB || Easymi.defaultFailCallback;
        Was.exec("zip","unzip",{zipFilePath:zipFile,outPath:outPath},function(){
            console.debug("[zip][unzip]success:"+JSON.stringify(arguments));
            if(successCB){
                successCB();
            }
        },fcb);
    }
}
/**
 * 电话相关API
 */
Easymi.phone={
	/**
     * 拨打电话
     * @param number 要拨号的号码
     * @param confirm 是否进入拨号界面进行确认, 默认为true, 可以不填该参数; 
	 *		如果为true,  则进入到拨号界面,由用户发起拨号;
	 *		如果为false, 则直接进行拨号;
	 *		(注意:  iOS上只能为 true, 不支持false)
     */
    call:function(number, confirm){
        console.debug("[phone][call]number:"+number);
		console.debug("[phone][call]confirm:"+confirm);
		
        Was.exec("phone","call",{number:number, confirm:confirm});
    },
	/**
     * 发送短信
     * @param number 发送给谁
	 * @param content 发送内容
     */
    sms:function(number,content){
		var p={
			number:number,
			content:content?content:''
		};
        console.debug("[phone][sms]param:"+JSON.stringify(p));
        Was.exec("sms","send",p);
    }
};

/**
 * 联系人相关API
 *
 * @param contact 联系人属性:
 * 		id :一个全局的唯一标识
 * 		name :名字
 * 		namePY :名字拼音/音标
 * 		cname :姓氏
 * 		cnamePY :姓氏拼音
 * 		company :公司
 * 		phones :联系人的电话号码列表, 类型是 String, 多个值之间用逗号分隔, 其中每个位置的含义为:
 *				//[0]:  "移动电话",
 *				//[1]:  "住宅电话",
 *				//[2]:  "工作电话",
 *				//[3]:  "主要电话",
 *				//[4]:  "住宅传真",
 *				//[5]:  "工作传真",
 *				//[6]:  "传呼",
 *				//[7]:  "其他电话"
 * 		emails :联系人的邮件地址列表, 类型是 String, 多个值之间用逗号分隔, 其中每个位置的含义为:
 *				//[0]:  "电子邮件",
 *				//[1]:  "工作邮件",
 *				//[2]:  "个人邮件",
 *				//[3]:  "主要邮件",
 *				//[4]:  "其他邮件" (下标4以后的都认为是其他邮件, 包括4)
 * 		addresses :联系人的地址列表, 类型是 String, 多个值之间用逗号分隔, 其中每个位置的含义为:
 *				//[0]:  "主要地址",
 *				//[1]:  "其他地址" (下标1以后的都认为是其他地址 包括1)
 * 		firstLetter :名字的首字母
 * 		prefix :前缀
 * 		middleName :中间名
 * 		suffix :后缀
 * 		nickname :昵称
 * 		jobTitle :职务
 * 		department :部门
 * 		birthday :生日
 * 		notes :备注
 */
Easymi.contact={
	/**
	 * 	新增联系人
	 *  @contact : 其id属性不需要
	**/
	add:function(contact, successCB, failCB){
		var fcb=failCB || Easymi.defaultFailCallback;
		if(!contact){
			fcb(-1,'must set contact');
		}
		console.debug("[contact][add]param:" + JSON.stringify(contact));
		Was.exec('contact','add',contact,function(){
			console.debug("[contact][add]success:"+JSON.stringify(arguments));
            if(successCB){
                successCB();
            }
		},fcb);
	},
	
	/**
	 * 	删除联系人
	 *  @contactId : contactId
	**/
	remove:function(contactId,successCB,failCB){
		var fcb=failCB || Easymi.defaultFailCallback;
		if(!contactId){
			fcb(-1,'must set contactId');
		}
		console.debug("[contact][remove]param:" + contactId);
		Was.exec('contact','delete',{id:contactId},function(){
			console.debug("[contact][remove]success:"+JSON.stringify(arguments));
            if(successCB){
                successCB();
            }
		},fcb);
	},
	
	/**
	 * 	更新联系人
	 *  @contact : 其id 属性是必须的
	**/
	update:function(contact, successCB, failCB){
		var fcb=failCB || Easymi.defaultFailCallback;
		if(!contact){
			fcb(-1,'must set contact');
		}
		console.debug("[contact][update]param:" + JSON.stringify(contact));
		Was.exec('contact','update',contact,function(){
			console.debug("[contact][update]success:"+JSON.stringify(arguments));
            if(successCB){
                successCB();
            }
		},fcb);
	},
	
	/**
	 * 	查找联系人
	 *  @options : 查找条件, 包括
	 * 		name:  联系人姓名, 不指定则表示不根据姓名查找
	 * 		phone: 联系人手机号码, 不指定则表示不根据手机号码查找
	**/
	find:function(options, successCB, failCB){
		var fcb=failCB || Easymi.defaultFailCallback;
		if(!options){
			fcb(-1,'must set options');
		}
		console.debug("[contact][find]param:" + JSON.stringify(options));
		Was.exec('contact','find',options,function(response){
			console.debug("[contact][find]success:"+JSON.stringify(arguments));
			
			var count = response.count;
			var contacts = [];
			for(var i=0;i<count;i++){
				var index = 'record' + i;
				var record_temp = response[index];
				eval('var record = ' + record_temp);

				var contact = {
					id:record.id,
					name:record.name,
					phones:record.phones[0]
				};
				contacts.push(contact);
			}

			var contacts_str = JSON.stringify(contacts);
			
            if(successCB){
                successCB(contacts_str);
            }
		},fcb);
	}
};


/**
 * 微信相关API
 *
 * 	发送一条微信信息
 *  @param content : 微信信息内容， 包含以下属性：
 * 		
 *		scene:	发送场景	
 *				//	"1" : 发送到会话；
 *				//	"2" : 发送到朋友圈, 默认为2；
 *
 *		title： 信息标题, 可选填;
 *
 *		description: 信息描述, 可选填;
 *
 *		thumb: 	信息缩略图文件的 easymi 路径, 可选填;
 *
 *		contentType:	信息内容类型
 *					// "1": 文本;
 *					// "2": 图片;
 *					// "3": 视频;
 *					// "4": 音频;
 *					// "5": 网页;
 *
 *		//当 contentType=="1" 时, 必须指定以下参数:
 *		text: 文本内容;
 *
 *		//当 contentType=="2" 时, 必须指定以下参数之一:
 *		imagePath: 图片文件easymi路径;
 *		imageUrl: 图片文件url;
 *
 *		//当 contentType=="3" 时, 必须指定以下参数之一:
 *		videoUrl: 视频播放页面url;
 *		videoLowBandUrl: 低带宽下视频播放页面url;
 *
 *		//当 contentType=="4" 时, 必须指定以下参数之一:
 *		musicUrl: 音乐播放页面url;
 *		musicLowBandUrl: 低带宽下音乐播放页面url;
 *
 *		//当 contentType=="5" 时, 必须指定以下参数:
 *		webPageUrl: 网页url;
 *
 *
 *	以上所有参数的大小限制为，标题<512B，描述<1KB，缩略图<32KB，url长度<10KB，图片内容<10MB。
 * 		
 */
Easymi.weixin={

	send:function(content, successCB, failCB){
		var fcb=failCB || Easymi.defaultFailCallback;
		if(!content){
			fcb(-1,'must set content');
		}
		
		if(content && content.contentType == '1'){
			if (!content.text){
				fcb(-1,'contentType == 1, must set content.text');
			}
		}
		
		if(content && content.contentType == '2'){
			if (! (content.imagePath || content.imgUrl) ){
				fcb(-1,'contentType == 2, must set content.imagePath or content.imgUrl');
			}
		}
		
		if(content && content.contentType == '3'){
			if (! (content.videoUrl || content.videoLowBandUrl) ){
				fcb(-1,'contentType == 3, must set content.videoUrl or content.videoLowBandUrl');
			}
		}
		
		if(content && content.contentType == '4'){
			if (! (content.musicUrl || content.musicLowBandUrl) ){
				fcb(-1,'contentType == 4, must set content.musicUrl or content.musicLowBandUrl');
			}
		}
		
		if(content && content.contentType == '5'){
			if (!content.webPageUrl){
				fcb(-1,'contentType == 5, must set content.webPageUrl');
			}
		}
		
		console.debug("[weixin][send]param:" + JSON.stringify(content));
		Was.exec('wenxin','send',content,function(){
			console.debug("[weixin][send]success:"+JSON.stringify(arguments));
            if(successCB){
                successCB();
            }
		},fcb);
	}
};

/**
 * 快钱支付API
 *
 * 	调用快钱客户端，发送支付信息
 *
 *  @param content : 快钱支付信息内容， 包含以下属性（JSON对象格式）：
 * 		
 *		orderId:	订单编号	 （必须）
 *		productName:商品名称 （必须）
 *		amount:支付金额，整型，单位为元（必须）
 *		requestId:请求编号
 *		payerId:付款人身份证号
 *		payerName:付款人姓名
 *		payerMobile:付款人手机号(iOS忽略此参数)
 *
 *  @param successCB
 *      successCB:function(args) 此参数JSON对象格式，返回参数，如下：
 *				orderId:订单编号
 *				amount:支付金额，整型，单位为分。
 *				requestId:请求编号
 *				txnReferenceId:快钱系统交易编号（iOS无该参数）
 *
 *  @param failCB
 *      failCB:function(errCode,errMsg)
 *				errCode : errMsg
 *				1       : 设备上未安装快刷客户端
 *				2       : 未支付
 *				9       : 支付失败。
 * 		
 */
Easymi.kuaishua={

	requestPay:function(content, successCB, failCB){
		var fcb = failCB || Easymi.defaultFailCallback;
		if(!content){
			fcb(-1,'content can not be empty');
		}
		
		if(!content.orderId){
			fcb(-1,'orderId can not be empty');
		}
		
		if(!content.productName){
			fcb(-1,'productName can not be empty');
		}
		
		if(!content.amount){
			fcb(-1,'amount can not be empty');
		}else{
			//把元单位转换为分单位
			content.amount = parseFloat(content.amount) * 100;
		}

		console.debug("[kuaishua][requestPay]param:" + JSON.stringify(content));
		Was.exec('kuaishua','requestPay',content,function(args){
			console.debug("[kuaishua][requestPay]success:"+JSON.stringify(args));
			if(successCB){
				var result = {
					orderId : args['orderId'],
					amount : parseFloat(args['amount']) / 100,//把分单位转为元单位
					requestId : args['requestId'],
					txnReferenceId : (Easymi.getDeviceInfo.os != 'iOS') ? args['txnReferenceId'] : null
				};
				successCB(result);
			}
		},fcb);
	}
};

/**
 * 门户通讯录API
 */
Easymi.contactor = (function () {
    /**
     * 扩展object属性, 使用src来扩展dest
     * @param  {Object} dest 扩展的目标对象
     * @param  {Object} src  扩展的属性来源
     * @return {Object}      扩展后的对象
     */
    var extend = function (dest, src) {
        if (arguments.length < 2) {
            src = dest;
            dest = {};
        }
        dest = dest || {};
        if (src) {
            for (key in src) {
                if (src.hasOwnProperty(key)) {
                    dest[ key ] = src[ key ];
                }
            }
        }
        return dest;
    }

    /**
     * 联系人选择API
     * @param  {Object} opts      配置项
     *                  opts 结构为 {
     *                      initList: [], // 初始选中的联系人,可以为数组, 也可以为逗号连接的字符串
     *                                    // 默认为空数组
     *                      isSticky: false, // 被选中的联系人是否被取消选中(可否编辑), 
     *                                       // true为不可取消. 默认为false, 即可以被编辑
     *                      isSimple: true // 返回的联系人数据是否为简单数据, 默认为true
     *                  }
     * @param  {Function} successCB 成功回调
     *                    成功回调接收的参数结构为 {
     *                        retCode: 0,  //成功时该值为0
     *                        selects: [
     *                            {
     *                                loginName: 'zhangming', // 联系人登录名称
     *                                userName: 'ABC89张明',  // 联系人姓名
     *                                position: 'UE工程师',   // 联系人所在部门
     *                                depart: '用户研究'      // 联系人职位
     *                            },
     *                            ...
     *                        ]
     *                    }
     * @param  {Function} failCB    失败回调
     * @return {undefined}           
     */
    var chooseContactors = function ( opts, successCB, failCB ) {
        // 默认选项
        var defaultOpts = {
            initList: [],
            isSticky: false,
            isSimple: true
        };
        opts = opts || {};
        opts = extend(defaultOpts, opts);
        // 将数组类型的用户名变为 ',' 连接的字符串
        if (Easymi.Utils.isArray(opts.initList)) {
            opts.initList = opts.initList.join(',');
        }
        opts.initList += '';
        failCB = failCB || Easymi.defaultFailCallback;
        Was.exec('contactor', 'chooseContactors', opts, function (res) {
            if (res && res.selects) {
                res.selects = Function('return ' + res.selects)();
            }
            successCB && successCB.call(null,res);
        }, failCB);
    }
    return {
        'chooseContactors': chooseContactors
    }
})();


/**
 * 操作历史记录, Webview页面的前进, 后退等
 */

Easymi.history = {
    /**
     * 获取当前页面可以前进及后退的页数
     * @param  {Function}   done  成功回调
     *              成功回调接收一个对象作为参数， 该对象拥有如下字段
     *              canGoBack: 是否能够后退
     *              canGoForward: 是否能能够前进
     */
    canGo: function (done) {
        Was.exec('app','canGo', {}, done, Easymi.defaultFailCallback);
    },

    /**
     * 判断当前页面是否有上一页
     * @param  {Function} done 成功回调
     *              成功回调接收一个布尔型作为参数， 有上一页则为true, 否则为false
     */
    hasPrev: function (done) {
        Easymi.history.canGo(function (res) {
            if (done) {
                done( res.canGoBack );
            }
        });
    },

    /**
     * 返回到上一页
     * @param  {Function} fail 失败回调
     *              如果没有上一页，则会调用该函数， 该函数不接受参数 
     */
    back: function (fail) {
        fail = fail || Easymi.defaultFailCallback;
        Was.exec('app', 'goBack', {}, null, fail);
    },

    /**
     * 前进到下一页
     * @param  {Function} fail 失败回调
     *              如果没有下一页，则会调用该函数， 该函数不接受参数 
     */
    forward: function (fail) {
        fail = fail || Easymi.defaultFailCallback;
        Was.exec('app', 'goForward', {}, null, fail);
    }

};

// 命名KK为Easymi的别名
window.KK = Easymi;
if(window.dojoConfig && window.define) {
	define(function(){
		return KK;
	});
}
},
'sys/mobile/js/mui/form/_OptionsBase':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "mui/form/_FormBase",
				"dojo/dom-class", "dojo/_base/lang", "mui/util",
				"mui/form/_GroupBase" ],
		function(declare, domConstruct, _FormBase, domClass, lang, util,
				_GroupBase) {
			var _field = declare(
					"mui.form._OptionsBase",
					[ _FormBase ],
					{

						text : '',

						alignment : '',

						// 构建值区域
						_buildValue : function() {
							this.inherited(arguments);
							var setBuildName = 'build'
									+ util.capitalize(this.showStatus);
							this[setBuildName] ? this[setBuildName]() : '';
							var setMethdName = this.showStatus + 'ValueSet';
							this.showStatusSet = this[setMethdName] ? this[setMethdName]
									: new Function();
						},

						buildRendering : function() {
							if (!this.domNode)
								this.domNode = this.srcNodeRef
										|| this.ownerDocument
												.createElement("div");

							this.fieldItem = domConstruct.create('div', {
								className : 'muiField muiFormOptionsField'
							}, this.domNode, 'after');

							this.fieldOptions = domConstruct.create('div', {
								className : 'muiFieldOptions'
							}, this.fieldItem, 'last');

							if (this.text) {
								this.textNode = domConstruct.create("div", {
									className : 'muiFieldText',
									innerHTML : this.text
								}, this.fieldOptions);
							}
							this._buildValue();
						},

						_setCheckedAttr : function(checked) {
							this._set("checked", checked);
							this.domNode.checked = checked;
							var type = checked ? 'add' : 'remove';
							domClass[type]
									(this.fieldOptions, this.checkedClass);
							var parent = this.getParent();
							if (parent && parent instanceof _GroupBase)
								parent[type + 'Value'](this.value);
						},

						_setValueAttr : function(value) {
							this.inherited(arguments);
							this.showStatusSet(value);
						},

						/*******************************************************
						 * scrollable嵌套点击事件重复执行临时解决方案
						 ******************************************************/
						holdTime : 250,

						lastTime : null,

						fireClick : function(evt) {
							var time = this.lastTime;
							this.lastTime = new Date().getTime()
							if (time && this.lastTime - time <= this.holdTime)
								return false;
							return true;
						}
					});
			return _field;
		});
},
'sys/mobile/js/mui/dialog/Confirm':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "mui/dialog/Dialog" ],
		function(declare, domConstruct, Dialog) {
			return function(html, title, callback) {
				var _title = title ? title : "提示";
				var _html = html ? html : "";
				var contentNode = domConstruct.create('div', {
					className : 'muiConfirmDialogElement',
					innerHTML : '<div>' + _html + '</div>'
				});

				var options = {
					'title' : title ? title : '提示',
					'showClass' : 'muiConfirmDialogShow',
					'element' : contentNode,
					'scrollable' : false,
					'parseable' : false,
					'buttons' : [ {
						title : "取消",
						fn : function(dialog) {
							dialog.hide();
							callback(false, dialog);

						}
					}, {
						title : "确定",
						fn : function(dialog) {
							dialog.hide();
							callback(true, dialog);
						}
					} ]
				};
				return Dialog.element(options);
			};
		});
},
'sys/mobile/js/mui/list/_ViewPushAppendMixin':function(){
define([
	"dojo/_base/declare", 
	"dojo/_base/lang", 
	'dojo/topic', 
	'dojo/dom-construct',
	'dojo/query',
	"dojox/mobile/viewRegistry",
	"dojo/when",
	'dojo/dom-style',
	'mui/i18n/i18n!sys-mobile',
	"dojo/_base/array"
	], function(declare, lang, topic, domCtr, query, viewRegistry, when, domStyle, Msg, array) {
	
	return declare("mui.list._PushMixin", null, {
		
		push: false,
		
		_pushItem: null,
		
		_pushDom: null,
		
		_createPushDom: function() {
			if (!this._pushDom) {
				this._pushDom = domCtr.toDom('<div class="listPushItem"><span><i class="mui mui-loading mui-spin"></i>' + Msg['mui.list.push.more'] + '</span></div>');
				domCtr.place(this._pushDom, this.containerNode, 'last');
			}
		},
		
		_setPushAttr: function(push) {
			this._set("push", push);
		},
		
		pushDone: function() {
			this.set('push', false);
		},
		
		_buildPushHandle: function() {
			var self = this;
			return {
				work: function() {}, 
				done: function() {
					self.pushDone();
				}, 
				error: function() {
					self.pushDone();
				}
			};
		},
		
		onAfterScroll: function(evt) {
			if(evt.afterBottom && !this.push){
				this.set("push", true);
				var handle = this._buildPushHandle();
				this.onPush(this, handle);
				topic.publish("/mui/list/onPush", this, handle);
			}
			return this.inherited(arguments);
		},
		
		adjustDestination: function(to, pos, dim) {
			var h = this._pushDom.offsetHeight;
			if (to.y + dim.o.h < h && !this.push) {
				this.set("push", true);
				var handle = this._buildPushHandle();
				this.onPush(this, handle);
				topic.publish("/mui/list/onPush", this, handle);
			}
			return this.inherited(arguments);
		},
		
		onPush: function(widget) {
			
		},
		
		handlePushDomHide : function(store) {
			if (array.some(this.getChildren(), function(child) {return child == store;})) {
				domStyle.set(this._pushDom, { display : 'none' });
			}
		},

		handlePushDomShow : function(store) {
			if (array.some(this.getChildren(), function(child) {return child == store;})) {
				domStyle.set(this._pushDom, { display : 'table' });
			}
		},
		
		startup : function(){
			if(this._started){ return; }
			
			this.inherited(arguments);

			this._createPushDom();
			this.set("push", false);
			this.subscribe('/mui/list/pushDomHide','handlePushDomHide');
			this.subscribe('/mui/list/pushDomShow','handlePushDomShow');
		}
	});
});
},
'sys/mobile/js/mui/person/PersonDetailItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"mui/i18n/i18n",
   	"mui/list/item/_ListLinkItemMixin",
	"dojo/date/locale"   	
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util,i18n, _ListLinkItemMixin,locale) {
	
	var item = declare("mui.person.PersonDetailItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		
		baseClass:"muiListItem muiPerson",
		
		href:'javascript:void(0)',
		
		buildRendering:function(){
			this.inherited(arguments);
			
			this.domNode = this.containerNode= this.srcNodeRef
				|| domConstruct.create(this.tag,{className:this.baseClass});
			
			//左侧头像
			var leftBar=domConstruct.create("div",{className:"muiPersonIcon"},this.containerNode);
			domConstruct.create("img", { className: "muiPersonIconImg",src:this.src}, leftBar);
			
			//右侧内容
			var rightContent=domConstruct.create("div",{className:"muiPersonInfo"},this.containerNode);
			domConstruct.create("div", { className: "muiPersonName",innerHTML:this.name}, rightContent);
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		}
	});
	return item;
});
},
'sys/mobile/js/mui/rtf/RtfResizeUtil':function(){
define([ "dojo/_base/declare", "dojo/dom", "mui/rtf/_ImageGlobalResizeMixin",
		"mui/rtf/_TableResizeMixin" ], function(declare, dom,
		_ImageGlobalResizeMixin, _TableResizeMixin) {

	var claz = declare("mui.rtf.RtfResizeUtil", [ _ImageGlobalResizeMixin,
			_TableResizeMixin ], {
		constructor : function(options) {
			if (options) {
				this.name = options.name;
				this.channel = options.channel || 'default';
				this.formatContent(options.containerNode);
			}
		},

		destroy : function() {
			this.emptySrcList();
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/calendar/CalendarHeader':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase",
				"mui/calendar/base/CalendarBase",
				"dojo/text!./tmpl/calendar_header.html", "dojo/date",
				"dojo/date/locale", "dojo/topic", "dojo/dom-style",
				"mui/calendar/_HeaderExternalViewMixin", "dojo/dom-class" ],
		function(declare, _WidgetBase, CalendarBase, template, dateClaz,
				locale, topic, domStyle, _HeaderExternalViewMixin, domClass) {
			var claz = declare(
					"mui.calendar.CalendarHeader",
					[ _WidgetBase, CalendarBase, _HeaderExternalViewMixin ],
					{
						leftNode : null,
						// 上个月节点
						monthPreNode : null,
						// 下个月节点
						monthNextNode : null,
						// 当前月节点
						monthNode : null,
						// 今天节点
						todayNode : null,

						rightNode : null,
						// 左边区域按钮
						left : null,
						// 右边区域按钮
						right : null,

						_setLeftAttr : function(left) {
							this.left = left;
						},

						_setRightAttr : function(right) {
							this.right = right;
						},

						templateString : template,

						buildRendering : function() {
							this.inherited(arguments);
							this.bindEvent();
							this
									.subscribe(this.VALUE_CHANGE,
											'monthNodeChange');
							this
									.subscribe(this.VALUE_CHANGE,
											'todayNodeChange');
						},

						startup : function() {
							this.inherited(arguments);
							if (this.right) {
								domClass.add(this.rightNode, this.right.icon
										|| 'mui-listView');
							} else {
								domStyle.set(this.rightNode, 'display', 'none');
							}
							if (this.left) {
								domClass.add(this.leftNode, this.left.icon
										|| 'mui-group');
							} else {
								domStyle.set(this.leftNode, 'display', 'none');
							}

							topic.publish('/mui/calendar/headerComplete', this,
									{
										height : this.domNode.offsetHeight
									});
						},

						resize : function() {
							topic.publish('/mui/calendar/headerComplete', this,
									{
										height : this.domNode.offsetHeight
									});
						},

						todayNodeChange : function() {
							if (!dateClaz.compare(new Date, this.currentDate,
									"date"))
								domStyle.set(this.todayNode, {
									'display' : 'none'
								});
							else
								domStyle.set(this.todayNode, {
									'display' : 'inline-block'
								});

						},

						monthNodeChange : function(fire) {
							this.stuffMonth(this.currentDate, fire);
						},

						bindEvent : function() {
							this
									.connect(this.monthPreNode, 'click',
											'preMonth');
							this.connect(this.monthNextNode, 'click',
									'nextMonth');
							this.connect(this.todayNode, 'click', 'toToday');
						},

						toToday : function() {
							this.set('currentDate', new Date(), true);
						},

						preMonth : function() {
							this.set('currentDate', dateClaz.add(
									this.currentDate, 'month', -1));
						},

						nextMonth : function() {
							this.set('currentDate', dateClaz.add(
									this.currentDate, 'month', 1));
						},

						// 填充头部年月份信息
						stuffMonth : function(_date, fire) {
							if (dateClaz.compare(_date, this.lastDate, "month") != 0
									|| fire) {
								this
										._setText(
												this.monthNode,
												locale
														.format(
																_date,
																{
																	selector : 'time',
																	timePattern : locale
																			._getGregorianBundle()['dateFormatItem-yMM']
																}));
							}
						}
					});
			return claz;
		});
},
'sys/mobile/js/mui/list/item/_TemplateItemMixin':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase", "dijit/_TemplatedMixin",
		"dijit/_WidgetsInTemplateMixin" ], function(declare, _WidgetBase,
		_TemplatedMixin, _WidgetsInTemplateMixin) {

	return declare("mui.list.item._TemplateItemMixin", [ _WidgetBase,
			_TemplatedMixin, _WidgetsInTemplateMixin ], {

	});
});
},
'sys/mobile/js/mui/panel/_TogglePanelMixin':function(){
define(
		"mui/panel/_TogglePanelMixin",
		[ "dojo/dom-construct", 'dojo/_base/declare', "dojo/dom-style",
				"dojo/topic", "dojo/_base/lang" ],
		function(domConstruct, declare, domStyle, topic, lang) {
			return declare(
					'mui.panel._TogglePanelMixin',
					null,
					{

						toggle : true,

						startup : function() {
							this.inherited(arguments);
							if (this.toggle)
								this.bindTitleClick();
						},

						// 绑定标题点击事件
						bindTitleClick : function() {
							this
									.connect(
											this.domNode,
											"onclick",
											function(evt) {
												var target = evt.target;
												for (var i = 0; i < this.titleList.length; i++) {
													if (target.tagName == 'DIV')
														if (target
																&& target.parentNode == this.titleList[i]) {
															var content = this.contentList[i];
															var claz = content.claz;
															if (content.show) {
																claz.hide();
																content.show = false;
															} else {
																claz.show();
																content.show = true;
															}
														}
												}
											});
						}
					});
		});
},
'sys/mobile/js/mui/picslide/PicItem':function(){
define( [ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style",
		"dojox/mobile/_ItemBase", "mui/util", "dojo/topic" ], function(declare,
		domConstruct, domStyle, ItemBase, util, topic) {
	var PicItem = declare("mui.picslide.PicItem", [ ItemBase ], {

		picClick : "/mui/picitem/click",

		picResizeEvt : "/mui/picitem/resize",

		baseClass : 'muiListPicslideItem',
		
		itemIndex : 0,

		buildRendering : function() {
			this.inherited(arguments);
			this.domNode.tabIndex = "0";
			this.imageNode = domConstruct.create("img", {
				className : "muiListPicItemImg"
			}, this.domNode);
		},

		postCreate : function() {
			this.inherited(arguments);
			this.connect(this.domNode, "onclick", "_onclick");
			this.subscribe(this.picResizeEvt, "_resize");
		},

		startup : function() {
			if (this._started) {
				return;
			}
			this.inherited(arguments);
			this.imageNode.alt = this.alt ? this.alt : this.label;
			this.imageNode.src = this.icon ? this.icon : this.url;
		},

		_resize : function(srcObj,evt) {
			if (evt) {
				var arg = evt;
				if (arg.tensile == false) {
					domStyle.set(this.domNode, {
						"line-height" : arg.height + "px"
					});
					domStyle.set(this.imageNode, {
						"max-height" : arg.height + "px",
						"max-width" : arg.width + "px"
					});
				} else {
					domStyle.set(this.imageNode, {
						"height" : arg.height + "px",
						"width" : arg.width + "px"
					});
				}
			}
		},

		_onclick : function(e) {
			topic.publish(this.picClick,this, this.itemIndex, e);
			if (this.href) {
				e.stopPropagation();
				e.preventDefault();
				location.href = util.formatUrl(this.href);
			}
		},

		_setLabelAttr : function(text) {
			this._set("label", text);
		},

		_setIconAttr : function(icon) {
			this._set("icon", icon);
			this.imageNode.src = this.icon;
		}
	});
	return PicItem;
});
},
'sys/mobile/js/mui/address/AddressSelection':function(){
define([ "dojo/_base/declare", "mui/iconUtils",
				"mui/category/CategorySelection" , "mui/util"],
		function(declare, iconUtils, CategorySelection, util) {
			var selection = declare("mui.address.AddressSelection",[ CategorySelection ],{

				//获取详细信息地址
				detailUrl : '/sys/organization/mobile/address.do?method=detailList&orgIds=!{curIds}',

				buildIcon : function(iconNode, item) {
					
					if (item.icon) {
						iconUtils.setIcon(util.formatUrl(item.icon), null, null, null,
								iconNode);
					} else {
						if ((item.type | window.ORG_TYPE_ORGORDEPT) == window.ORG_TYPE_ORGORDEPT) {
							item.icon = "mui mui-group muiAddressDept";
						}
						if ((item.type | window.ORG_TYPE_POST) == window.ORG_TYPE_POST) {
							item.icon = "mui mui-post muiAddressPost";
						}
						iconUtils.setIcon(item.icon, null, null, null,
								iconNode);
					}
				}
			});
			return selection;
		});
},
'sys/mobile/js/mui/util':function(){
define(["dojo/_base/declare", "dojo/_base/window", "dojo/on", "dojo/query", "mui/base64"], function(declare, win, on, query, base64) {
			var claz = declare("mui.util", null, {
						formatUrl : function(url , isFull) {
							var rtnUrl = "";
							if (url == null) {
								rtnUrl = "";
							}else if (url.substring(0, 1) == '/') {
								rtnUrl = dojoConfig.baseUrl + url.substring(1);
							} else {
								rtnUrl = url;
							}
							if(isFull)
								rtnUrl = this.getHost() + rtnUrl;
							return rtnUrl;
						},
						getHost:function(){
							var host = location.protocol.toLowerCase()+"//" + location.hostname;
							if(location.port!='' && location.port!='80'){
								host = host+ ":" + location.port;
							}
							return host;
						},
						formatText : function(str) {
							if (str == null || str.length == 0)
								return "";
						 	return str.replace(/&/g, "&gt;")
										.replace(/</g, "&lt;")
										.replace(/>/g, "&gt;")
										.replace(/ /g, "&nbsp;")
										.replace(/\'/g,"&#39;")
										.replace(/\"/g, "&quot;")
										.replace(/\n/g, "<br>");
						},
						urlResolver:function(url , params){
							return url.replace(/\!\{([\w\.]*)\}/gi, function (_var , _key) {
								var value=null;		  
								if(params)
							         value = params[_key];  
							     return (value === null || value === undefined) ? "" : value;  
							  });
						},
						//首字母转为大写
						capitalize : function(str) {
							if (str == null || str.length == 0)
								return "";
							return str.substr(0,1).toUpperCase()+str.substr(1);
						},
						getScreenSize: function(){
							return {
								h: win.global.innerHeight||win.doc.documentElement.clientHeight||win.doc.documentElement.offsetHeight,
								w: win.global.innerWidth||win.doc.documentElement.clientWidth||win.doc.documentElement.offsetWidth
							};
						},
						addTopView: function(view) {
							var parent = query('#content .mblView')[0].parentNode;
							if (view && view.domNode) {
								query(parent).append(view.domNode);
							} 
							else if (view && view.nodeType) {
								query(parent).append(view);
							}
						},
						// 获取url对应参数
						getUrlParameter : function(url, param) {
							var re = new RegExp();
							re.compile("[\\?&]" + param + "=([^&]*)", "i");
							var arr = re.exec(url);
							if (arr == null)
								return null;
							else
								return decodeURIComponent(arr[1]);
						},
						
						setUrlParameter : function(url , param , value) {
							var re = new RegExp();
							re.compile("([\\?&]"+param+"=)[^&]*", "i");
							if(value==null){
								if(re.test(url)){
									url = url.replace(re, "");
								}
							}else{
								value = encodeURIComponent(value);
								if(re.test(url)){
									url = url.replace(re, "$1"+value);
								}else{
									url += (url.indexOf("?")==-1?"?":"&") + param + "=" + value;
								}
							}
							if(url.charAt(url.length-1)=="?")
								url = url.substring(0, url.length-1);
							return url;
						},
						
						disableTouch : function(domNode, touchSign){
							if(domNode){
								var disableFun = function(evt){
									evt.preventDefault();
								};
								on(domNode,touchSign,disableFun);
							}
						},
						
						base64Encode : function(str) {
							var val = str;
							if(str != null && str.length > 0)
								str = "\u4241\u5345\u3634{"+ base64.encode(str)+"}";
							if(val != str){
								val = "\u4649\u5820\u4d45" + str;
							}
							return val;
						}
					});
			return new claz();
		});
},
'sys/mobile/js/mui/address/AddressItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/address/AddressItemMixin"
	], function(declare, _TemplateItemMixin, AddressItemMixin) {
	
	return declare("mui.address.AddressItemListMixin", [_TemplateItemMixin], {
		
		itemRenderer : AddressItemMixin
		
	});
});
},
'sys/mobile/js/mui/store/JsonRest':function(){
define(
		[ "dojo/_base/xhr", "dojo/_base/lang", "dojo/_base/declare",
				"dojo/store/util/QueryResults", "dojo/store/JsonRest",
				"dojo/_base/lang" ],
		function(xhr, lang, declare, QueryResults, JsonRest, lang) {

			return declare(
					"mui.store.JsonRest",
					JsonRest,
					{

						defaultType : 'POST',

						query : function(query, options) {
							options = options || {};
							if (options.type)
								this.defaultType = options.type;
							var headers = lang.mixin({
								Accept : this.accepts
							}, this.headers, options.headers);
							var data = {};
							var hasQuestionMark = this.target.indexOf("?") > -1, postData = {};
							if (query && typeof query == "object") {
								if (this.defaultType.toLowerCase() == 'post') {
									data.postData = query;
									query = "";
								} else {
									query = xhr.objectToQuery(query);
									query = query ? (hasQuestionMark ? "&"
											: "?")
											+ query : "";
								}
							}
							if (options.start >= 0 || options.count >= 0) {
								headers["X-Range"] = "items="
										+ (options.start || '0')
										+ '-'
										+ (("count" in options && options.count != Infinity) ? (options.count
												+ (options.start || 0) - 1)
												: '');
								if (this.rangeParam) {
									query += (query || hasQuestionMark ? "&"
											: "?")
											+ this.rangeParam
											+ "="
											+ headers["X-Range"];
									hasQuestionMark = true;
								} else {
									headers.Range = headers["X-Range"];
								}
							}
							if (options && options.sort) {
								var sortParam = this.sortParam;
								query += (query || hasQuestionMark ? "&" : "?")
										+ (sortParam ? sortParam + '='
												: "sort(");
								for (var i = 0; i < options.sort.length; i++) {
									var sort = options.sort[i];
									query += (i > 0 ? "," : "")
											+ (sort.descending ? this.descendingPrefix
													: this.ascendingPrefix)
											+ encodeURIComponent(sort.attribute);
								}
								if (!sortParam) {
									query += ")";
								}
							}

							lang.mixin(data, {
								url : this.target + (query || ""),
								handleAs : "json",
								headers : headers
							})
							var results = xhr(this.defaultType, data);
							results.total = results
									.then(function() {
										var range = results.ioArgs.xhr
												.getResponseHeader("Content-Range");
										if (!range) {
											range = results.ioArgs.xhr
													.getResponseHeader("X-Content-Range");
										}
										return range
												&& (range = range
														.match(/\/(.*)/))
												&& +range[1];
									});
							return QueryResults(results);
						}
					});
		});
},
'sys/mobile/js/mui/datetime/_DateMixin':function(){
define([ "dojo/_base/declare", "dojo/text!mui/datetime/tmpl_date.jsp",
		"dojo/dom-class", "dojo/dom-construct",
		"mui/datetime/_EditDateTimeMixin", "dojo/query" ], function(declare,
		tmpl, domClass, domConstruct, _EditDateTimeMixin, query) {
	var claz = declare("mui.datetime._DateMixin", [ _EditDateTimeMixin ], {

		type : 'date',
		tmpl : tmpl,

		title : '日期选择',
		
		_contentExtendClass:'muiDateDialogDisContent',

		_buildValue : function() {
			this.inherited(arguments);
			domClass.add(this.inputContent, 'muiDateInputContnet');
		}
	
	});
	return claz;
});
},
'sys/mobile/js/mui/syscategory/SysCategoryList':function(){
define( [ "dojo/_base/declare", "dojo/_base/lang", "mui/category/CategoryList" ], function(declare,
		 lang, CategoryList) {
	return declare("mui.syscategory.SysCategoryList", [ CategoryList ], {
		
		modelName : null,
		
		//有权限查看的类别id
		authCateIds : null,
		
		//数据请求URL
		dataUrl : '/sys/category/mobile/sysCategory.do?method=cateList&categoryId=!{parentId}&getTemplate=!{selType}&modelName=!{modelName}&authType=!{authType}',
			
		buildQuery:function(){
			var params = this.inherited(arguments);  
			return lang.mixin(params , {
				authCateIds : this.authCateIds
			});
		}
	});
});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryItemMixin':function(){
define(	["dojo/_base/declare" , "dojo/dom-class", "mui/iconUtils" , "mui/category/CategoryItemMixin"],
		function(declare, domClass, iconUtils, CategoryItemMixin) {
			var item = declare("mui.simplecategory.SimpleCategoryItemMixin", [CategoryItemMixin], {

				buildRendering:function(){
					this.fdId = this.value;
					this.label = this.text;
					this.icon  = 'mui mui-file-text';
					this.type = window.SIMPLE_CATEGORY_TYPE_CATEGORY;
					this.inherited(arguments);
				},
				
				getTitle:function(){
					return this.label;
				},
				
				//是否显示往下一级
				showMore : function(){
					if(this.type == window.SIMPLE_CATEGORY_TYPE_CATEGORY){
						return true;
					}
					return false;
				},
				
				//是否显示选择框
				showSelect:function(){
					var pWeiget = this.getParent();
					if(pWeiget && pWeiget.selType==this.type){
						return true;
					}
					return false;
				},
				
				//是否选中
				isSelected:function(){
					var pWeiget = this.getParent();
					if(pWeiget && pWeiget.curIds && (pWeiget.curIds.indexOf(this.fdId)>-1)){
						return true;
					}
					return false;
				},
				
				buildIcon:function(iconNode){
					if(this.icon){
						iconUtils.setIcon(this.icon, null,
								this._headerIcon, null, iconNode);
					}
				}
			});
			return item;
		});
},
'sys/mobile/js/mui/form/editor/plugins/image/kk/EditorUpload':function(){
/*
 * 附件上传类
 */
define([ "dojo/_base/declare", "dojo/topic", "dojo/request",
		"mui/form/editor/plugins/image/_EditorUploadMixin" ], function(declare,
		topic, request, _EditorUploadMixin) {
	return declare("mui.device.kk.attachment", [ _EditorUploadMixin ], {

		_kkApi : window.kkApi,

		_formatJson : function(jsonStr) {
			var rtnObj = null;
			if (window.JSON) {
				rtnObj = JSON.parse(jsonStr);
			} else if (rtnStr.parseJSON) {
				rtnObj = jsonStr.parseJSON();
			} else {
				rtnObj = eval("(" + jsonStr + ")");
			}
			return rtnObj;
		},

		_uploadFile : function(file, userKey) {
			var self = this;
			if (window.console) {
				window.console.log("UploadFile begin..");
			}
			this._kkApi.uploadFile({
				"filepath" : file.fullpath,

				"userkey" : userKey,

				"uploadurl" : this.uploadurl,

				"complete" : function(cacheId, fileInfo) {
					if (window.console) {
						window.console.log("UploadFile complete cacheId="
								+ cacheId + ",fileInfo=" + fileInfo);
					}
					var fileJson = self._formatJson(fileInfo);
					file.filekey = fileJson.filekey;
					file.status = 2;
					self.uploadSuccess(file, fileJson);
					self._kkApi._clearCache(cacheId);
				},
				"progress" : function(cacheId, loaded) {
					file.status = 1;
					self.uploadProcess(loaded, file);
				},
				"cancel" : function(cacheId) {
					self._kkApi._clearCache(cacheId);
				},
				"error" : function(cacheId, msg) {
					file.status = 0;
					self.uploadError(file, {
						rtn : {
							'status' : '-1',
							'msg' : '附件上传错误:' + msg
						}
					});
					if (window.console) {
						window.console.error("UploadFile Error:" + msg);
					}
					self._kkApi._clearCache(cacheId);
				}
			});
		}
	});
});

},
'sys/mobile/js/mui/list/NavSwapScrollableView':function(){
define([
	'dojo/_base/declare',
	'dojo/topic',
	'dojo/_base/array',
	'./SwapScrollableView',
	], function(declare, topic, array, SwapScrollableView) {
	
	return declare('mui.list.NavSwapScrollableView', [SwapScrollableView], {
		
		refNavBar: null,
		
		postCreate: function() {
			this.inherited(arguments);
			this.subscribe('/mui/nav/onComplete', 'handleNavOnComplete');
		},
		
		handleNavOnComplete: function(widget, items) {
			this.refNavBar = widget;
			this.generateSwapList(widget.getChildren());
		},
		
		onSwapViewChanged: function(view) {
			this.inherited(arguments);
			if (this.refNavBar) {
				var index = array.indexOf(this.getChildren(), view);
				var selectedItem = this.refNavBar.getChildren()[index];
				this.refNavBar.selectedItem = selectedItem;
				selectedItem.setSelected();
			}
		}
	});
});
},
'sys/mobile/js/mui/panel/_SlidePanelMixin':function(){
define([ 'dojo/_base/declare', "dojo/_base/array", "dijit/_WidgetBase",
		"mui/panel/SlidePanel", "dojo/query", "dojo/dom-class",
		"dojo/dom-construct", "dojo/topic", "dojox/mobile/viewRegistry" ],
		function(declare, array, _WidgetBase, SlidePanel, query, domClass,
				domConstruct, topic, viewRegistry) {
			return declare('mui.panel._SliderPanelMixin', null, {

				slide : true,

				SLIDE_PANEL_CLICK : '/mui/panel/slide/click',

				TOTOP : '/mui/list/toTop',

				startup : function() {
					this.inherited(arguments);
					if (!this.slide)
						return;
					this.slidePanel();
					this.subscribe(this.SLIDE_PANEL_CLICK, 'onSlideChange');
					this.buildTopList();
				},

				onSlideChange : function(obj, evt) {
					var top = this.topList[evt.index];
					topic.publish(this.TOTOP, this, {
						y : -top.top
					});
				},

				// 滑动快捷菜单
				slidePanel : function() {
					var titles = [];
					array.forEach(this.contentList, function(item) {
						titles.push(item.claz.title)
					});
					this.bindSlide();
				},

				bindSlide : function() {
					var view = viewRegistry.getEnclosingView(this.domNode);
					this.connect(view.domNode, 'onclick', 'slideClick');
				},

				slideClick : function(evt) {
					var target = evt.target;
					if (!domClass.contains(target, 'mui')
							|| !domClass.contains(target.parentNode,
									'muiAccordionPanelTitle'))
						return;
					var titles = [];
					array.forEach(this.topList, function(item) {
						var domNode = item.dom;
						var title = {
							text : query('div', domNode).text(),
							selected : false,
							icon : 'mui-meeting_path'
						};
						if (target.parentNode == domNode)
							title.selected = true;
						titles.push(title);
					}, this);
					var slide = new SlidePanel({
						store : titles
					});
					domConstruct.place(slide.domNode, document.body, 'last');
					slide.startup();
				}

			});
		});
},
'sys/mobile/js/mui/syscategory/SysCategoryMixin':function(){
define( [ "dojo/_base/declare"],
		function(declare) {
			window.SYS_CATEGORY_TYPE_CATEGORY = 0; //"CATEGORY" 类别
			
			window.SYS_CATEGORY_TYPE_TEMPLATE = 1;//"TEMPLATE" 模板
			
			var sysCategory = declare("mui.syscategory.SysCategoryMixin", null, {

				type : window.SYS_CATEGORY_TYPE_TEMPLATE ,
				
				//模块名
				modelName:null,
				
				//是否取模板, 值:0 否  , 1 是
				getTemplate:1,
				
				//0显示显示子机构分类,只1显示父机构分类,2只父机构分类和子机构分类
				showType:"0",
				
				//对节点的验证权限,0显示所有(00可以选中所有,01只能选中有维护权限的,02只能选中有使用权限的),1 只显示有维护权限的
				authType:"02",
				
				isMul: false ,
				
				templURL : "mui/syscategory/syscategory_sgl.jsp?modelName=!{modelName}&authType=!{authType}",
				
				_setIsMulAttr:function(mul){
					this._set('isMul' , mul);
					if(this.isMul){
						this.templURL =  "mui/syscategory/syscategory_mul.jsp?modelName=!{modelName}&authType=!{authType}";
					}else{
						this.templURL =  "mui/syscategory/syscategory_sgl.jsp?modelName=!{modelName}&authType=!{authType}";
					}
				}
				
			});
			return sysCategory;
	});

},
'sys/mobile/js/mui/list/_ListNoDataMixin':function(){
define(['dojo/_base/declare',
        'dojo/topic',
        'dojo/_base/lang',
        "mui/i18n/i18n!sys-mobile",
        "mui/list/item/_TemplateItemMixin",
        'dojo/text!./item/NoDataTempl.html',
        'dojo/dom-style'
        ], function(declare, topic , lang , Msg ,TemplateItem, tmpl, domStyle) {

		return declare("mui.list._ListNoDataMixin", null, {
			startup : function() {
				if (this._started) {
					return;
				}
				this.inherited(arguments);
				this.subscribe("/mui/list/loaded",lang.hitch(this,function(evts){
						if(evts!=null && evts==this){
							this.buildNoDataItem(evts);
						}
					}));
			},
			
			buildNoDataItem:function(widget){
				if(this.tempItem){
					if(widget.removeChild)
						widget.removeChild(this.tempItem);
					this.tempItem.destroy();
					this.tempItem = null;
				}
				if(widget.totalSize==0){
					this.tempItem = new TemplateItem({
						templateString : tmpl,
						baseClass:"muiListNoData",
						icon:"mui mui-message",
						text:Msg['mui.list.msg.noData']
					});
					if(widget.addChild)
						widget.addChild(this.tempItem);
					widget.append = false;
					// 发布无数据事件
					topic.publish('/mui/list/noData',this);
					var parent = this.getParent();
					if (!parent)
						return;
					var h = parent.domNode.offsetHeight - this.domNode.offsetTop;
					if(!domStyle.get(this.tempItem.domNode,'line-height'))
						domStyle.set(this.tempItem.domNode, {
									'height' : h + 'px',
									'line-height' : h + 'px'
								});
				}
			}
		});
});
},
'sys/mobile/js/mui/dialog/_DialogBase':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/_base/lang",
		"dojo/dom-class", "dojo/dom-construct", "dojo/dom-style" ], function(
		declare, WidgetBase, lang, domClass, domConstruct, domStyle) {

	return declare('mui.dialog._DialogBase', [ WidgetBase ], {

		isShow : false,

		buildRendering : function() {
			this.domNode = this.containerNode;
			this.inherited(arguments);
		},

		show : function() {
			this.set('isShow', true);
			return this;
		},

		hide : function() {
			this.set('isShow', false);
			return this;
		}

	});

})
},
'sys/mobile/js/mui/iconUtils':function(){
define([
    "dojox/mobile/iconUtils",
	"dojo/_base/lang",
	"dojo/dom-class",
	"dojo/dom-construct",
	"dojo/dom-style"
	], function(iconUtils, lang, domClass, domConstruct, domStyle) {
	
	var setIcon = function(
			/*String*/icon, 
			/*String*/iconPos, 
			/*DomNode*/iconNode, 
			/*String?*/alt, 
			/*DomNode*/parent, 
			/*DomNode?*/refNode, 
			/*String?*/pos) {
		if(!parent || !icon && !iconNode){ return null; }
		
		if(icon && icon !== "none" && icon.indexOf('mui-') > -1){
			if(iconNode && iconNode.tagName !== "I"){
				domConstruct.destroy(iconNode);
				iconNode = null;
			}
			iconNode = this.createIcon(icon, null, iconNode, alt, parent, refNode, pos);
			return iconNode;
		}
		this._setIcon.apply(this, arguments);
	};
	
	var createIcon = function(
			/*String*/icon, 
			/*String?*/iconPos, 
			/*DomNode?*/node, 
			/*String?*/title, 
			/*DomNode?*/parent, 
			/*DomNode?*/refNode, 
			/*String?*/pos) {
		if(icon && icon !== "none" && icon.indexOf('mui-') > -1){
			if(!node){
				node = domConstruct.create("I", null, refNode || parent, pos);
			}
			node.title = title;
			domClass.add(node, icon);
			if(iconPos && parent){
				var arr = iconPos.split(/[ ,]/);
				domStyle.set(parent, {
					position: "relative",
					width: arr[2] + "px",
					height: arr[3] + "px"
				});
				domClass.add(parent, "mblSpriteIconParent");
			}
			return node;
		}
		return	this._createIcon.apply(this, arguments);
	};
	
	iconUtils._setIcon = iconUtils.setIcon;
	iconUtils.setIcon = setIcon;
	
	iconUtils._createIcon = iconUtils.createIcon;
	iconUtils.createIcon = createIcon;
	
	return iconUtils;
});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryDialogMixin':function(){
define( [ "dojo/_base/declare", "mui/query/_CategoryQueryDialogMixin",
		"mui/simplecategory/SimpleCategoryMixin" ], function(declare,
		CategoryQueryDialogMixin, SysCategoryMixin) {
	var simpleCategory = declare(
			"mui.simplecategory.SimpleCategoryDialogMixin", [
					CategoryQueryDialogMixin, SysCategoryMixin ], {
				key : '_sys_simple_cate_dialog'
			});
	return simpleCategory;
});
},
'sys/mobile/js/mui/table/ScrollableHView':function(){
define( [ "dojo/_base/declare","dojox/mobile/ScrollableView", "dojo/dom-style", "dojo/ready"],
		function(declare, ScrollableView, domStyle, ready) {
	
	return declare("mui.table.ScrollableHView", [ScrollableView], {
		
		scrollDir:'h',
		
		height:'100%',
		
		scrollBar:false,
		
		buildRendering : function() {
			this.inherited(arguments);
			var _self = this;
			ready(function(){
				_self.resize();
			});
		},
		
		postCreate : function() {
			this.inherited(arguments);
			this.subscribe("/mui/list/resize","resize");
		},
		
		resize : function() {
			var arguH  = this.containerNode.offsetHeight;
			var parentW = this.getParent();
			if(parentW && parentW.resizeH){
				parentW.resizeH(arguH);
			}
			this.inherited(arguments);
		}
	});
});
},
'sys/mobile/js/mui/datetime/_DateTimeMixin':function(){
define([ "dojo/_base/declare", "dojo/text!mui/datetime/tmpl_datetime.jsp",
		"dojo/dom-class", "dojo/dom-construct",
		"mui/datetime/_EditDateTimeMixin" ], function(declare,
		tmpl, domClass, domConstruct, _EditDateTimeMixin) {
			var claz = declare("mui.datetime._DateTimeMixin", [_EditDateTimeMixin], {
				type : 'datetime',
				
				tmpl : tmpl,

				title : '日期时间选择',
				
				_contentExtendClass:'muiDateTimeDialogDisContent',

				_buildValue : function() {
					this.inherited(arguments);
					domClass.add(this.inputContent, 'muiDateTimeInputContnet');
				}

			});
			return claz;
});
},
'sys/mobile/js/mui/view/IframeView':function(){
define( [ "dojo/_base/declare", "dojo/_base/lang", "dijit/_WidgetBase",
		"dojo/dom-construct", "dojo/dom-attr", "dojo/json", "dojo/query",
		"dojo/_base/array", "dojo/html", "mui/util", "mui/rtf/RtfResize",
		"dojo/request" ], function(declare, lang, WidgetBase, domConstruct,
		domAttr, json, query, array, html, util, RtfResize, request) {

	return declare("mui.view.IframeView", [ WidgetBase ], {
		//iframe对应地址
		url : "",

		//计算后的地址
		_iframeUrl : '',

		//相对路径
		_baseUrl : '',

		buildRendering : function() {
			this.inherited(arguments);
			this.containerNode = this.domNode;
		},

		startup : function() {
			this.inherited(arguments);
			var promise = request.post(util.formatUrl(this.url), {
				data : {
					_mobile : '1'
				},
				timeout : 30000
			});
			promise.response.then(lang.hitch(this, function(rep) {
				if (rep.status == 200) {
					var data = {};
					try { //返回iframe地址的情况
						data = json.parse(rep.data);
					} catch (e) { //直接是iframe页面的情况
						data = {};
					}
					if (data.url != null && data.url != '') {
						this._iframeUrl = data.url;
					} else {
						this._iframeUrl = util.formatUrl(this.url);
					}
					var absPath = this._iframeUrl;
					absPath = absPath
							.substring(0, absPath.lastIndexOf("/") + 1);
					this._baseUrl = absPath;
					this._doLoadIframe();
				} else {
					if (window.console)
						window.console
								.error('请求"' + this.url + '"出错，信息：' + rep);
				}
			}), lang.hitch(this, function() {
				if (window.console)
					window.console.error('请求地址"' + this.url + '"出错.');
			}));
		},
		//对于绝对地址处理
		_formatUrl : function(tmpSrc) {
			if (tmpSrc != '' && tmpSrc != null) {
				var tmpUrl = tmpSrc.toLowerCase();
				if (tmpUrl.indexOf("http://") == -1
						&& tmpUrl.indexOf("https://") == -1
						&& tmpUrl.indexOf("/") != 0) {
					return this._baseUrl + tmpSrc;
				}
			}
			return tmpSrc;
		},
		//对于html内容img的src进行处理
		_doContentFilter : function(content) {
			var test = /<img[^>]+src\s*=\s*['"]+([^'"]+)['"]+[^>]*>/gi;
			var strs = null;
			var replaceCfg = [];
			while ((strs = test.exec(content)) != null) {
				var tmpSrc = this._formatUrl(strs[1]);
				if (tmpSrc != strs[1]) {
					var newHtml = strs[0].replace(strs[1], tmpSrc);
					replaceCfg.push( {
						oraginHtml : strs[0],
						newHtml : newHtml
					});
				}
			}
			array.forEach(replaceCfg, lang.hitch( function(data) {
				content = content.replace(data.oraginHtml, data.newHtml);
			}));
			return content;
		},
		//iframe内容绘制之后再次检查img地址，并resize
		_doImgDomFilter : function() {
			array.forEach(query("img", this.containerNode), lang.hitch(this,
					function(imgNode, index) {
						var tmpSrc = domAttr.get(imgNode, "src");
						var newSrc = this._formatUrl(tmpSrc);
						if (tmpSrc != newSrc) {
							domAttr.set(imgNode, "src", newSrc);
						}
					}));
			new RtfResize( {
				containerNode : this.containerNode
			});
		},
		//iframe内容加载
		_doLoadIframe : function() {
			var _self = this;
			require( [ "dojo/text!" + this._iframeUrl ], function(templ) {
				var dhs = new html._ContentSetter( {
					parseContent : true,
					cleanContent : true,
					onBegin : function() {
						this.content = _self._doContentFilter(this.content);
						this.inherited("onBegin", arguments);
					}
				});
				dhs.node = _self.containerNode;
				dhs.set(templ);
				dhs.parseDeferred.then( function() {
					_self._doImgDomFilter();
				});
				dhs.tearDown();
			});
		}
	});
});
},
'sys/mobile/js/mui/address/AddressList':function(){
define( [ "dojo/_base/declare","mui/category/CategoryList" ], function(declare,
		CategoryList) {
	return declare("mui.address.AddressList", [ CategoryList ], {
		//数据请求URL
		dataUrl : '/sys/organization/mobile/address.do?method=addressList&parentId=!{parentId}&orgType=!{selType}'
			
	});
});
},
'sys/mobile/js/mui/form/DateTime':function(){
define([ "dojo/_base/declare", "mui/form/_SelectBase", "dojo/query",
		"mui/datetime/_DateMixin", "mui/datetime/_TimeMixin","mui/datetime/_DateTimeMixin",
		"dojo/_base/lang", "dojo/topic" ], function(declare, _SelectBase,
		query, _DateMixin, _TimeMixin, _DateTimeMixin, lang, topic) {
	var _field = declare("mui.form.DateTime", [ _SelectBase ], {

		nameField : null,

		value : '',

		VALUE_CHANGE : '/mui/form/datetime/change',

		_setValueAttr : function(value) {
			var changed = value != this.value;
			this.inherited(arguments);
			// 值发生改变发出事件
			if (changed)
				topic.publish(this.VALUE_CHANGE, this);
		}
	});

	// 对外方法
	var exports = {
		selectDate : function(event, fieldname, format, callback, type) {
			var dom = query('[name="' + fieldname + '"]');
			if (dom.length == 0)
				return;
			var date = new declare([ _field, _DateMixin ])({
				valueDom : dom[0],
				value : dom[0].value
			});
			date.openDateTime();
		},

		selectTime : function(event, fieldname, format, callback, type) {
			var dom = query('[name="' + fieldname + '"]');
			if (dom.length == 0)
				return;
			var date = new declare([ _field, _TimeMixin ])({
				valueDom : dom[0],
				value : dom[0].value
			});
			date.openDateTime();
		},
		
		selectDateTime : function(event, fieldname, format, callback, type) {
			var dom = query('[name="' + fieldname + '"]');
			if (dom.length == 0)
				return;
			var date = new declare([ _field, _DateTimeMixin ])({
				valueDom : dom[0],
				value : dom[0].value
			});
			date.openDateTime();
		}
	};

	return lang.mixin(_field, exports);
});

},
'sys/mobile/js/mui/base64':function(){
define(
		[ "dojo/_base/declare" ],
		function(declare) {
			var claz = declare(
					"mui.base64",
					null,
					{
						_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

						// public method for encoding
						encode : function(input) {
							var output = "";
							var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
							var i = 0;

							input = this._utf8_encode(input);

							while (i < input.length) {

								chr1 = input.charCodeAt(i++);
								chr2 = input.charCodeAt(i++);
								chr3 = input.charCodeAt(i++);

								enc1 = chr1 >> 2;
								enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
								enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
								enc4 = chr3 & 63;

								if (isNaN(chr2)) {
									enc3 = enc4 = 64;
								} else if (isNaN(chr3)) {
									enc4 = 64;
								}

								output = output + this._keyStr.charAt(enc1)
										+ this._keyStr.charAt(enc2)
										+ this._keyStr.charAt(enc3)
										+ this._keyStr.charAt(enc4);

							}

							return output;
						},

						// public method for decoding
						decode : function(input) {
							var output = "";
							var chr1, chr2, chr3;
							var enc1, enc2, enc3, enc4;
							var i = 0;

							input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

							while (i < input.length) {

								enc1 = this._keyStr
										.indexOf(input.charAt(i++));
								enc2 = this._keyStr
										.indexOf(input.charAt(i++));
								enc3 = this._keyStr
										.indexOf(input.charAt(i++));
								enc4 = this._keyStr
										.indexOf(input.charAt(i++));

								chr1 = (enc1 << 2) | (enc2 >> 4);
								chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
								chr3 = ((enc3 & 3) << 6) | enc4;

								output = output + String.fromCharCode(chr1);

								if (enc3 != 64) {
									output = output + String.fromCharCode(chr2);
								}
								if (enc4 != 64) {
									output = output + String.fromCharCode(chr3);
								}

							}

							output = this._utf8_decode(output);

							return output;

						},

						// private method for UTF-8 encoding
						_utf8_encode : function(string) {
							string = string.replace(/\r\n/g, "\n");
							var utftext = "";

							for (var n = 0; n < string.length; n++) {

								var c = string.charCodeAt(n);

								if (c < 128) {
									utftext += String.fromCharCode(c);
								} else if ((c > 127) && (c < 2048)) {
									utftext += String
											.fromCharCode((c >> 6) | 192);
									utftext += String
											.fromCharCode((c & 63) | 128);
								} else {
									utftext += String
											.fromCharCode((c >> 12) | 224);
									utftext += String
											.fromCharCode(((c >> 6) & 63) | 128);
									utftext += String
											.fromCharCode((c & 63) | 128);
								}

							}

							return utftext;
						},

						// private method for UTF-8 decoding
						_utf8_decode : function(utftext) {
							var string = "";
							var i = 0;
							var c = c1 = c2 = 0;

							while (i < utftext.length) {

								c = utftext.charCodeAt(i);

								if (c < 128) {
									string += String.fromCharCode(c);
									i++;
								} else if ((c > 191) && (c < 224)) {
									c2 = utftext.charCodeAt(i + 1);
									string += String
											.fromCharCode(((c & 31) << 6)
													| (c2 & 63));
									i += 2;
								} else {
									c2 = utftext.charCodeAt(i + 1);
									c3 = utftext.charCodeAt(i + 2);
									string += String
											.fromCharCode(((c & 15) << 12)
													| ((c2 & 63) << 6)
													| (c3 & 63));
									i += 3;
								}

							}
							return string;
						}
					});
			return new claz();
		});
},
'sys/mobile/js/mui/calendar/CalendarJsonStoreList':function(){
define([
    "dojo/_base/declare",
    "dojo/topic",
    'dojo/when',
    "dojox/mobile/EdgeToEdgeStoreList",
    'dojox/mobile/_StoreListMixin', 
    'mui/list/_ListNoDataMixin',
	"dojo/date",
	"mui/util",
	'dojo/_base/lang',
	"dojo/request",
	"./CalendarUtil"
	], function(declare,topic,when,EdgeToEdgeStoreList,_StoreListMixin,ListNoDataMixin,dateClz,util,lang,request,cutil) {
	
	return declare("mui.calendar.CalendarJsonStoreList", [EdgeToEdgeStoreList,_StoreListMixin,ListNoDataMixin], {
		
		// 支持URL
		url: '',
		
		busy: false,
				
		__caches:{},//缓存数据
		
		_setUrlAttr: function(url){
			this.url = util.formatUrl(url);
		},
		
		postMixInProperties:function(){
			this.subscribe("/mui/calendar/dataChange","handleDataChange");
			this.subscribe("/mui/calendar/valueChange","handleValueChange");
		},
		
		startup : function() {
			if(this._started){ return; }
			this.inherited(arguments);
		},
		
		formatData:function(datas){
			return datas.data;
		},
		
		handleDataChange:function(widget,args){
			if(args.startDate && args.endDate){
				var _startDate=cutil.formatDate(args.startDate);
				var _endDate=cutil.formatDate(args.endDate);
				this.url=util.setUrlParameter(this.url,"fdStart",_startDate);
				this.url=util.setUrlParameter(this.url,"fdEnd",_endDate);
			}
			var self=this;
			var promise = request
						.post(this.url, {handleAs : 'json'})
						.response
						.then(function(datas) {
							
							
							var __caches=self.__caches={},
								__datas=self.formatData(datas);
							
							self._processDatas(__datas);
							var currentKey=cutil.formatDate(args.currentDate);
							if(!__caches[currentKey]){
								__caches[currentKey]=[];
							}
							
							self._sortDatas(__caches[currentKey]);//排序
							self.generateList(__caches[currentKey]);
							self.totalSize=__caches[currentKey].length;
							
							//var items=self.FilterItems(datas.data,args.currentDate);
							//self.generateList(items);
							topic.publish('/mui/list/loaded', self, __caches[currentKey]);
							
							//self._caches=datas.data;
							//返回一个月中哪天有日程
							var result=self._hasCalendar(args);
							topic.publish('/mui/calendar/notify', result);
						});
		},
		
		handleValueChange:function(widget,args){
			//var items=this.FilterItems(this._caches,args.currentDate);
			var __caches=this.__caches,
				currentKey=cutil.formatDate(args.currentDate);
			if(!__caches[currentKey]){
				__caches[currentKey]=[];
			}
			this.generateList(__caches[currentKey]);
			this.totalSize=__caches[currentKey].length;
			topic.publish('/mui/list/loaded', this, __caches[currentKey]);
		},
		
		//数据缓存
		_processDatas:function(datas){
			var __caches=this.__caches;
			for(var i=0 ;i<datas.length;i++){
				//var tmpDate=stamp.fromISOString(datas[i].start),
				//endDate=stamp.fromISOString(datas[i].end);
				var tmpDate=cutil.parseDate(datas[i].start),
					endDate=cutil.parseDate(datas[i].end);
				tmpDate.setHours(0,0,0,0);
				while(dateClz.compare(tmpDate,endDate) <= 0 ){
					var key=cutil.formatDate(tmpDate);
					if(!__caches[key]){
						__caches[key]=[];
					}
					__caches[key].push(datas[i]);
					tmpDate=dateClz.add(tmpDate,"day",1);
				}
			}
			return __caches;
		},
		
		//数据排序
		_sortDatas:function(datas){
			
		},
		
		_hasCalendar:function(args){
			args.startDate.setHours(0,0,0,0);
			args.endDate.setHours(0,0,0,0);
			var result={},
				tmpDate=args.startDate,
				__caches=this.__caches;
			while(dateClz.compare(tmpDate,args.endDate) <= 0){
				var key=cutil.formatDate(tmpDate);
				if(__caches[key] && __caches[key].length >0 ){
					result[key] = true;
				}
				tmpDate=dateClz.add(tmpDate,"day",1);
			}
			return result;
		}
		
		
	});
});
},
'sys/mobile/js/mui/device/device':function(){
/**
 * 用于客户端设备检查
 */
var device = {
	PC : -1,			//PC端
	
	WEB : 0,			//普通手机web浏览器
	
	WEB_IPHONE:1,       //iphone/ipad手机浏览器，已废弃
	
	EKP_IPHONE:2,       //移动ekp，苹果客户端 
	
	EKP_IPAD:3,			//移动ekp，ipad客户端 
	
	EKP_ANDRIOD:4,		//移动ekp，安卓客户端 
	
	EKP_ANDRIODPAD:5,   //移动ekp，安卓宽频客户端，暂未使用 
	
	THIRD_WEIXIN:6,		//第三方接入，微信客户端
	
	KK_IPHONE:7,		//移动KK，iphone客户端
	
	KK_ANDRIOD:8,		//移动KK，andriod客户端
	
	KK5_IPHONE:9,		//移动KK5，iphone客户端
	
	KK5_ANDRIOD:10,		//移动KK5，andriod客户端
	
	//类型，ua特征标识，是否有做接口支持
	_UA_MAP :[
          {type : 6, value : 'micromessenger'},
          {type : 10, value : 'ekp-i-kk5'},
          {type : 9, value : 'ekp-i-android-kk5'},
          {type : 7, value : 'ekp-i-kk'},
          {type : 8, value : 'ekp-i-android-kk'},
          {type : 4, value : 'ekp-i-android'},
          {type : 5, value : 'ekp-i-hd-android'},
          {type : 3, value : 'ekp-i-hd'},
          {type : 2, value : 'ekp-i'}
	],
	
	__getClientUAKey:function(){
		var ua = window.navigator.userAgent;
		for ( var i = 0; i < this._UA_MAP.length; i++) {
			var uaObj = this._UA_MAP[i];
			if(ua.toLowerCase().indexOf(uaObj.value)>-1){
				return uaObj;
			}
		}
		return null; 
	},

	/**
	 * 获取客户端类型
	 */
	getClientType: function(){
		var _uaKey = this.__getClientUAKey();
		if(_uaKey != null){
			return _uaKey.type;
		}
		return this.WEB; 
	}
	
};

if(window.dojoConfig && window.define) {
	window.define(["mui/i18n/i18n!sys-mobile:sysMobile.pda.comefrom"],function(Msg) {
		device.getClientTypeStr = function(type){
			var typeStr = type!=null ? type:this.getClientType();
			var info = Msg['sysMobile.pda.comefrom.' + typeStr];
			if(info!=null)
				return info;
			else
				return typeStr;
		};
		return device;
	});
}
},
'sys/mobile/js/mui/syscategory/SysCategoryItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/syscategory/SysCategoryItemMixin"
	], function(declare, _TemplateItemMixin, SysCategoryItemMixin) {
	
	return declare("mui.syscategory.SysCategoryItemListMixin", [_TemplateItemMixin], {
		
		itemRenderer : SysCategoryItemMixin
		
	});
});
},
'sys/mobile/js/mui/device/weixinapi':function(){
/*
 * 用于微信客户端对应功能接口调用
 */
define(["dojo/request","mui/util", "mui/i18n/i18n!sys-attachment"], function(request, util, Msg) {
		var wenxinApi = {
			
			download : function(options) {
				var isWechatAndriod = function() {
					var ua = navigator.userAgent.toLowerCase();
					if (ua.indexOf('android') > -1) {
						return true;
					} 
					return false;
				};
				if (!isWechatAndriod()){
					location.href = util.formatUrl(options.href);
					return;
				}
					
				var params = "{\"fdFileId\" : \"" + options.fdId
						+ "\", " + "\"fdFileName\" : \""
						+ options.name + "\", "
						+ "\"fdContentType\" : \"" + options.type
						+ "\"}";
				var url = util
						.formatUrl("/third/wechat/wechatLoginHelper.do?method=wechatDownload&params="
								+ params);
				var promise = request.post(url);
				alert(Msg['mui.sysAttMain.msg.wechatDownload']);
			}
		};
		
		return wenxinApi;
	});

},
'sys/mobile/js/mui/table/ScrollableHContainer':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase", "dijit/_Contained", "dijit/_Container", "dojo/dom-style"],
		function(declare, WidgetBase, Contained, Container, domStyle) {
	
	return declare("mui.table.ScrollableHContainer", [WidgetBase, Contained, Container], {

		buildRendering : function() {
			this.inherited(arguments);
		
		},
		startup : function() {
			this.inherited(arguments);
		},
		
		resizeH:function(h){
			if(h>0){
				domStyle.set(this.domNode,{'height': h + 'px'});
			}
		}
	});
});
},
'sys/mobile/js/mui/list/ComplexLItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/ComplexLItemMixin"
	], function(declare, _TemplateItemListMixin, ComplexLItemMixin) {
	
	return declare("mui.list.ComplexLItemListMixin", [_TemplateItemListMixin], {
		
		itemRenderer : ComplexLItemMixin
	});
});
},
'sys/mobile/js/mui/property/PropertyDialogMixin':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "dojo/html",
		"dojox/mobile/_css3", "dojo/dom-style", "dojo/_base/lang" ], function(
		declare, domConstruct, html, css3, domStyle, lang) {
	var claz = declare("mui.property.PropertyDialogMixin", null, {
		modelName : null,

		fdCategoryId : null,
		// 筛选刷新列表
		referListId : null,

		show : function(evt) {
			this.openFilter();
		},

		hideFilter : function() {
			if (!this.dialogDiv)
				return;
			var tmpStyle = {};
			tmpStyle[css3.name('transform')] = 'translate3d(100%, 0, 0)';
			domStyle.set(this.dialogDiv, tmpStyle);
		},

		showFilter : function() {
			if (!this.dialogDiv)
				return;
			var tmpStyle = {};
			tmpStyle[css3.name('transform')] = 'translate3d(0, 0, 0)';
			domStyle.set(this.dialogDiv, tmpStyle);
		},

		openFilter : function() {
			if (this.dialogDiv) {
				this.showFilter();
				return;
			}
			this.subscribe('/mui/property/hide', 'hideFilter');
			var self = this;
			require([ 'dojo/text!mui/property/filter.jsp?modelName='
					+ this.modelName + '&fdCategoryId=' + this.fdCategoryId ],
					function(tmpl) {

						self.dialogDiv = domConstruct.create("div", {
							className : 'muiPropertyFilterDialog'
						}, document.body, 'last');
						var dhs = new html._ContentSetter({
							node : self.dialogDiv,
							parseContent : true,
							cleanContent : true,
							onBegin : function() {
								this.content = lang.replace(this.content, {
									referListId : self.referListId
								});
								this.inherited("onBegin", arguments);
							}
						});
						dhs.set(tmpl);
						dhs.parseDeferred.then(function(results) {
							self.parseResults = results;
							self.showFilter();
						});
						dhs.tearDown();
					});
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/i18n/i18n':function(){
define([
	    "dojo/request",
		"mui/util"
	], function(request, util) {
	
	var url = "/sys/mobile/js/mui/i18n/i18n.jsp?bundle=!{bundle}";
	
	var getMessage = function(bundle, load) {
		var rqUrl = util.formatUrl(util.urlResolver(url, {'bundle': bundle}));
		request(rqUrl, {sync: false, handleAs: 'json' }).then(load);
	};
	
	return {
		load: function(id, require, load){
			getMessage(id, load);
		}
	};
});
},
'sys/mobile/js/mui/list/item/CardItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"dojo/on",
   	"mui/dialog/Tip", 
   	"mui/list/item/_ListLinkItemMixin"
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util,on,Tip, _ListLinkItemMixin) {
	var item = declare("mui.list.item.CardItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		baseClass:"muiCardItem muiListItem",

		//消息来源
		modelNameText:"",
		//创建时间
		created:"",
		//创建者
		creator:"",
		//创建人图像
		icon:"",
		//链接
		href:"",
		//当前节点
		lbpmCurrNodeValue:"",
		//调查结束
		docFinishedTimeValue:"",
		//摘要
		summary:"",
		//发布时间
		docPublishTime:"",
		//所属部门
		docDeptName:"",
		//摘要
		summary:"",
		//阅读数
		docReadCount:"",
		//标签
		tagNames:"",
		
		buildRendering:function(){
			this.domNode = domConstruct.create('li', {className : ''}, this.containerNode);
			this.inherited(arguments);
			this.buildInternalRender();
		},
		buildInternalRender : function() {
			var itemClass = this.href ? {}:{className:'lock'};
			this.contentNode = domConstruct.create('a', itemClass, this.domNode);
			
			var head = domConstruct.create("div",{className:"figure"},this.contentNode);
			//Personal picture
			if(this.icon){
				//用户头像
				var span = domConstruct.create("span",{className:"figureImgW"},head);
				domConstruct.create("img", { className: "muiProcessImg",src:this.icon}, span);
			}else{
				var span = domConstruct.create("span",{className:"figureImgW"},head);
				var imgBox = domConstruct.create("div",{className:"imgBox"},span);
				//自定义列表图标
				var listIcon = this.listIcon? this.listIcon : "mui-bookLogo";
				domConstruct.create("i", { className: "mui " + listIcon}, imgBox);
			}
			

			var subject = domConstruct.create("span",{className:"title muiSubject",innerHTML:this.label},head);
			if(this.href){
				this.makeLinkNode(this.contentNode);
			}else{
				lock = domConstruct.toDom("<div class='icoLock'><i class='mui mui-todo_lock'></i></div>");
				domConstruct.place(lock, this.contentNode);
				//tip
				this.makeLockLinkTip(this.contentNode);
			}
			//subhead
			var subhead = domConstruct.create("p",{className:"muiCardSummary muiListSummary"},this.contentNode);
			//summary
			if(this.summary){
				domConstruct.create("div",{className:'summary muiListSummary',innerHTML:this.summary},subhead);
			}
			var ul = domConstruct.create("ul",{className:"muiCardIcoList"},subhead);
			if(this.creator){
				var li = domConstruct.toDom("<li><i class='mui mui-todo_person'></i>" + this.creator + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.docDeptName){
				var li = domConstruct.toDom("<li><i class='mui mui-depart'></i>" + this.docDeptName + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.created){
				var li = domConstruct.toDom("<li><i class='mui mui-todo_date'></i>" + this.created + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.docPublishTime){
				var li = domConstruct.toDom("<li><i class='mui mui-todo_date'></i>" + this.docPublishTime + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.modelNameText){
				var li = domConstruct.toDom("<li><i class='mui mui-todo_module'></i>" + this.modelNameText + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.lbpmCurrNodeValue){
				var li = domConstruct.toDom("<li><i class='mui mui-todo_template'></i>" + this.lbpmCurrNodeValue + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.docReadCount){
				var li = domConstruct.toDom("<li><i class='mui mui-eyes'></i>" + this.docReadCount + "</li>");
				domConstruct.place(li, ul);
			}
			if(this.tagNames){
				var li = domConstruct.toDom("<li><i class='mui mui-label'></i>" + this.tagNames + "</li>");
				domConstruct.place(li, ul);
			}
			//自定义参数,后期改成无限参数形式
			if(this.arg0){
				var li = domConstruct.toDom(this.arg0);
				domConstruct.place(li, ul);
			}
			if(this.arg1){
				var li = domConstruct.toDom(this.arg1);
				domConstruct.place(li, ul);
			}
			if(this.arg2){
				var li = domConstruct.toDom(this.arg2);
				domConstruct.place(li, ul);
			}
			
		},
		
		makeLockLinkTip:function(linkNode){
			this.href='javascript:void(0);';
			on(linkNode,'click',function(evt){
				Tip.tip({icon:'mui mui-warn', text:'暂不支持移动访问'});
			});
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		}
	});
	return item;
});
},
'sys/mobile/js/mui/device/web/attachment':function(){
/*
 * 附件上传类
 */
define(["dojo/_base/declare", "dojo/request","mui/device/_attachment"],function(declare , request , attachment) {
	return declare("mui.device.web.attachment", [attachment], {

		_uploadFile : function(file , userKey){
			var canUpload=false;
			var d = null;
			if(this.uploadStream == true){
				d = {'userkey':userKey,'data':file.href,'extParam':this.extParam};
				canUpload = true;
			}else{
				if(window.FormData){
					d = new FormData;
					d.append("userkey", userKey);
					d.append("NewFile", file);
					if (this.extParam)
						d.append("extParam", this.extParam);
					canUpload=true;
				}
			}
			if(canUpload){
				var self = this;
				var promise = request.post(this.uploadurl, {
						data : d,
						handleAs : 'json'
					});
				promise.then(function(data) {
					if (data.status == '1') {
						file.status = 2;
						file.filekey = data.filekey;
						self.uploadSuccess(file,data);
					} else {
						file.status = 0;
						self.uploadError(file , {
								rtn : data
							});
					}
				}, function(data) {
					file.status = 0;
					self.uploadError(file , {
							rtn : data
						});
				},function(response){
					file.status = 1;
					self.uploadProcess(response.loaded , file);
				});
			}else{
				file.status = 0;
				self.uploadError(file , {rtn:{'status':'-1','msg':'附件上传错误,当前浏览器表单不支持.'}});
			}
		}
	});
});

},
'sys/mobile/js/mui/query/QueryListItem':function(){
define( [ "dojo/_base/declare", "dojox/mobile/_ItemBase", "dojo/dom-construct", "dojo/dom-style", "mui/util", "mui/folder/_Folder"], 
		function(declare, ItemBase, domConstruct, domStyle, util, Folder) {
		return declare("mui.query.QueryList", [ ItemBase , Folder],{
			
				baseClass : 'muiQueryListItem',
				
				icon : null ,
				
				label : '',
					
				buildRendering:function(){
					this.inherited(arguments);
					this.itemR = domConstruct.create("div",{className:'muiQueryListItemR'},this.containerNode);
					this.iconDiv = domConstruct.create("div",{
							className: "muiQueryListItemIcon"}, this.itemR);
					if(this.icon){
						domConstruct.create("i",{
								className : this.icon
							}, this.iconDiv);
					}
					domConstruct.create("div",{
							className: "muiQueryListItemLabel",
							innerHTML: this.label}, this.itemR);
					domConstruct.create("div",{className:'muiQueryListItemL'},this.containerNode);
				},
				
		
				startup:function(){
					this.inherited(arguments);
					this.referOffesetTop = this.getParent().get('topHeight');
				},
				
				show:function(evt){
					this.inherited(arguments);
				},
				
				setStyle:function(style){
					domStyle.set(this.domNode,style);
				},
				
				_setLabelAttr:function(label){
					this._set("label",label);
				}
		});
});
},
'sys/mobile/js/mui/form/select/_StoreSelectMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
				"dojo/dom-construct", "mui/form/_StoreFormMixin",
				"dojo/_base/array", "dojo/_base/lang" ],
		function(declare, query, domClass, domConstruct, _StoreFormMixin,
				array, lang) {
			var claz = declare(
					"mui.form.select._StoreSelectMixin",
					_StoreFormMixin,{
						
						selectBoxPrefix: '_select_box_',
						
						valueField : null,

						values : [],

						itemRenderer : '<input type="checkbox" data-dojo-type="mui/form/CheckBox" name="_select_box_!{valueField}" value="!{value}" data-dojo-props="mul:!{mul},text:\'!{text}\',checked:!{checked}">',

						mul : true,

						generateList : function(items) {
							this.formatValues(items);
							this.set('value', this.value);
						},

						// 格式化数据
						formatValues : function(values) {
							this.values = values;
						},

						renderListItem : function(contentNode) {
							var values = this.value.split(';');
							array.forEach(this.values, lang.hitch(this,
									function(value) {
										value.selected = false;
										array.forEach(values, function(v) {
											if (v == value.value) {
												value.selected = true;
												return;
											}
										});
										var item = this.createListItem(value);
										contentNode.appendChild(item);
									}));
						},

						createListItem : function(props) {
							var itemRenderer = this.itemRenderer.replace(
									'!{text}', props.text).replace(
									'!{checked}', props.selected).replace(
									'!{value}', props.value).replace('!{mul}',
									this.mul).replace('!{valueField}', this.valueField);

							var item = domConstruct.toDom(itemRenderer);
							return item;
						},

						getSelectedValue : function() {
							var selecteds = query(
									'[name="'+this.selectBoxPrefix + this.valueField +'"]:checked',
									this.contentNode);
							var ids = '';
							array.forEach(selecteds, function(item, index) {
								ids += index == 0 ? item.value : ';'
										+ item.value;
							});
							return ids;
						},

						getTextByValue : function(value) {
							var text = '';
							if (value == undefined)
								return text;
							var values = value.split(';');
							for (var k = 0; k < values.length; k++) {
								for (var j = 0; j < this.values.length; j++) {
									if (values[k] == this.values[j].value) {
										text += (k == 0 ? this.values[j].text
												: ';' + this.values[j].text);
										break;
									}
								}
							}
							return text;
						}
					});

			return claz;
		});
},
'sys/mobile/js/mui/calendar/CalendarView':function(){
define(
		[ "dojo/_base/declare", "dojox/mobile/View", "dojo/dom-style",
				"dojo/dom-class", "dojo/_base/window", "dijit/registry",
				"dojo/_base/array", "dojo/topic" ],
		function(declare, View, domStyle, domClass, win, registry, array, topic) {
			var claz = declare(
					"mui.calendar.CalendarView",
					[ View ],
					{

						buildRendering : function() {
							this.inherited(arguments);
							domClass.add(this.domNode,
									'muiCalendarScrollableView');
						},

						startup : function() {
							if (this._started)
								return;
							this.findAppBar();
							this.inherited(arguments);
						},

						// 搜索fixed为bottom或top的节点
						findAppBar : function() {
							if (this.domNode.parentNode) {
								for (var i = 0, len = this.domNode.parentNode.childNodes.length; i < len; i++) {
									c = this.domNode.parentNode.childNodes[i];
									this.checkFixedBar(c);
								}
							}
						},

						checkFixedBar : function(node) {
							if (node.nodeType === 1) {
								var fixed = node.getAttribute("fixed")
										|| node
												.getAttribute("data-mobile-fixed")
										|| (registry.byNode(node) && registry
												.byNode(node).fixed);
								if (fixed === "top") {
									domClass.add(node, "mblFixedHeaderBar");
									this.fixedHeader = node;
								} else if (fixed === "bottom") {
									domClass.add(node, "mblFixedBottomBar");
									this.fixedFooter = node;
								}
							}
						},

						width : '100%',
						resize : function() {
							this.footerHeight = (this.fixedFooter) ? this.fixedFooter.offsetHeight
									: 0;
							this.headerHeight = (this.fixedHeader) ? this.fixedHeader.offsetHeight
									: 0;
							domStyle.set(this.domNode, 'height',
									win.global.innerHeight - this.footerHeight
											- this.headerHeight + 'px');
							topic.publish('/mui/calendar/viewComplete', this, {
								fixedHeaderHeight : this.headerHeight,
								fixedFooterHeight : this.footerHeight
							})
							array.forEach(this.getChildren(), function(child) {
								if (child.resize)
									child.resize();
							});
						}
					});
			return claz;
		});
},
'sys/mobile/js/mui/property/filter/FilterItem':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/dom-construct",
		"dojo/topic", "dojo/dom-class" ], function(declare, _WidgetBase,
		domConstruct, topic, domClass) {
	var claz = declare("mui.property.FilterItem", [ _WidgetBase ], {

		name : null,
		value : null,

		isSelected : false,

		baseClass : 'muiPropertyFilterItem',

		selectedClass : 'muiPropertyFilterSelected',

		SELECTED_EVENT : '/mui/property/filter/selected',

		buildRendering : function() {
			this.inherited(arguments);
			this.buildItem();
		},

		startup : function() {
			this.inherited(arguments);
		},

		buildItem : function() {
			var value = this.value, name = this.name;
			this.itemNode = domConstruct.create('div', {
				className : 'muiPropertyFilterText',
				innerHTML : '<span><div>' + name + '</div></span>'
			}, this.domNode);
			this.connect(this.domNode, 'click', '_onSelect');
		},

		unSelected : function() {
			domClass.remove(this.domNode, this.selectedClass);
			topic.publish('/mui/property/filter/item/remove', this, {
				value : this.value,
				name : this.name,
				parent : this.getParent()
			});
			this.isSelected = false;
		},

		selected : function() {
			topic.publish(this.SELECTED_EVENT, this, {
				value : this.value,
				name : this.name,
				parent : this.getParent()
			});
			domClass.add(this.domNode, this.selectedClass);
			topic.publish('/mui/property/filter/item/add', this, {
				value : this.value,
				name : this.name,
				parent : this.getParent()
			});
			this.isSelected = true;
		},

		_onSelect : function(evt) {
			if (this.isSelected)
				this.unSelected();
			else
				this.selected();

		}
	});
	return claz;
});
},
'sys/mobile/js/mui/back/HrefBackMixin':function(){
define( [ "dojo/_base/declare", "dojo/dom-class", "mui/util" ], function(declare, domClass, util) {
	return declare("mui.back.HrefBackMixin", null , {
			//返回的地址
			href : "",
			
			icon:'mui mui-home-opposite',
			
			buildRendering : function() {
				this.inherited(arguments);
				domClass.add(this.domNode,"muiHrefBack");
			},
			
			
			_onExpand : function(evt){
				if (window[this.click])
					window[this.click]();
				else if ('[object Function]' == Object.prototype.toString
						.call(this.click)){
					this.click();
				}else
					new Function(this.click)();
				this.inherited(arguments);
			},
			

			show : function(refHeight) {
				// 自定义返回事件
				if (this.click)
					return;
				var url = dojoConfig.baseUrl ? dojoConfig.baseUrl : '/';
				if (this.href) {
					url = util.formatUrl(this.href);
				}
				location = url;
			}
	});
});
},
'sys/mobile/js/mui/rating/Rating':function(){
define(
		[ "dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct",
				"dojo/dom-attr", "dojo/topic", "dojo/touch",
				"dijit/_WidgetBase", "dojo/dom-style", "dojo/dom-class",
				"dojo/_base/Deferred" ],
		function(declare, lang, domConstruct, domAttr, topic, touch,
				WidgetBase, domStyle, domClass, Deferred) {

			var Rating = declare(
					"mui.rating.Rating",
					[ WidgetBase ],
					{

						icon : "mui mui-star-on mui-2",

						// 最大分数
						numStars : 5,

						value : 0,

						baseClass : "muiRating",

						editable : false,

						// 未选中类名
						classOff : 'muiRatingOff',
						// 选中类名
						classOn : 'muiRatingOn',

						eventName : "/mui/rating/ratingSelected",

						// 等级对象集合
						ratings : [],

						unratings : [],

						buildRendering : function() {
							this.inherited(arguments);
							this.starArea = domConstruct.create("div", {
								className : "muiRatingArea"
							}, this.domNode);
							this.buildStarts(this.classOff, this.starArea,
									!this.editable);
						},

						buildStarts : function(className, node, editable) {

							if (editable) {
								if (this.value % 1 > 0) {
									this.nbuildStartsHarf(node);
								} else {
									this.nbuildStarts(node);
								}
								return;
							}
							domStyle.set(this.domNode, {
								position : 'relative'
							});
							for (var i = 0; i < this.numStars; i++) {
								var rating = domConstruct.create("i", {
									className : this.icon + " " + className,
									score : (i + 1)
								}, node);
								this.connect(rating, touch.release,
										"_selectStar");
								if (className == this.classOff)
									this.unratings.push(rating);
								if (className == this.classOn)
									this.ratings.push(rating);
							}
						},

						nbuildStarts : function(node) {
							for (var i = 0; i < this.value; i++) {
								var star = domConstruct.create("i", {
									className : this.icon + " " + this.classOn
								}, node);
							}
							var len = this.numStars - this.value;
							for (var j = 0; j < len; j++) {
								var star = domConstruct.create("i", {
									className : this.icon + " " + this.classOff
								}, node);
							}
						},

						// 构建有小数点的星星分数
						nbuildStartsHarf : function(node) {
							var onStarsNum = parseInt(this.value);
							var percent = this.value % 1;
							var offStarsNum = this.numStars - onStarsNum - 1;
							for (var i = 0; i < onStarsNum; i++) {
								var star = domConstruct.create("i", {
									className : this.icon + " " + this.classOn
								}, node);
							}
							// 构建残缺星星
							var harfStar = domConstruct.create("span", {
								className : this.icon + " " + this.classOff
										+ " mulRatingHarfContainer"
							}, node);
							var harfStarOn = domConstruct.create("span", {
								className : this.icon + " " + this.classOn
										+ " mulRatingHarf"
							}, harfStar);
							domStyle.set(harfStarOn, {
								width : (percent / 1) * 100 + "%",
								margin : 0
							});
							domStyle.set(this.starArea, {
								"text-align" : "center"
							});
							for (var j = 0; j < offStarsNum; j++) {
								var star = domConstruct.create("i", {
									className : this.icon + " " + this.classOff
								}, node);
							}
						},

						_setValueAttr : function(value) {
							this._set("value", value);
							if (this.Value == 0 || !this.editable)
								return;
							if (this.valArea == null) {
								this.valArea = domConstruct.create("div", {
									className : "muiRatingValue"
								}, this.domNode);
								this.buildStarts(this.classOn, this.valArea);
							}
							this.valArea.style.width = (parseFloat(this.value) / parseFloat(this.numStars))
									* 100 + "%";

							var value = parseInt(this.value);
							var self = this;
							var scaleClass = 'muiRatingScale', hideClass = "muiRatingHide";
							for (var i = 0; i < value; i++) {
								~~function(i) {
									return function() {
										var def = new Deferred();
										def.then(function() {
											domClass.remove(self.unratings[i],
													hideClass);
											domClass.remove(self.ratings[i],
													scaleClass);
										});

										self.defer(function() {
											domClass.add(self.unratings[i],
													hideClass);
											domClass.add(self.ratings[i],
													scaleClass);
											self.defer(function() {
												def.resolve();
											}, 200);
										}, i * 200);
									}();
								}(i);
							}
						},

						_selectStar : function(evt) {
							var star = evt.target || evt.srcElement;
							value = domAttr.getNodeProp(star, "score");
							this.set("value", parseInt(value, 10));
							topic.publish(this.eventName, this);
						}
					});

			return Rating;

		});

},
'sys/mobile/js/mui/syscategory/SysCategorySelection':function(){
define([ "dojo/_base/declare", "mui/iconUtils",
				"mui/category/CategorySelection" ],
		function(declare, iconUtils, CategorySelection) {
			var selection = declare("mui.syscategory.SysCategorySelection",[ CategorySelection ],{

				modelName:null,
				
				//获取详细信息地址
				detailUrl : '/sys/category/mobile/sysCategory.do?method=detailList&cateId=!{curIds}&modelName=!{modelName}',

				buildIcon : function(iconNode, item) {
					iconUtils.setIcon("mui mui-file-text", null, null, null,
						iconNode);
				}
			});
			return selection;
		});
},
'sys/mobile/js/mui/calendar/base/CalendarScrollable':function(){
define([ "dojo/_base/declare", "dojox/mobile/_css3",
		"mui/calendar/base/CalendarBase", "dojo/dom-style" ], function(declare,
		css3, CalendarBase, domStyle) {
	var claz = declare("mui.calendar.CalendarScrollable", [ CalendarBase ], {

		makeTranslateStr : function(to) {
			var y = to.y + "px";
			return "translate3d(0," + y + ",0px)";
		},

		scrollTo : function(to, smooth) {
			if (smooth)
				this.smooth();
			var s = this.domNode.style;
			s[css3.name("transform")] = this.makeTranslateStr(to);
		},

		// 让惯性变得平滑
		smooth : function() {
			var cssKey = '-webkit-transition';
			domStyle.set(this.domNode, cssKey,
					' -webkit-transform 100ms linear');
			this.defer(function() {
				domStyle.set(this.domNode, cssKey, '')
			}, 100);
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/dialog/Smoke':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/_base/lang",
		"dojo/dom-class", "dojo/dom-construct", "dojo/dom-style",
		"mui/dialog/_DialogBase", "dojo/html", "dojo/dom-geometry" ], function(
		declare, WidgetBase, lang, domClass, domConstruct, domStyle,
		_DialogBase, html, domGeometry) {
	var claz = declare('mui.dialog.Smoke', [ _DialogBase ], {

		icon : null,
		time : 500,
		callback : null,
		// 方向
		direction : 'up',
		// 触发对象，dom
		target : null,
		// 触发位置,{x:'',y:''}，跟target2选1
		pos : null,

		buildRendering : function() {
			this.containerNode = domConstruct.create('div', {
				className : this.icon
			}, document.body, 'last');
			this.inherited(arguments);
		},

		show : function() {
			var pos;
			if (this.pos)
				pos = this.pos;
			else if (this.target)
				pos = domGeometry.position(this.target, true);
			var x = pos.x, y = pos.y, h = pos.h;
			domStyle.set(this.containerNode, {
				position : 'absolute',
				top : y + 'px',
				left : x + 'px'
			});
			var isUp = this.direction == 'up';
			isUp ? this._show1() : this._show2();
			this.inherited(arguments);
			setTimeout(lang.hitch(this, this.hide), 800);
		},

		_show1 : function() {
			domClass.add(this.containerNode, 'muiDialogSmokeUp');
		},

		_show2 : function() {
			domClass.add(this.containerNode, 'muiDialogSmokeDown');
		},

		hide : function() {
			if (this.callback)
				this.callback.call();
			this.inherited(arguments);
			this.destroy();
		}
	});

	return {
		smoke : function(options) {
			return new claz(options).show();
		}
	};

})
},
'sys/mobile/js/mui/list/_JsonStoreListMixin':function(){

define([
	'dojo/_base/declare', 
	'dojo/_base/lang', 
	"dojo/on",
	'dojox/mobile/_StoreListMixin', 
	'mui/store/JsonRest','mui/store/JsonpRest',
	'dojox/mobile/viewRegistry',
	'dojo/when',
	'dojo/topic',
	'mui/util'
	], function(declare, lang, on,
		_StoreListMixin, JsonStore, JsonpStore ,viewRegistry, when, topic, 
		util) {
	
	return declare("mui.list._JsonStoreListMixin", [_StoreListMixin], {
		// 支持URL
		url: '',
		
		pageno: 1,
		
		rowsize: null,
		
		busy: false,
		
		dataType : "json",
		
		//是否马上请求数据
		lazy: true,
		
		_setUrlAttr: function(url){
			this.url = util.formatUrl(url);
		},
		
		handleOnPush: function(widget, handle) {
			var scroll = viewRegistry.getEnclosingScrollable(this.domNode);
			if (widget === scroll) {
				this.loadMore(handle);
			}
		},
		
		handleOnReload: function(widget, handle) {
			var scroll = viewRegistry.getEnclosingScrollable(this.domNode);
			if (widget === scroll) {
				if (!this.url && scroll.rel && scroll.rel.url) {
					this.set('url', scroll.rel.url);
				}
				this.reload(handle);
			}
		},
		
		startup : function() {
			if(this._started){ return; }
			this.inherited(arguments);
			if(!this.lazy){
				this.doLoad();
			}
			this.subscribe('/mui/list/onPush', 'handleOnPush');
			this.subscribe('/mui/list/onPull', 'handleOnReload');
			this.subscribe('/mui/list/onReload', 'handleOnReload');
		},
		
		onComplete: function(items) {
			this.busy = false;
			var list = this.resolveItems(items);
			this.generateList(list);
			topic.publish('/mui/list/loaded', this, items);
		},

		onError: function(error) {
			this.busy = false;
		},

		doLoad: function(handle, append) {
			if (this.busy) {
				return;
			}

			if (handle)
				handle.work(this);
			
			this.busy = true;
			this.append = !!append;
			
			if (this.append && this._loadOver) {
				if (handle)
					handle.done(this);
				this.busy = false;
				return;
			}

			var promise = null;
			if (this.store) {
				this.store.target = this.url;
				promise = this.setQuery(this.buildQuery(), {});
			} else {
				if(this.dataType == 'jsonp') {
					promise = this.setStore(new JsonpStore(
							{idProperty: 'fdId', target: util.urlResolver(this.url, this)}), 
							this.buildQuery(), {});
				} else {
					promise = this.setStore(new JsonStore(
							{idProperty: 'fdId', target: util.urlResolver(this.url, this)}), 
							this.buildQuery(), {});
				}
			}
			var self = this;
			if (handle) {
				when(promise, 
						function() {handle.done(self);}, 
						function() {handle.error(self);});
			}
			return promise;
		},
		
		reload: function(handle) {
			this.pageno = 1;
			this._loadOver = false;
			return this.doLoad(handle, false);
		},
		
		loadMore: function(handle) {
			return this.doLoad(handle, true);
		},

		formatDatas : function(datas) {
			var dataed = [];
			for (var i = 0; i < datas.length; i++) {
				var datasi = datas[i];
				dataed[i] = {};
				for (var j = 0; j < datasi.length; j++) {
					dataed[i][datasi[j].col] = datasi[j].value;
				}
			}
			return dataed;
		},

		resolveItems : function(items) {
			this._loadOver = false;
			var page = {};
			if (items) {
				if (items['datas']){//分页数据
					this.listDatas = this.formatDatas(items['datas']);
					page = items['page'];
					if (page) {
						this.pageno = parseInt(page.currentPage, 10) + 1;
						this.rowsize = parseInt(page.pageSize, 10);
						this.totalSize = parseInt(page.totalSize, 10);
						if(parseInt(page.totalSize || 0, 10) <= (this.pageno-1) * this.rowsize) {
							this._loadOver = true;
						}
					}
				}else{//直接数据,不分页
					this.listDatas = items;
					this.totalSize = items.length;
					this.pageno = 1;
					this._loadOver = true;
				}
			}
			
			if (this._loadOver) {
				topic.publish('/mui/list/pushDomHide',this);
			} else {
				topic.publish('/mui/list/pushDomShow',this);
			}
				
			return this.listDatas;
		},
		
		// 筛选
		handleFilter : function(widget, evt, handle) {
			this.pageno = 1;
			topic.publish('/mui/list/pushDomShow',this);
			if (!this.url && evt.url) {
				this.set('url', evt.url);
			}
			return this.doLoad(handle, false);
		},
		
		// 构建
		buildQuery : function() {
			return lang.mixin([] , {
						pageno : this.pageno,
						rowsize : this.rowsize
			});
		}
	});
});
},
'sys/mobile/js/mui/property/filter/FilterRadio':function(){
define([ "dojo/_base/declare", "mui/property/filter/FilterBase",
		"dojo/dom-construct", "dojo/_base/array", "dojo/topic",
		"dojo/dom-style" ], function(declare, FilterBase, domConstruct, array,
		topic, domStyle) {
	var claz = declare("mui.property.FilterRadio", [ FilterBase ], {

		SELECTED_EVENT : '/mui/property/filter/selected',

		buildRendering : function() {
			this.inherited(arguments);
			this.subscribe(this.SELECTED_EVENT, 'selectChange');
			this.subscribe('/mui/property/filter/item/add', 'addValue');
			this.subscribe('/mui/property/filter/item/remove', 'removeValue');
		},

		addValue : function(obj, evt) {
			if (!evt)
				return;
			if (evt.parent != this)
				return;
			var val = evt.value;
			if (this.values.indexOf(val) < 0)
				this.values.push(val);
			this.setValue();
		},

		removeValue : function(obj, evt) {
			if (!evt)
				return;
			if (evt.parent != this)
				return;
			var val = evt.value;
			var index = this.values.indexOf(val);
			if (index >= 0)
				this.values.splice(index, 1);
			this.setValue();
		},

		startup : function() {
			this.inherited(arguments);
			var children = this.getChildren();
			var maxHeight = 0;
			array.forEach(children, function(item, index) {
				domConstruct.place(item.domNode, this.contentNode);
				if (item.domNode.offsetHeight > maxHeight)
					maxHeight = item.domNode.offsetHeight;
			}, this);

			array.forEach(children, function(item) {
				domStyle.set(item.domNode, {
					'line-height' : maxHeight + 'px',
					'height' : maxHeight + 'px'
				});
			}, this);
		},

		selectChange : function(obj, evt) {
			var children = this.getChildren();
			array.forEach(children, function(item) {
				if (obj != item && evt.parent == this)
					item.unSelected();
			}, this);
		}

	});
	return claz;
});
},
'sys/mobile/js/mui/calendar/_BottomEventMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-geometry", "dojo/touch",
				"dojo/_base/window", "dojo/topic", "dojo/_base/array",
				"mui/util",'dojo/dom-style' ,'dojo/dom-construct'],
		function(declare, domGeometry, touch, win, topic, array, util,domStyle,domConstruct) {
			var claz = declare(
					"mui.calendar._BottomEventMixin",
					null,
					{

						eventNode : null,

						// 事件数组
						connects : [],

						dy : 0,

						url : null,
						addName:null,

						buildRendering : function() {
							this.inherited(arguments);
							this.bindEvent();
							if(this.url){
								this.eventNode.innerHTML='添加事件';
								domConstruct.create('div',{className:'mui-plus mui'},this.eventNode,'first');
								this.connect(this.eventNode, touch.release,'eventClick');
							}
						},

						eventClick : function() {
							if (this.url)
								location.href = util.formatUrl(this.url);
						},

						eventStop : function(evt) {
							evt.preventDefault();
							evt.stopPropagation();
						},

						bindEvent : function() {
							this.touchStartHandle = this.connect(this.domNode,
									touch.press, "onTouchStart");
						},

						unBindEvent : function() {
							this.disconnect(this.touchStartHandle);
						},

						onTouchStart : function(e) {
							this.dy = 0;
							this.eventStop(e);
							this.connects.push(this.connect(win.doc,
									touch.move, "onTouchMove"));
							this.connects.push(this.connect(win.doc,
									touch.release, "onTouchEnd"));
							this.touchStartY = e.touches ? e.touches[0].pageY
									: e.clientY;
							this.startPos = domGeometry.position(this.domNode);
						},

						onTouchMove : function(e) {
							this.eventStop(e);
							var y = e.touches ? e.touches[0].pageY : e.clientY;
							this.dy = y - this.touchStartY;
							if (this.dy > 0)
								return;

							var _y = this.startPos.y - this.weekHeight
									- this.headerHeight;
							if (Math.abs(this.dy) > _y)
								return;

							this.scrollTo({
								y : this.dy
							});

							this.publishScroll({
								y : this.dy,
								top : (this.weekHeight + this.headerHeight)
										* (1 - Math.abs(this.dy) / _y)
							});
						},

						onTouchEnd : function(e) {
							var y = 0, top = 0;
							if (this.contentHeight >> 1 > Math.abs(this.dy)) {
								top = this.weekHeight + this.headerHeight;
							} else {
								y = -(this.contentHeight - this.weekHeight);
								top = 0;
								this.unBindEvent();
								this._bindEvent();
								this.publishStatus(false);
							}
							this.scrollTo({
								y : y
							}, true);
							this.publishScroll({
								y : y,
								top : top
							});

							this.disconnects();
						},

						_bindEvent : function() {
							this._touchStartHandle = this.connect(this.domNode,
									touch.press, "_onTouchStart");
						},

						_unBindEvent : function() {
							this.disconnect(this._touchStartHandle);
						},

						_onTouchStart : function(e) {
							this.dy = 0;
							this.eventStop(e);
							this.connects.push(this.connect(win.doc,
									touch.move, "_onTouchMove"));
							this.connects.push(this.connect(win.doc,
									touch.release, "_onTouchEnd"));
							this.subscribe('/mui/calendar/listScrollableTop',
									'listScrollableTop');
							this.touchStartY = e.touches ? e.touches[0].pageY
									: e.clientY;
						},

						// 列表滚动是否到顶
						listTop : true,

						listScrollableTop : function(obj, to) {
							this.listTop = (to.y >= 0);
						},

						_onTouchMove : function(e) {
							this.eventStop(e);
							var y = e.touches ? e.touches[0].pageY : e.clientY;
							this.dy = y - this.touchStartY;

							if (this.dy < 0
									|| this.dy >= this.contentHeight
											- (this.weekHeight))
								return;

							if (!this.listTop)
								return;

							var dy = -(this.contentHeight - this.weekHeight)
									+ this.dy;
							this.scrollTo({
								y : dy
							});

							this
									.publishScroll({
										y : dy,
										top : (this.weekHeight + this.headerHeight)
												* (1 - Math.abs(dy)
														/ (this.startPos.y
																- this.weekHeight - this.headerHeight))
									});

						},

						_onTouchEnd : function(e) {
							if (!this.listTop)
								return;

							var y = -(this.contentHeight - this.weekHeight), top = 0;

							if (this.contentHeight >> 1 > Math.abs(this.dy)) {
								top = 0;// 还原
							} else {
								y = 0;
								top = this.weekHeight + this.headerHeight;
								this._unBindEvent();
								this.bindEvent();
								this.publishStatus(true);
							}
							this.scrollTo({
								y : y
							}, true);

							this.publishScroll({
								y : y,
								top : top
							});
							this.disconnects();
						},

						publishScroll : function(to) {
							topic.publish('/mui/calendar/bottomScroll', this,
									to);
						},

						publishStatus : function(status) {
							// true代表默认模式
							topic.publish('/mui/calendar/bottomStatus', this, {
								status : status
							});
						},

						disconnects : function() {
							array.forEach(this.connects, function(item) {
								this.disconnect(item);
							}, this);
							this.connects = [];
						}
					});
			return claz;
		});
},
'sys/mobile/js/mui/form/validate/Validator':function(){
define([ "dojo/_base/declare"], function(declare) {
	var Validator = declare("mui.form.validate.Validator", null, {
		//校验类型
		type:'',
		
		//验证错误提示信息
		error:'',
		
		owner:this,
	
		//test参数信息
		options:{},
		
		//test options参数中key
		params:[],
		
		//设置检验函数,默认返回true
		testFun: function(value, element) { 
			return true; 
		},
		
		constructor:function(type, error, testFun, type){
			this.inherited(arguments);
			this.type = type;
			this.error = error;
			this.testFun = testFun;
			this.params = type;
		},
		
		//校验主函数, element可以是dom或组件
		test:function(value , element) {
			return this.testFun.call(this.owner, value, element, this.options);
		},
		
		setOption:function(param , value){
			this.options[param] = value;
		},
		

		setOwner:function(ownerArgu){
			this.owner = ownerArgu || this;
		},
		
		setParams:function(params){
			this.params = params;
		},
		
		setParamValues:function(values){
			for (var i = 0, length = this.params.length; i < length; i++) {
				if (i == values.length) break;
				this.setOption(this.params[i], values[i]);
			}
		}
		
	});
	return Validator;
});
},
'sys/mobile/js/mui/nav/NavBar':function(){
define(
		"mui/nav/NavBar",
		[ "dojo/dom-construct", 'dojo/_base/declare', "dojo/dom-class",
				"dojox/mobile/_ScrollableMixin", "dojo/dom-style",
				"dojo/topic", "dojo/_base/lang", "dijit/_WidgetBase",
				"dijit/_Contained", "dijit/_Container",
				"dojox/mobile/SwapView", "dojo/_base/array",
				"mui/nav/_ShareNavBarMixin" ],
		function(domConstruct, declare, domClass, ScrollableMixin, domStyle,
				topic, lang, WidgetBase, Contained, Container, SwapView, array,
				_ShareNavBarMixin) {
			var cls = declare(
					'mui.nav.NavBar',
					[ WidgetBase, Contained, Container, ScrollableMixin,
							_ShareNavBarMixin ],
					{

						scrollDir : "h",

						curIndex : 0,

						lastIndex : 0,

						height : 'inherit',

						width : '100%',

						// 不显示滚动条
						scrollBar : false,

						buildRendering : function() {
							this.inherited(arguments);
							domClass.add(this.domNode, "mblScrollableView");
							domClass.add(this.domNode, "muiNavbar");
							domStyle.set(this.domNode, {
								overflow : 'hidden',
								top : 0
							});
							// 外围容器，滚动需要该特定名对象
							this.containerNode = domConstruct.create("ul", {
								className : "muiNavbarContainer"
							}, this.domNode);
							// 选中区域
							this.selectedNode = domConstruct.create('div', {
								className : 'muiNavbarSelected'
							}, this.domNode);
							// 监听item改变事件
							this.subscribe('/mui/navitem/_selected',
									'handleItemChanged');
						},

						handleItemChanged : function(srcObj, evt) {
							var children = this.getChildren(), child = evt.target;
							var index = this.getIndexOfChild(child);

							if (index > -1) {
								// 上一次点击索引
								this.lastIndex = this.curIndex;
								// 这次点击索引
								this.curIndex = index;

								var idx = this.curIndex - this.lastIndex;
								var dim = this._dim || this.getDim(), x = 0, scroll = false;
								if (idx > 0) {// 往后点
									var len = children.length;
									if (len - index >= 2) {
										var domNode_next = children[index + 1].domNode;
										x = -domNode_next.offsetLeft
												+ (dim.v.w - domNode_next.offsetWidth);
										if (x < 0)
											scroll = true;
									} else {
										x = -(this.containerNode.offsetWidth - this.domNode.offsetWidth);
										scroll = true;
									}

								} else if (idx < 0) {// 往前点
									if (index >= 1) {
										var domNode_next = children[index - 1].domNode;
										x = -domNode_next.offsetLeft;
										if (x > -dim.c.w
												&& x > -(dim.c.w - dim.v.w))
											scroll = true;
									} else {
										x = 0;
										scroll = true;
									}
								}
								evt = this.formatEvt(evt);
								if (scroll) {
									this.slideEvt = evt;
									this.slideTo({
										x : x
									}, 0.3, "ease-out");
								} else
									this
											.selectedNodeChange(evt);

							}
						},

						// 格式化参数，用于做最大宽限制
						formatEvt : function(evt) {
							var m_width = domStyle.get(this.selectedNode,
									'max-width'), width = evt.width;
							if (width > m_width)
								evt.left = evt.left + (width - m_width) / 2;
							return evt;
						},

						selectedNodeChange : function(evt) {
							domStyle.set(this.selectedNode, {
								width : evt.width + 'px',
								'-webkit-transform' : 'translate3d(' + evt.left
										+ 'px, 0px, 0px)'
							});
						},

						slideTo : function() {
							this.inherited(arguments);
							if (this.slideEvt) {
								this.selectedNodeChange(this.slideEvt);
								this.slideEvt = null;
							}
						},

						_setWidthAttr : function(width) {
							this.width = width;
						},

						startup : function() {
							if (this._started)
								return;
							this.reparent();
							this.inherited(arguments);
							if (this.height == "inherit") {
								if (this.domNode.parentNode) {
									h = this.domNode.parentNode.style.height;
									this.height = h;
								}
							} else if (this.height) {
								h = this.height;
							}
							if (h && h != '') {
								var styleVar = {
									'height' : h,
									'line-height' : h
								};
								domStyle.set(this.domNode, styleVar);
								if (this.domNode != this.containerNode) {
									domStyle.set(this.containerNode, styleVar);
								}
							}
						},

						// 移动内容到相应位置
						reparent : function() {
							var i, idx, len, c;
							for (i = 0, idx = 0,
									len = this.domNode.childNodes.length; i < len; i++) {
								c = this.domNode.childNodes[idx];
								if (c === this.containerNode) {
									idx++;
									continue;
								}
								this.containerNode.appendChild(this.domNode
										.removeChild(c));
							}
						}
					});
			return cls;
		});
},
'sys/mobile/js/mui/form/SimpleCategory':function(){
define( [ "dojo/_base/declare", "mui/form/Category",
		"mui/simplecategory/SimpleCategory" ], function(declare, Category,
		SimpleCategory) {
	var simpleCategory = declare("mui.form.SimpleCategory", [ Category,
			SimpleCategory ], {});
	return simpleCategory;
});
},
'sys/mobile/js/mui/rtf/_ImageResizeMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-style", "dojo/dom-attr",
				"dojo/query", "dojo/_base/array", "mui/device/adapter",
				"dojo/on", "dojo/_base/lang", ],
		function(declare, domStyle, domAttr, query, array, adapter, on, lang) {

			return declare(
					"mui.rtf._ImageResizeMixin",
					null,
					{

						formatContent : function(domNode) {
							this.inherited(arguments);
							var imgs = [];
							if (typeof (domNode) == "object") {
								imgs = query('img', domNode);
							} else {
								imgs = query(domNode + ' img');
							}
							this.initSrcList();
							array
									.forEach(
											imgs,
											lang
													.hitch(
															this,
															function(item) {
																var src = item.src;
																if (domAttr
																		.get(
																				item,
																				'data-type') != 'face'
																		&& src
																				.indexOf('/images/smiley/wangwang/') < 0) {
																	this
																			.addSrcList(src);
																	this
																			.resizeDom(item);
																}
															}));
						},

						resizeDom : function(item) {
							domAttr.remove(item, "style");
							var styleVar = {
								'height' : 'auto',
								'textIndent' : '0px',
								"max-width" : '100%'
							};
							domStyle.set(item, styleVar);
							var self = this;
							on(item, "click", function(evt) {
								adapter.imagePreview({
									curSrc : item.src,
									srcList : self.getSrcList()
								});
							});
						},

						initSrcList : function() {
							this.srcList = [];
						},

						addSrcList : function(src) {
							this.srcList.push(src);
						},

						getSrcList : function() {
							return this.srcList;
						}
					});

		});
},
'sys/mobile/js/mui/list/item/_ListThumbItemMixin':function(){
define(
		[ "dojo/_base/declare", "mui/util", "dojo/dom-construct" ],
		function(declare, util, domConstruct) {

			return declare(
					"mui.list.item._ListThumbItemMixin",
					null,
					{

						thumbUrl : '/resource/fckeditor/editor/filemanager/download?fdId=${fdId}',

						// thumbs为数组或者字符串"fdId1,fdId2"
						buildThumb : function(thumbs, refNode) {
							var url = util.formatUrl(this.thumbUrl);
							if (thumbs) {
								var thumbArray;
								if (typeof (thumbs) == 'object')
									thumbArray = thumbs;
								else
									thumbArray = thumbs.split(',');
								var thumbContent = domConstruct.create('div', {
									className : 'muiListThumb'
								}, refNode);

								for (var index = 0; index < thumbArray.length; index++) {
									if (index == 3)
										return false;
									var _url = url.replace('${fdId}',
											thumbArray[index]);
									domConstruct.create('p', {
										style : 'background-image: url(' + _url
												+ ')'
									}, thumbContent);
								}
							}
						}
					});
		});
},
'sys/mobile/js/mui/form/Select':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"mui/form/_SelectBase", "dojo/dom-construct",
		"mui/form/select/_StoreSelectMixin", "mui/dialog/Dialog",
		'dojo/parser', "dojo/_base/array", "dojo/_base/lang", "dojo/topic" ],
		function(declare, query, domClass, _SelectBase, domConstruct,
				_StoreSelectMixin, Dialog, parser, array, lang, topic) {
			var _field = declare("mui.form.Select", [ _SelectBase,
					_StoreSelectMixin ], {

				value : '',

				text : '',

				type : 'select',

				CHECK_CHANGE : 'mui/form/checkbox/change',

				SELECT_CALLBACK : 'mui/form/select/callback',

				startup : function() {
					this.inherited(arguments);
					this.valueField = this.name;
				},

				// 渲染模板
				renderListItem : function() {
					this.inherited(arguments);
				},

				closeDialog : function(srcObj, evt) {
					if (evt.name == (this.selectBoxPrefix + this.valueField)) {
						this.set('value', evt.value);
						this._closeDialog();
					}
				},

				_closeDialog : function() {
					this.dialog.hide();
					this.dialog = null;
				},

				_buildValue : function() {
					this.inherited(arguments);
					domClass.add(this.inputContent, 'muiSelectInputContnet');
				},

				buildRendering : function() {
					this.inherited(arguments);
					this.textNode = domConstruct.create('div', {
						className : 'muiFormSelectText'
					}, this.inputContent);
				},

				_setTextAttr : function(text) {
					this.textNode.innerHTML = text;
					this.text = text;
				},

				buildEdit : function() {
					this.inherited(arguments);
					this.selectNode = domConstruct.create('input', {
						name : this.name,
						className : 'muiFormSelectInput',
						value : this.value
					}, this.inputContent);
					this.bindEvent();

				},

				buildReadOnly : function() {
					this.selectNode = domConstruct.create('input', {
						name : this.name,
						className : 'muiFormSelectInput',
						value : this.value,
						readOnly : 'readOnly'
					}, this.inputContent);
				},

				buildHidden : function() {
					this.selectNode = domConstruct.create('input', {
						name : this.name,
						className : 'muiFormSelectInput',
						value : this.value
					}, this.inputContent);
				},

				viewValueSet : function(value) {
					if(value!=null && value!=''){
						this.set('text', this.getTextByValue(value));
					}
				},

				editValueSet : function(value) {
					this.set('text', this.getTextByValue(value));
					this.selectNode.value = value;
				},

				hiddenValueSet : function(value) {
					this.editValueSet(value);
				},

				readOnlyValueSet : function(value) {
					this.editValueSet(value);
				},

				bindEvent : function() {
					this.connect(this.domNode, 'click', function(evt){
						this.defer(function(){
							this._onClick(evt);
						},320);
					});
					if (!this.mul) {
						this.subscribe(this.CHECK_CHANGE, 'closeDialog');
					}
				},

				_onClick : function(evt) {
					if (this.dialog)
						return;
					this.contentNode = domConstruct.create('div', {
						className : 'muiFormSelectElement'
					});
					this.renderListItem(this.contentNode);
					var buttons = [];
					if (this.mul) {
						buttons = [ {
							title : '确定',
							fn : lang.hitch(this, this._closeDialog)
						} ];
					}
					this.dialog = Dialog.element({
						title : this.subject || '下拉框',
						element : this.contentNode,
						buttons : buttons,
						showClass : 'muiDialogSelect',
						callback : lang.hitch(this, function() {
							topic.publish(this.SELECT_CALLBACK, this);
							this.dialog = null;
						})
					});
				}
			});
			return _field;
		});
},
'sys/mobile/js/mui/tabbar/TabBar':function(){
define([
        "dojo/_base/declare",
        "dojox/mobile/TabBar",
        "dojo/dom-class",
    	"dojo/dom-geometry",
    	"dojo/_base/array",
	], function(declare, TabBar, domClass, domGeometry, array) {
	
	return declare("mui.tabbar.TabBar", [TabBar], {
		
		fill: 'always',
		
		resize: function(size){
			if (this.fill == 'grid') {
				this.resizeByGrid(size);
				return;
			}
			this.inherited(arguments);
		},
		
		resizeByGrid: function(size) {
			var i, w, h;
			if(size && size.w){
				w = size.w;
			}else{
				w = domGeometry.getMarginBox(this.domNode).w;
			}
			domClass.toggle(this.domNode, "mblTabBarNoIcons",
							!array.some(this.getChildren(), function(w){ return w.iconNode1; }));
			domClass.toggle(this.domNode, "mblTabBarNoText",
							!array.some(this.getChildren(), function(w){ return w.label; }));
			
			//this.containerNode.style.padding = "0 5px";
			
			domClass.add(this.domNode, "muiTabBarGrid");
			var cellWidth = 25;
			var percent = true; 
			if(w > 0){
				cellWidth = w / 4 - 36;
				percent = false;
			}
			array.forEach(this.getChildren(), function(child, i) {
				var colSize = child.colSize || 1;
				if(percent){
					child.domNode.style.width = (cellWidth * colSize-3) + "%";
				}else{
					child.domNode.style.width = (cellWidth * colSize + ((colSize - 1) * 36)) + "px";
				}
			});
			
			if(size && size.w) {
				domGeometry.setMarginBox(this.domNode, size);
			}
		}
	});
});
},
'sys/mobile/js/mui/calendar/CalendarUtil':function(){
define(["dojo/_base/declare","dojo/date/locale","mui/i18n/i18n!sys-mobile"],function(declare,locale,msg){
	var clz=declare("mui.calendar.CalendarUtil", null, {
		
		//日期转字符串
		formatDate:function(/*Date*/date,timePattern){
			var patterns=[msg['mui.date.format.date'],msg['mui.date.format.datetime'],msg['mui.date.format.time']];
			if(timePattern){
				patterns.unshift(timePattern);
			}
			try{
				for(var i in patterns){
					var _pattern=patterns[i];
					var _date=locale.format(date,{selector : 'time',timePattern : _pattern});
					if(_date!=null){
						return _date;
					}
				}
			}catch(e){
				return null;
			}
			return null;
		},
		
		//字符串转日期
		parseDate:function(/*String*/date,timePattern){
			var patterns=[msg['mui.date.format.date'],msg['mui.date.format.datetime'],msg['mui.date.format.time']];
			if(timePattern){
				patterns.unshift(timePattern);
			}
			try{
				for(var i in patterns){
					var _pattern=patterns[i];
					var _date=locale.parse(date,{selector : 'time',timePattern : _pattern});
					if(_date!=null){
						return _date;
					}
				}
			}catch(e){
				return null;
			}
			return null;
		}
		
		
	});
	
	return new clz();
	
	
});
},
'sys/mobile/js/mui/category/CategorySelection':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/_base/array",
				"dojox/mobile/ScrollableView", "dojo/dom", "dojo/dom-construct",
				"dojo/dom-style", "dojo/dom-class", "dojo/request", "dojo/topic", 
				"mui/util",  "mui/dialog/Tip" , "mui/iconUtils" ],
		function(declare, WidgetBase,array, ScrollableView,dom, domConstruct, domStyle, domClass,
				request, topic, util, Tip, iconUtils) {
			var selection = declare("mui.category.CategorySelection",[ WidgetBase ],{
				//非必填项,用于初始值
				curIds : null,
				
				curNames : null,
				
				//获取详细信息地址
				detailUrl : '',
				
				baseClass : 'muiCateSec',
				
				//已选列表id, name, icon
				cateSelArr : [],
				
				itemPrefix : '_CateSecItem_',
				
				//对外事件唯一标示
				key : null,

				buildRendering : function() {
					this.inherited(arguments);
					this.cateSelArr = [];
					this.containerNode = domConstruct.create("div" ,{'className':'muiCateSecContainer'},this.domNode);
					this.leftArea = domConstruct.create("div",{'className':'muiCateSecLeft'},this.containerNode);
					this.view = new ScrollableView({scrollBar:false,threshold:100,scrollDir:"h",dirLock:true});
					this.leftArea.appendChild(this.view.domNode);
					
					this.rightArea = domConstruct.create("div",{'className':'muiCateSecRight'},this.containerNode);
					this.buttonNode =  domConstruct.create("span",{'className':'muiCateSecBtn muiCateSecBtnDis','innerHTML':'确定'},this.rightArea);
				},

				postCreate : function() {
					this.inherited(arguments);
					this.subscribe("/mui/category/selected","_addSelItme");
					this.subscribe("/mui/category/unselected","_delSelItem");
				},

				startup : function() {
					if (this._started) {
						return;
					}
					this.inherited(arguments);
					this.view.startup();
					this._initSelection();
				},
				
				destroy:function(){
					this.inherited(arguments);
					if(this.view.destroy){
						this.view.destroy();
						delete this.view;
					}
				},
				
				_subSelItem:function(){
					if(this.cateSelArr.length>0){
						topic.publish("/mui/category/submit" , this, this._calcCurSel());
					}else{
						Tip.tip({icon:'mui mui-warn', text:"请至少选择一项"});
					}
				},
				
				_initSelection:function(){
					if(this.curIds){
						var _url = util.urlResolver(this.detailUrl,this);
						_url = util.formatUrl(_url);
						var promise = request.post(_url, {
							handleAs : 'json'
						});
						var _self = this;
						promise.then(function(items) {
							if(items.length>0){
								array.forEach(items,function(item){
									_self._addSelItme(_self,item);
								});
							}else{
								//错误处理
							}
						}, function(data) {
							//错误处理
						});
					}
				},
				
				_buildSelItem:function(item){
					var selDom = domConstruct.create("div",{'id': this.itemPrefix + item.fdId , 'className':'muiCateSecItem'});
					var iconArea = domConstruct.create("div",{'className':'muiCateSecItemIcon'},selDom);
					var iconNode = domConstruct.create("div",{'className':'muiCateIcon'},iconArea);
					this.buildIcon(iconNode, item);
					domConstruct.create("div",{'className':'muiCateSecItemLabel','innerHTML':item.label},selDom);
					this.connect(selDom,'click',function(evt){
						this._delSelItem(this,item);
						topic.publish("/mui/category/cancelSelected",this,item);
					});
					return selDom;
				},
				
				buildIcon:function(iconNode,item){
					if(item.icon){
						iconUtils.setIcon(item.icon, null, null, null, iconNode);
					}
				},
				
				_addSelItme:function(srcObj,evt){
					if(srcObj.key==this.key){
						if(evt){
							this.cateSelArr.push(evt);
							var selItem = this._buildSelItem(evt);
							if(!this.itemContainer){
								this.itemContainer = domConstruct.create("div",{'className':'muiCateSecItems'},this.view.containerNode);
							}
							this.itemContainer.appendChild(selItem);
						}
						this._resizeSelection();
					}
				},
				
				_delSelItem:function(srcObj,evt){
					if(srcObj.key==this.key){
						if(evt && evt.fdId){
							for ( var i=0;i< this.cateSelArr.length; i++) {
								if(this.cateSelArr[i].fdId==evt.fdId){
									this.cateSelArr.splice(i,1);
									domConstruct.destroy(dom.byId(this.itemPrefix + evt.fdId));
									break;
								}
							}
							this._resizeSelection();
						}
					}
				},
				
				_resizeSelection:function(){
					var xPos = 0;
					if(this.itemContainer){
						var childCount = this.cateSelArr.length;
						if(childCount > 0){
							var oneW = this.itemContainer.children[0].offsetWidth;
							var conW = this.view.domNode.offsetWidth;
							if(oneW * childCount > conW){
								domStyle.set(this.itemContainer,{'width':(oneW * childCount + 10 ) + 'px'});
								xPos = -(oneW * childCount - conW + 10);
							}
							this.buttonNode.innerHTML = '确定('+childCount+')';
							this.buttonNode.className = "muiCateSecBtn";
							if(this.subHandle==null)
								this.subHandle = this.connect(this.buttonNode,'click','_subSelItem');
						}else{
							domStyle.set(this.itemContainer,{'width':'100%'});
							this.buttonNode.innerHTML = '确定';
							this.buttonNode.className = "muiCateSecBtn muiCateSecBtnDis";
							if(this.subHandle){
								this.disconnect(this.subHandle);
								this.subHandle = null;
							}
						}
					}
					if(this.view.resize){
						this.view.resize();
					}
					if(this.view.scrollTo){
						this.view.scrollTo({y:0,x:xPos});
					}
					topic.publish("/mui/category/selChanged" ,this, this._calcCurSel());
				},
				
				_calcCurSel:function(){
					var eCxt = {
						curIds:null,
						curNames:null,
						key: this.key
					};
					if(this.cateSelArr.length>0){
						var ids = '';
						var names = '';
						array.forEach(this.cateSelArr,function(selItem){
							ids += ';' + selItem.fdId;
							names += ';' + selItem.label;
						});
						if(ids!=''){
							ids = ids.substring(1);
							names = names.substring(1);
							eCxt.curIds = ids;
							eCxt.curNames = names;
						}
					}
					return eCxt;
				}
			});
			return selection;
		});
},
'sys/mobile/js/mui/list/_NavAttachMixin':function(){
define([
        "dojo/_base/declare", 
        'dojo/topic', 
        'dojo/_base/lang',
        'dojo/_base/array'
        ], function(declare, topic, lang, array) {
	
	return declare('mui.list._NavAttachMixin', null, {
		
		navCompleteTopic: '/mui/nav/onComplete',
		
		navSetSelectedTopic: '/mui/nav/setSelected',
		
		refNavBar: null,
		
		postCreate: function() {
			this.inherited(arguments);
			
			if (this.navCompleteTopic) {
				this.subscribe(this.navCompleteTopic, 'handleNavOnComplete');
			}

			this.subscribe(this.swapChangedTopic, 'handleSwapChanged');
		},
		
		handleNavOnComplete: function(widget, items) {
			this.refNavBar = widget;
			this.generateSwapList(widget.getChildren());
		},
		
		handleSwapChanged: function(view) {
			if (this.refNavBar) {
				var index = array.indexOf(this.getChildren(), view);
				this.refNavBar.getChildren()[index].setSelected();
			}
		}
	});
});
},
'sys/mobile/js/mui/view/DocScrollableView':function(){
define([ "dojo/_base/declare", "dojox/mobile/ScrollableView",
		"mui/list/_ViewScrollEventPublisherMixin", "dojo/dom-attr" ], function(
		declare, ScrollableView, _ViewScrollEventPublisherMixin, domAttr) {

	return declare("mui.view.DocScrollableView", [ ScrollableView,
			_ViewScrollEventPublisherMixin ], {
		scrollBar : false,
		isFormElement : function(/* DOMNode */node) {
			if (node && node.nodeType !== 1) {
				node = node.parentNode;
			}
			if (!node || node.nodeType !== 1) {
				return false;
			}
			var t = node.tagName;
			// 兼容编辑器，避免编辑器无法获取焦点
			return (t === "SELECT" || (t === "INPUT")
					|| t === "TEXTAREA" || t === "BUTTON" || domAttr.get(node,
					'contenteditable') == 'true');
		}
	});
});
},
'sys/mobile/js/mui/form/ajax-form':function(){
define([
        "dojo/_base/lang",
        "dojo/query",
        "dojo/on",
        "dojo/dom-style",
        "dojo/dom-form",
        "dojo/dom-construct",
        "dojo/request",
        "mui/dialog/Tip", 
        "mui/device/adapter",
        "dojo/_base/window",
        "mui/util",
        "dojo/touch",
        "dojo/_base/event",
        ], function(lang, query, on, domStyle, domForm, domConstruct, request, Tip, adapter, win, util, touch, event) {
			var doBack = function() {
				var rtn = adapter.goBack();
				if(rtn == null){
					history.back();
				}
			}
			

		    window._alert = window.alert;
		    var tipAlert = function(txt) {
		    	require(["mui/dialog/Tip"], function(Tip) {
		    		Tip.tip({text:txt});
		    	});
		    };
			
			var processing = Tip.processing();
			var working = false;

			function tipProccessing() {
				if (working)
					return false;
				working = true;
				window.alert = tipAlert;
				processing.show();
				return true;
			}
			function hideProcessing() {
            	working = false;
            	window.alert = window._alert;
            	processing.hide(false);
			}
			var ajaxForm = function(formName, options) {
				var form = lang.isString(formName) ? query(formName)[0] : formName;
				
				var success = options.success ? options.success : function() {
					Tip.success({text: "操作成功", callback: options.back ? doBack : null, cover: true});
				};
				var fail = options.error ? options.error : function() {Tip.fail({text: "操作失败", cover: true});};
				
				var doSubmit = function(form) {
					var url = form.action;
					var promise = request.post(url, {
		                data: domForm.toObject(form),  
		                timeout: 10000,
		                headers: {'Accept': 'application/json'},
		                handleAs: 'json'
		            }).then(function(result) {
		            	hideProcessing();
		            	if (result['status'] === false) {
		            		fail(result);
		            		return;
		            	}
		            	success(result);
		            }, function(result) {
		            	hideProcessing();
		            	fail(result);
		            });
				};
				
				var onsubmit = function(evt) {
					
					evt.stopPropagation();
		            evt.preventDefault();
		            tipProccessing();
		            doSubmit(form);
				};
				
				if (window.Com_Submit) {
					Com_Submit.ajaxBeforeSubmit = tipProccessing;
					Com_Submit.ajaxCancelSubmit = hideProcessing;
					Com_Submit.ajaxSubmit = doSubmit;
				} else {
					on(form, "submit", onsubmit);
				}
			};
			return {
				ajaxForm: ajaxForm,
				
				load: function(id, require, load) {
					require(["dojo/domReady!"], function() {
						ajaxForm("[name='" + id + "']", {
							back: true
						});
						if (load)
							load();
					});
				}
			};
		});
},
'sys/mobile/js/mui/dialog/Tip':function(){
define(	["dojo/_base/declare", "dijit/_WidgetBase", "dojo/_base/lang",
				"dojo/dom-class", "dojo/dom-construct", "dojo/dom-style",
				"dojo/text!mui/dialog/tip.html", "mui/dialog/_DialogBase",
				"dojo/html","dojo/window",
		        "dojo/touch",
		        "dojo/_base/event",
		        "dojo/on"], function(declare, WidgetBase, lang, domClass,
				domConstruct, domStyle, tmpl, _DialogBase, html, win, touch, event, on) {

			var claz = declare('mui.dialog.Tip', [_DialogBase], {

						icon : null,
						text : null,
						time : 2300,
						callback : null,
						cover: false,
						coverNode: null,

						buildRendering : function() {
							this.textNode = domConstruct.create('span', {
										innerHTML : this.text
									});
							if(this.icon){
								this.iconNode = domConstruct.create('div', {
											className : this.icon
										});
							}
							var self = this;
							var dhs = new html._ContentSetter({
										parseContent : true,
										onBegin : function() {
											this.content = this.content
													.replace(/!{text}/g,
															self.textNode.outerHTML);
											if(self.iconNode){
												this.content = this.content
														.replace(/!{icon}/g,
																self.iconNode.outerHTML);
											}else{
												this.content = this.content.replace(/!{icon}/g,
														'');
											}
											this.inherited("onBegin",
															arguments);
										}
									});
							this.containerNode = domConstruct.create('div', {
										'className' : 'muiDialogTip'
									}, document.body, 'last');
							var winBox = win.getBox();
							domStyle.set(this.containerNode,{'max-width':(winBox.w*0.75) + 'px','max-height':winBox.h + 'px'});
							dhs.node = this.containerNode;
							dhs.set(tmpl);
							var _self = this;
							dhs.parseDeferred.then(function() {
								_self.defer(function(){//bug 加延时的原因是ios渲染速度慢致使left,top计算不准确
									var left = (winBox.w - _self.containerNode.offsetWidth)/2;
									var top = (winBox.h - _self.containerNode.offsetHeight)/2;
									domStyle.set(_self.containerNode,{'top':top + 'px', 'left': left + 'px'});
								},320);
							});
							dhs.tearDown();
							this.inherited(arguments);
						},
						
						_initCoverNode: function() {
							if (this.coverNode) {
								return;
							}
							this.coverNode = domConstruct.create("div",{className:'muiButtonAfter'}, document.body,'last');
							on(this.coverNode, touch.press, event.stop);
							on(this.coverNode, touch.move, event.stop);
							on(this.coverNode, touch.release, event.stop);
							on(this.coverNode, touch.cancel, event.stop);
						},

						show : function() {
							domStyle.set(this.domNode, {
								display : ""
							});
							domStyle.set(this.containerNode, {
										opacity : 1
									});
							if (this.cover) {
								this._initCoverNode();
								domStyle.set(this.coverNode, "display", "");
							}
							if (this.time > -1) {
								setTimeout(lang.hitch(this, this.hide), this.time);
							}
							return this.inherited(arguments);
						},

						hide : function(destroy) {
							domStyle.set(this.containerNode, {
										opacity : 0
									});
							domStyle.set(this.domNode, {
								display : "none"
							});
							if (this.cover) {
								this._initCoverNode();
								domStyle.set(this.coverNode, "display", "none");
							}
							if (this.callback)
								this.callback.call();
							this.inherited(arguments);
							if (destroy === false)
								return;
							setTimeout(lang.hitch(this, this.destroy), 1000);
						}
					});
			
			var pTip = declare([claz], {
				icon: "mui mui-loading mui-spin",
				time: -1, 
				cover: true,
				text: "处理中...",
				hide : function() {
					this.inherited(arguments, [false]);
				}
			});
			
			var _processing = new pTip();
			
			setTimeout(function() {_processing.hide();}, 500); // 需要保证计算位置准确

			return {
				tip : function(options) {
					return new claz(options).show();
				},
				success : function(options) {
					return new claz(lang.mixin(options, {
								icon : 'mui mui-success'
							})).show();
				},
				fail : function(options) {
					return new claz(lang.mixin(options, {
								icon : 'mui mui-wrong'
							})).show();
				},
				processing: function(text) {
					if (text)
						_processing.text = text;
					return _processing;
				},
				Tip: claz
			};

		})
},
'sys/mobile/js/mui/view/ViewBanner':function(){
define(["dojo/_base/declare","dojo/_base/lang", "dijit/_WidgetBase",
        "dojo/dom-construct"],function(declare,lang,WidgetBase,domConstruct){
	
		return declare("mui.view.ViewBanner",[WidgetBase],{
			docIsIntroduced:'false',
			bgImg:'',
			
			buildRendering:function(){
				this.inherited(arguments);
				if(this.bgImg){
					this.containerNode = domConstruct.toDom("<div style='background:url(" + this.bgImg + ") no-repeat left top;background-size:cover;' class='muiViewBanner'></div>");
					domConstruct.place(this.containerNode, this.domNode);
				}else{
					this.containerNode = domConstruct.create('div', {className : 'muiViewBanner'}, this.domNode);
				}
				this.buildInternalRender();
			},
			buildInternalRender:function(){
				this.leftInfo = domConstruct.create('div', {className : 'leftInfo'}, this.containerNode);
				if(this.icon){
					//用户头像
					var personBox = domConstruct.create("span",{className:"figure"},this.leftInfo);
					domConstruct.create("img", { className: "muiSummaryImg",src:this.icon}, personBox);
				}else{
					//自定义列表图标
					var viewIcon = this.viewIcon? this.viewIcon : "mui-bookLogo";
					var span = domConstruct.toDom("<span class='figure'><i class='mui '" + viewIcon + "></i></span>");
					domConstruct.place(span, this.leftInfo);
				}
				
				this.rightInfo = domConstruct.create('div', {className : 'rightInfo'}, this.containerNode);
				
				if(this.docIsIntroduced=='true'){
					this.docSubject = "<span class='muiEssence muiProcessStatusBorder'>精</span> " +this.docSubject;
				}
				domConstruct.create("span",{className:"title",innerHTML:this.docSubject},this.rightInfo);
				
				var ul = domConstruct.create("ul",{},this.rightInfo);
				if(this.docStatus>='30' && this.docPublishTime){
					var li = domConstruct.toDom("<li><i class='mui mui-todo_date'></i>" + this.docPublishTime + "</li>");
					domConstruct.place(li, ul);
				}
				if(this.creator){
					var li = domConstruct.toDom("<li><i class='mui mui-todo_person'></i>" + this.creator + "</li>");
					domConstruct.place(li, ul);
				}
				if(this.docStatus>='30' && this.docReadCount){
					var li = domConstruct.toDom("<li><i class='mui mui-eyes'></i>" + this.docReadCount + "</li>");
					domConstruct.place(li, ul);
				}
			},
			startup:function(){
				if(this._started){ return; }
				this.inherited(arguments);
			}
		});
});
},
'sys/mobile/js/mui/device/kk/attachment':function(){
/*
 * 附件上传类
 */
define( [ "dojo/_base/declare","dojo/topic", "dojo/request", "mui/device/_attachment","mui/device/kkapi"],
		function(declare, topic , request, attachment) {
			return declare("mui.device.kk.attachment", [ attachment ], {
				
				_uploadFile : function(file, userKey) {
					var self = this;
					if(window.console){
						window.console.log("UploadFile begin..");
					}
					window.kkApi.uploadFile(file, this.uploadurl, userKey, function(fileInfo){
						file.filekey = fileInfo.filekey;
						file.status = 2;
						self.uploadSuccess(file,fileInfo);
					},function(loaded){
						file.status = 1;
						self.uploadProcess(loaded,file);
					},function(errorInfo){
						file.status = 0;
						self.uploadError(file,errorInfo);
					});
				}
			});
		});

},
'sys/mobile/js/mui/dialog/BarTip':function(){
define(	["dojo/_base/declare", "dojo/_base/lang",
				"dojo/dom-class", "dojo/dom-construct", "dojo/dom-style",
				"mui/dialog/_DialogBase","dojo/_base/window", "dojo/_base/fx", "mui/util"], 
			function(declare, lang, domClass,
				domConstruct, domStyle, _DialogBase, win, fx, util) {

			var BarTip = declare('mui.dialog.BarTip', [_DialogBase], {
				
						baseClass: "muiDialogBarTip mblIn",

						icon : "mui mui-label",
						text : null,
						time : -1,

						buildRendering : function() {
							this.inherited(arguments);

							this.textNode = domConstruct.create('span', {
										innerHTML : this.text
									});
							
							this.iconNode = domConstruct.toDom("<div class='iconNode'></div>");
							domConstruct.place(domConstruct.create('i', {
								className : this.icon
							}), this.iconNode, "last");
							
							this.closeNode = domConstruct.toDom("<div class='closeNode'><i class='mui mui-close'></i></div>");
							
							var containerNode = domConstruct.toDom("<div class='containerNode'></div>");
							
							
							domConstruct.place(this.iconNode, containerNode, "last");
							domConstruct.place(this.textNode, containerNode, "last");
							domConstruct.place(this.closeNode, containerNode, "last");
							domConstruct.place(containerNode, this.domNode, "last");
							
						},
						
						postCreate: function() {

							domConstruct.place(this.domNode, win.body(), "last");
							
							this.connect(this.closeNode, "click", function() {
								this.hide();
							});
							domStyle.set(this.textNode, "width", (util.getScreenSize().w - 50) + "px");
						},

						show : function() {
						    domStyle.set(this.domNode, "opacity", "0");
							fx.fadeIn({
						        node: this.domNode,
						        duration: 1000
						    }).play(300);
							return this.inherited(arguments);
						},

						hide : function() {
							var domNode = this.domNode;
							fx.fadeOut({
						        node: this.domNode,
						        duration: 1000,
						        end: function() {
									domStyle.set(domNode, "display", "none");
						        }
						    }).play();
							return this.inherited(arguments);
						}
					});

			return {
				tip : function(options) {
					return new BarTip(options).show();
				},
				BarTip: BarTip
			};

		})
},
'sys/mobile/js/mui/form/validate/Reminder':function(){
define([ "dojo/_base/declare", "dojo/_base/lang", "dojo/dom-construct", 
         "dojo/dom-style", "dojo/dom-attr", "dojo/dom-geometry", "dojo/query"], 
		function(declare, lang, domConstruct, domStyle,  domAttr, domGeometry, query) {
	var Reminder = declare("mui.form.validate.Reminder", null, {
		//提示宿主dom对象
		element : null,
		
		//提示信息
		error : null,
		
		//提示信息中对应参数
		context:{},
		
		serialAttrName:'__validate_serial',
		
		_prifix:'reminder_',
		
		constructor:function(element, error, context){
			this.inherited(arguments);
			this.element = element;
			this.error = error;
			this.context = context;
			this.reminderId =  this._prifix + domAttr.get(this.element , this.serialAttrName);
		},
		
		show:function(){
			var minder = query("#" + this.reminderId);
			if(minder.length>0){
				this.renderDom = minder[0];
				this._reDrawErrorMsg();
			}else{
				this._buildRenderDom(this.reminderId);
			}
			//var box = domGeometry.position(this.element,true);
			domStyle.set(this.renderDom,{'display':'block'});
		},
		
		hide:function(){
			var minder = query("#" + this.reminderId);
			if(minder.length>0){
				this.renderDom = minder[0];
				domStyle.set(this.renderDom,{'display':'none'});
			}
		},
		
		_reDrawErrorMsg:function(){
			var errorMsgDoms = query("#" + this.reminderId +" .muiValidateMsg");
			if(errorMsgDoms.length>0){
				domConstruct.empty(errorMsgDoms[0]);
				errorMsgDoms[0].innerHTML = this._resolverError();
			}
		},
		
		_buildRenderDom: function(id){
			this.renderDom = domConstruct.create("div", {'className':'muiValidate','id':id}, this.element,'after');
			this.contentDom = domConstruct.create("div", {className:'muiValidateContent'}, this.renderDom);
			domConstruct.create("div", {'className':'muiValidateShape'}, this.contentDom);
			var infoDiv = domConstruct.create("div", {className:'muiValidateInfo'}, this.contentDom);
			domConstruct.create("span", {'className':'muiValidateIcon'}, infoDiv);
			domConstruct.create("span", {'className':'muiValidateMsg',innerHTML:this._resolverError()}, infoDiv);
		},
		
		_resolverError:function(){
			return this.error.replace(/\{([\w\.]*)\}/gi, lang.hitch(this,function (_var , _key) {
				var value = null;	
				if(this.context)
			         value = this.context[_key];  
			     return (value === null || value === undefined) ? "" : ("<span class='muiValidateTitle'>" + value + "</span>");  
			  }));
		}
	});
	return Reminder;
});
},
'sys/mobile/js/mui/form/_SelectBase':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "mui/form/_FormBase",
		"dojo/dom-class", "dojo/_base/lang", "mui/util" ], function(declare,
		domConstruct, _FormBase, domClass, lang, util) {
	var _field = declare("mui.form._SelectBase", [ _FormBase ], {

		// 构建值区域
		_buildValue : function() {
			this.inherited(arguments);
			var setBuildName = 'build' + util.capitalize(this.showStatus);
			this[setBuildName] ? this[setBuildName]() : '';
			var setMethdName = this.showStatus + 'ValueSet';
			this.showStatusSet = this[setMethdName] ? this[setMethdName]
					: new Function();
		},

		buildRendering : function() {
			this.inherited(arguments);
			domClass.add(this.domNode, 'muiFormSelect');
			this.inputContent = domConstruct.create('div', {
				className : 'muiFormSelectContnet'
			}, this.valueNode);
			if (this.label)
				domClass.add(this.valueNode, 'muiFormInputArea');

			this._buildValue();
		},

		_setValueAttr : function(value) {
			this.showStatusSet(value);
			this.inherited(arguments);
		},

		// 构建编辑视图
		buildEdit : function() {
			domClass.add(this.inputContent, 'edit');
		},
		buildOptIcon:function(optContainer){
			domConstruct.create('span', {}, optContainer);
		}

	});
	return _field;
});
},
'sys/mobile/js/mui/list/item/_ListLinkItemMixin':function(){

define([
        "dojo/_base/declare",
        "dojo/dom-class",
        "dojo/on",
      	"mui/util",
      	"dojo/_base/window",
	], function(declare, domClass, on, util, win) {
	
	return declare("mui.list.item._ListLinkItemMixin", null, {
		
		hrefTarget: '_self',
		_selClass: "mblListItemSelected",
		_delayedSelection: true,
		_selStartMethod: "touch",
		
		handleSelection: function(/*Event*/e){
			this.set("selected", true);
		},
		
		makeLinkNode: function(linkNode) {
			linkNode.href = this.makeUrl();
			linkNode.target = "_self";
			on(linkNode, 'click', function(event) {
				event.preventDefault();
				return false;
			});
		},
		
		makeUrl: function() {
			var url = util.formatUrl(this.href);
			if (url.indexOf('?') > -1) {
				url += '&_mobile=1';
			} else {
				url += '?_mobile=1';
			}
			return url;
		},
		
		makeTransition: function(e) {
			var url = this.makeUrl();
			this.defer(function(){
				this.set("selected", false);
			}, 100);
			win.global.open(url, this.hrefTarget || "_self");
		},

		_onClick: function(e){
			this.defaultClickAction(e);
		},
		
		_setSelectedAttr: function(selected){
			this.inherited(arguments);
			domClass.toggle(this.domNode, this._selClass, selected);
		}
	});
});
},
'sys/mobile/js/mui/search/SearchBar':function(){
define(
		[ "dojo/_base/declare", "dijit/_Contained", "dijit/_Container",
				"dijit/_WidgetBase", "dojo/dom-class", "dojo/dom-construct",
				"dojo/dom-style", "dojo/topic", "dojo/query", "dojo/window",
				"mui/search/_SearchPrompt", "dojo/_base/lang", "mui/util", "mui/i18n/i18n!sys-mobile",
				],
		function(declare, Contained, Container, WidgetBase, domClass,
				domConstruct, domStyle, topic, query, win, SearchPrompt, lang, util, Msg) {

			return declare(
					"mui.search.SearchBar",
					[ WidgetBase, Container, Contained ],{
						
						//模块标识
						modelName : "",

						//搜索请求地址
						searchUrl : "/sys/ftsearch/mobile/index.jsp?keyword=!{keyword}&modelName=!{modelName}",
						
						//搜索结果直接挑转至searchURL界面
						jumpToSearchUrl:true,
						
						//搜索关键字
						keyword : "",
						
						//显示高度
						height : "inherit",
						
						//提示文字
						placeHolder : "搜索",

						//是否需要输入提醒
						needPrompt:true,
						
						buildRendering : function() {
							this.inherited(arguments);
							domClass
									.replace(this.containerNode, "muiSearchBar");
							var searchContainer = null;
							var nodelist = query(this.containerNode).parent(
									"form");
							if (nodelist.length == 0) {
								this._searchForm = domConstruct.create("form",
										{}, this.containerNode);
								searchContainer = domConstruct.create("div", {
									className : "muiSearchBarContainer"
								}, this._searchForm);
							} else {
								searchContainer = domConstruct.create("div", {
									className : "muiSearchBarContainer"
								}, this.containerNode);
								this._searchForm = nodelist[0];
							}
							var searchArea = domConstruct.create("div", {
								className : "muiSearchDiv"
							}, searchContainer);
							this._searchContainer = searchContainer;

							domConstruct.create("div", {
								className : "muiSearchIcon mui mui-search"
							}, searchArea);

							this.clearNode = domConstruct.create("div", {
								className : "muiSearchClear mui mui-fail"
							}, searchArea);

							this.searchNode = domConstruct.create("input", {
								className : "muiSearchInput",
								type : "search",
								value : this.keyword,
								placeHolder : (this.placeHolder?this.placeHolder:Msg['mui.search.search'])
							}, searchArea);

							this.buttonArea = domConstruct.create("div", {
								className : "muiSearchBtnDiv"
							}, searchContainer);

							this.cancelNode = domConstruct.create("div", {
								className : "muiSearchCancelBtn",
								innerHTML : Msg['mui.search.cancel']
							}, this.buttonArea);
							domStyle.set(this.buttonArea, {
								display : 'none'
							});
							if (this.keyword != '') {
								domStyle.set(this.clearNode, {
									display : 'inline-block'
								});
							}
						},
						
						postCreate : function() {
							this.inherited(arguments);
							this.connect(this._searchForm, "onsubmit",
									"_onSearch");
							this.connect(this.searchNode, "onfocus",
											"_onfocus");
							this.connect(this.searchNode, "onclick",
								"_onfocus");
							this.subscribe("/mui/searchbar/show", "_onfocus");
							this.connect(this.searchNode, "oninput",
									"_onChange");
							this.connect(this.clearNode, "onclick", "_onClear");
							this.connect(this.cancelNode, "onclick",
									"_onCancel");
							this.subscribe("/mui/search/keyword","_fillKeyword");
							this.subscribe("/mui/search/submit", "_onSubmit");
						},

						startup : function() {
							if (this._started)
								return;
							this.inherited(arguments);
							var h;
							if (this.height === "inherit") {
								if (this.domNode.parentNode) {
									h = this.domNode.parentNode.offsetHeight + "px";
								}
							} else if (this.height) {
								h = this.height;
							}
							if (h) {
								domStyle.set(this.domNode,{'height':h,'line-height':h});
								domStyle.set(this._searchForm,{'height':h,'line-height':h});
								var marginTop = domStyle.get(this._searchForm,"height")- domStyle.get(this._searchContainer,"height");
								marginTop = (marginTop/2);
								domStyle.set(this._searchContainer,{'margin-top':marginTop + 'px'});
							}
						},

						_fillKeyword : function(srcObj,ctx) {
							if (ctx) {
								var data = ctx;
								this.searchNode.value = data.keyword;
								this._onSearch();
							}
						},

						_onfocus : function(srcObj) {
							this._searchFocus = true;
							domStyle.set(this.buttonArea, {
								display : 'table-cell'
							});
							if (!this._prompt && this.needPrompt) {
								var promptNode = domConstruct.create("div", {
									className : "muiSearchPrompt"
								}, document.body);
								var topH = domStyle.get(this.containerNode,"height")+1;
								domStyle.set(promptNode, {
									top : topH + "px",
									height: (win.getBox().h -topH) + "px"
								});
								this._prompt = new SearchPrompt( {
									srcNodeRef : promptNode,
									prefix : this.modelName
								});
								this._prompt.startup();
							}
							if(this._prompt)
								this._prompt.show();
							var _self = this;
							var tmpEvt = this.connect(document.body, "touchend", function(evt){
								if(evt.target != _self.searchNode){
									setTimeout(function(){  
										_self.searchNode.blur(); 
									_self.disconnect(tmpEvt);
									},350);
								}
							});
							this._eventStop(srcObj);
						},

						_onChange : function(evt) {
							if (this.searchNode.value != '') {
								domStyle.set(this.clearNode, {
									display : 'inline-block'
								});
							} else {
								domStyle.set(this.clearNode, {
									display : 'none'
								});
							}
						},

						_onClear : function(evt) {
							this.searchNode.value = "";
							domStyle.set(this.clearNode, {
								display : 'none'
							});
						},

						_onCancel : function(evt) {
							this._onClear(evt);
							this.defer(function() {
								this._hidePrompt();
								topic.publish("/mui/search/cancel",this);
							}, 450);
						},

						_hidePrompt : function() {
							domStyle.set(this.buttonArea, {
								display : 'none'
							});
							if (this._prompt) {
								this._prompt.hide();
							}
						},

						_eventStop : function(evt) {
							if (evt) {
								if (evt.stopPropagation)
									evt.stopPropagation();
								if (evt.cancelBubble)
									evt.cancelBubble = true;
								if (evt.preventDefault)
									evt.preventDefault();
								if (evt.returnValue)
									evt.returnValue = false;
							}
						},

						_onSubmit : function(srcObj , ctx) {
							if(ctx && ctx.url && this.jumpToSearchUrl){
								this.searchNode.value = this.keyword;
								this._hidePrompt();
								location = ctx.url;
							}
						},

						_onSearch : function(evt) {
							this.searchNode.blur(); 
							this._eventStop(evt);
							if (this.searchNode.value != '') {
								var arguObj = lang.clone(this);
								arguObj.keyword = this.searchNode.value;
								var url =  util.formatUrl(util.urlResolver(
										this.searchUrl, arguObj));
								topic.publish("/mui/search/submit",this, {keyword: arguObj.keyword , url:url});
							}
							return false;
						}
					});
		});

},
'sys/mobile/js/mui/datetime/_TimeMixin':function(){
define([ "dojo/_base/declare", "dojo/text!mui/datetime/tmpl_time.jsp",
		"dojo/dom-class", "dojo/dom-construct",
		"mui/datetime/_EditDateTimeMixin" ], function(declare, tmpl, domClass,
		domConstruct, _EditDateTimeMixin) {
	var claz = declare("mui.datetime._TimeMixin", _EditDateTimeMixin, {

		type : 'time',
		
		tmpl : tmpl,
		
		title : '时间选择',
		
		_contentExtendClass:'muiTimeDialogDisContent',

		_buildValue : function() {
			this.inherited(arguments);
			domClass.add(this.inputContent, 'muiTimeInputContnet');
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/table/ScrollableHViewArea':function(){
define( [ "dojo/_base/declare","dijit/_WidgetBase", "dojo/dom-style", "dojo/touch"],
		function(declare, WidgetBase, domStyle, touch) {
	
	return declare("mui.table.ScrollableHViewArea", [WidgetBase], {
		
	
		buildRendering : function() {
			this.inherited(arguments);
			domStyle.set(this.domNode,{
					'overflow-x':'auto',
					'overflow-y':'hidden'
				});
		},
		
		postCreate : function() {
			this.inherited(arguments);
			var scrollStartPosX = -1;
			this.connect(this.domNode, touch.press, function(e){
				scrollStartPosX = this.domNode.scrollLeft + e.pageX;
				e.preventDefault();
			});
			this.connect(this.domNode, touch.move, function(e){
				if(scrollStartPosX != -1){
					var pos = (scrollStartPosX - e.pageX);
					this.domNode.scrollLeft = pos;
				}
				e.preventDefault();
			});
		},
		
		startup : function() {
			this.inherited(arguments);
		}
	});
});
},
'sys/mobile/js/mui/tabbar/TabBarButton':function(){
define(	["dojo/_base/declare", "dojox/mobile/TabBarButton", "dojo/dom-class",
				"dojo/dom-style", "dojox/mobile/Badge", "mui/util",
				"dojo/_base/lang"], function(declare, TabBarButton, domClass,
				domStyle, Badge, util, lang) {

			return declare("mui.tabbar.TabBarButton", [TabBarButton], {
						inheritParams : function() {
							this.inherited(arguments);
							// 修复疑似dojo重复绘制icon缺陷
							return !!this.getParent();
						},
						
						transition:"slide",
						
						colSize: 1,

						href : null,

						align : 'center',
						
						tabIndex : '',

						_setAlignAttr : function(align) {
							this.align = align;
						},

						buildRendering : function() {
							this.inherited(arguments);
							if (!this.label && this.getParent() != null)
								domClass.add(this.getParent().domNode,
										'muiNavBarButton');
						},

						startup : function() {
							if (this._started)
								return;

							if (this.align != 'center')
								domStyle.set(this.iconDivNode, {
											"float" : this.align
										});
							if (this.iconDivNode) {
								domClass.add(this.iconDivNode, 'mui-scale');
								this.defer(lang.hitch(this, function() {
													domClass.remove(
															this.iconDivNode,
															'mui-scale');
												}), 500);
							}
							this.inherited(arguments);
						},

						// 重写数字结构
						_setBadgeAttr : function(value) {
							if (!this.badgeObj) {
								this.badgeObj = new Badge();
								domStyle.set(this.badgeObj.domNode, {
											position : 'absolute',
											left : '80%',
											top : '2px'
										});
							}
							// 出现三位数字显示为99+
							if (parseInt(value) >= 100)
								this.value = value = '99+';
							this.badgeObj.setValue(value);
							if (value) {
								this.iconDivNode
										.appendChild(this.badgeObj.domNode);
							} else {
								if (this.domNode === this.badgeObj.domNode.parentNode) {
									this.domNode
											.removeChild(this.badgeObj.domNode);
								}
							}
						},

						onClick : function() {
							if (this.href) {
								location.href = util.formatUrl(this.href);
								return false;
							}
							this.inherited(arguments);
						}

					});
		});
},
'sys/mobile/js/mui/category/CategoryItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/category/CategoryItemMixin"
	], function(declare, _TemplateItemMixin, CategoryItemMixin) {
	
	return declare("mui.category.CategoryItemListMixin", [_TemplateItemMixin], {
		
		itemRenderer : CategoryItemMixin
		
	});
});
},
'sys/mobile/js/mui/person/PersonDetailMixin':function(){
/**提供默认详细人员列表 **/
define([
    "dojo/_base/declare", 
    "dojo/_base/array",
    "dojo/text!./person_detail.html",
    'dojo/dom-construct',
    "dojox/mobile/TransitionEvent",
    'dojo/parser',
    'dojo/_base/lang',
    'dojo/query'
    ],function(declare,array,detailTemplate,domConstruct,TransitionEvent,parser,lang,query){
	
	return declare("mui.person.PersonDetailMixin", null, {
		
		//详细页面属性
		detailTitle:'',
		detailUrl:'',
		detailTemplateString:detailTemplate,
		detailView:null,
		
		defaultDetailUrl:'/sys/organization/mobile/address.do?method=personDetailList',
		
		buildRendering : function(){
			this.inherited(arguments);
			if(this.personId && !this.detailUrl){
				this.detailUrl=this.defaultDetailUrl+'&personId='+this.personId;
			}
		},
		
		openDeatailView : function(){
			//未初始化,先创建一个默认的详细列表
			if(!this.detailView){
				var self=this;
				this.detailTemplateString = lang.replace(this.detailTemplateString,{
					title:this.detailTitle,
					url:this.detailUrl
				});
				
				parser.parse(domConstruct.create('div',{ innerHTML:this.detailTemplateString },query('#content')[0] ,'last'))
					.then(function(widgetList) {
					
						array.forEach(widgetList, function(widget, index) {
							if(index == 0){
								self.initWidget(widget);
								self.detailView=widget;
							}
						});
						var opts = {
							transition : 'slide',
							moveTo:self.detailView.id
						};
						new TransitionEvent(self.personMoreNode || document.body ,  opts ).dispatch();
				});
			}else{
				var opts = {
					transition : 'slide',
					moveTo:this.detailView.id
				};
				new TransitionEvent(this.personMoreNode || document.body ,  opts ).dispatch();
			}
		},
		
		initWidget : function(widget){
			widget.hide();//隐藏
			widget.placeAt(widget.domNode.parentNode,'after');//移除不必要的父节点,保证view的节点与其他view在同一层
			//绑定返回事件
			this.backView=widget.getShowingView();
			this.connect(query('.personHeaderReturn',widget.domNode)[0],'click','backOpt');
		},
		
		backOpt : function(){
			var opts = {
				transition : 'slide',
				moveTo:this.backView.id,
				transitionDir:-1
			};
			new TransitionEvent(document.body,  opts ).dispatch();
		}
		
	});
	
});
},
'sys/mobile/js/mui/property/PropertyFilterCancel':function(){
define([ "dojo/_base/declare", "dojo/topic" ], function(declare, topic) {

	return declare("mui.property.PropertyFilterCancel", null, {

		show : function(evt) {
			topic.publish('/mui/property/hide', this, null);
		}
	});
});

},
'sys/mobile/js/mui/search/_SearchPrompt':function(){
define( [ "dojo/_base/declare", "dojo/_base/array", "dijit/_WidgetBase",
		"dojo/json", "dojo/_base/lang", "dojo/topic", "dojo/dom-construct",
		"dojo/dom-style", "dojo/dom-class", "dojox/mobile/_css3", 
		"mui/util", "dojo/touch", "mui/i18n/i18n!sys-mobile"], function(declare, array, WidgetBase, JsonFun, lang,
		topic, domConstruct, domStyle, domClass, css3 , util , touch, Msg) {
	return declare("mui.search._SearchPrompt", [ WidgetBase], {

		_storageKey : '_muiSearchKeywords',

		_storageItem : [],
		
		prefix : '',
		
		langSetting:{
			noRecord : Msg['mui.search.norecord'],
			clearRecord : Msg['mui.search.clearrecord']
		},

		buildRendering : function() {
			this.domNode = this.containerNode = this.srcNodeRef
					|| domConstruct.create('div', {
						className : 'muiSearchPrompt'
					});
			this.inherited(arguments);
			this.histroyRecord = domConstruct.create("div", {
				className : "muiSearchRecord muiSearchNoRecord",
				innerHTML : this.langSetting.noRecord
			}, this.containerNode);
			this.operateArea = domConstruct.create("div", {
				className : "muiSearchOpt"
			}, this.containerNode);
			this.clearNode = domConstruct.create("div", {
				className : "muiSearchClearBtn",
				innerHTML : this.langSetting.clearRecord
			}, this.operateArea);
		},

		postCreate : function() {
			this.inherited(arguments);
			this.connect(this.clearNode, "onclick", "_clearRecord");
			this.subscribe("/mui/search/submit", "_addRecord");
		},

		startup : function() {
			if (this._started)
				return;
			this.inherited(arguments);
			util.disableTouch(this.domNode , touch.move );
		},
		
		show : function() {
			this._drawRecord();
			domStyle.set(this.containerNode, {
				display : 'block'
			});
			this.defer(function(){
			domStyle.set(this.containerNode,
					css3.name('transform'),
					'translate3d(0, 0, 0)');
			},10);
		},
		
		hide : function() {
			domStyle.set(this.containerNode,
					css3.name('transform'),
					'translate3d(100%, 0, 0)');
			this.defer(function() {
					domStyle.set(this.containerNode, {
						display : 'none'
					});
				}, 510);
		},
		_drawRecord : function(append) {
			if(!this._drawed){//第一次以及缓存变化时才会绘制
				if (!append) {
					domConstruct.empty(this.histroyRecord);
				}
				if (window.localStorage) {
					var storeKey = this.prefix + this._storageKey;
					var str = window.localStorage.getItem(storeKey);
					if (str && str != '') {
						this._storageItem = JsonFun.parse(str);
						if (this._storageItem.length > 0) {
							for ( var i = 0; i < this._storageItem.length; i++) {
								var rItem = domConstruct.create("div", {
									className : "muiSearchRecordItem",
									innerHTML : this._storageItem[i]
								}, this.histroyRecord);
								this.connect(rItem, "onclick", "_selectRecord");
							}
							domStyle.set(this.clearNode, {
								display : 'inline-block'
							});
							domClass.remove(this.histroyRecord,"muiSearchNoRecord");
						}
					}else{
						this.histroyRecord.innerHTML = this.langSetting.noRecord;
						domStyle.set(this.clearNode, {
							display : 'none'
						});
						domClass.add(this.histroyRecord,"muiSearchNoRecord");
					}
				}
				this._drawed = true;
			}
		},
		_addRecord : function(srcObj,ctx) {
			if (window.localStorage) {
				var keyword = ctx.keyword;
				var storeKey = this.prefix + this._storageKey;
				if (this._storageItem.length == 0) {
					this._storageItem.push(keyword);
				} else if (this._storageItem.length <= 10) {
					var idx = array.indexOf(this._storageItem, keyword);
					if (idx > -1) {
						this._storageItem.splice(idx, 1);
					}
					this._storageItem.unshift(keyword);
				}
				if (this._storageItem.length > 10) {
					this._storageItem = this._storageItem.slice(0, 10);
				}
				try {
					window.localStorage.setItem(storeKey, JsonFun
							.stringify(this._storageItem));
				} catch (e) {
					if(window.console)
						console.log(e.name);
				}
				this._drawed = false;
			}
		},
		_clearRecord : function(evt) {
			if (window.localStorage) {
				this._storageItem = [];
				var storeKey = this.prefix + this._storageKey;
				window.localStorage.removeItem(storeKey);
				this._drawed = false;
				this._drawRecord();
			}
		},
		_selectRecord : function(evt) {
			var target = evt.target || evt.srcElement;
			topic.publish("/mui/search/keyword", this, {
				keyword : target.innerHTML
			});
		}
	});
});

},
'sys/mobile/js/mui/form/editor/plugins/face/Plugin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "./emoji",
				"dojo/dom-style", "dojo/_base/lang", "dojo/dom-attr",
				"dojo/dom-class", "dojo/text!../tmpl/panelV.html", "dojo/html",
				"mui/util", "dojo/topic",
				"mui/form/editor/plugins/EditorPluginBaseMixin" ],
		function(declare, domConstruct, emoji, domStyle, lang, domAttr,
				domClass, tmpl, html, util, topic, EditorPluginBaseMixin) {

			function map(array, fn) {
				var length = array.length;
				var result = [];
				while (length--) {
					result[length] = fn(array[length]);
				}
				return result;
			}

			function ucs2decode(string) {
				var output = [], counter = 0, length = string.length, value, extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) {
							output.push(((value & 0x3FF) << 10)
									+ (extra & 0x3FF) + 0x10000);
						} else {
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}

			function ucs2encode(array) {
				return map(
						array,
						function(value) {
							var output = '';
							if (value > 0xFFFF) {
								value -= 0x10000;
								output += String
										.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
								value = 0xDC00 | value & 0x3FF;
							}
							output += String.fromCharCode(value);
							return output;
						}).join('');
			}

			return declare(
					"mui.form.editor.plugins.face.Plugin",
					[ EditorPluginBaseMixin ],
					{

						type : 'face',

						icon : 'mui-editor-face',

						event : function(evt) {
							this._faceShow(evt)
						},

						_faceIsInit : false,

						constructor : function(options) {
							this.inherited(arguments);
						},

						startup : function() {
							this.editor.formatContent.push(this._faceFormat);
						},

						// 格式化表情，将输入法表情置换为图片
						_faceFormat : function(html) {
							if (!html)
								return "";
							var str = html;
							var unicodes = ucs2decode(str);
							var unicodeString = '';
							var kinds = emoji.getEmojiList();

							var hasEmoji = false;
							for (var now = 0; now < unicodes.length;) {
								var unicode = unicodes[now];
								var isEmoji = false;
								var isEmojiUnicode = false;
								if (unicode >= 0xE000 && unicode < 0xE538) {
									unicodeString = unicode.toString(16);
									isEmoji = true;
								} else if ((unicode >= 0x2196 && unicode <= 0x2199)
										|| (unicode == 0x25C0 || unicode == 0x25B6)
										|| (unicode == 0x23EA || unicode == 0x23E9)
										|| (unicode >= 0x2600 && unicode <= 0x3299)
										|| (unicode >= 0x1f000 && unicode <= 0x1f700)) {
									unicodeString = unicode.toString(16);
									isEmoji = true;
									isEmojiUnicode = true;
								} else {
									if (unicode == 0x20e3) {
										if (now > 0) {
											var preCode = unicodes[now - 1];
											if (preCode == 0x23
													|| preCode >= 0x30
													&& preCode <= 0x39) {
												isEmoji = true;
												isEmojiUnicode = true;
												--now;
												unicode = preCode;
											}
										}
									}
								}

								if (isEmoji) {
									hasEmoji = true;
									for (var i = 0; i < kinds.length; ++i) {
										var kind = kinds[i];
										for (var j = 0; j < kind.length; ++j) {
											var emo = kind[j];
											var foundCount = 0;
											var unicodeEmoji = emo[1];
											if (isEmojiUnicode) {
												var isArray = (typeof unicodeEmoji != 'string');
												if (isArray
														&& now
																+ unicodeEmoji.length
																- 1 < unicodes.length) {
													for (var uindex = 0; uindex < unicodeEmoji.length; uindex++) {
														var unString = unicodes[now
																+ uindex]
																.toString(16);
														if (unString != unicodeEmoji[uindex]) {
															foundCount = 0;
															break;
														} else {
															foundCount++;
														}
													}
												} else if (!isArray
														&& emo[1] == unicodeString) {
													foundCount = 1;
												}
											} else if (!isEmojiUnicode
													&& emo[0] == unicodeString) {
												foundCount = 1;
											}

											if (foundCount > 0) {
												var data = 'data:image/png;base64,'
														+ emo[2];
												var html = '<img src="' + data
														+ '"/>';
												var puny = ucs2decode(html);
												unicodes
														.splice(now, foundCount);
												for (var curr = 0; curr < puny.length; ++curr) {
													unicodes.splice(now, 0,
															puny[curr]);
													++now;
												}
												--now;
												break;
											}
										}
									}
								}
								++now;
							}
							if (hasEmoji) {
								return ucs2encode(unicodes);
							}
							return html;
						},

						// 构建表情选择面板
						_faceBuildPanel : function() {
							var facePanel = '';
							var emojis = emoji.getEmojiList();
							for (var i = 0; i < emojis.length; i++) {
								var _emoji = emojis[i];
								for (var j = 0; j < _emoji.length; j++) {
									facePanel += '<a href="javascript:;" class="muiEditorFaceItem"><img class="muiEditorFaceItemImg" src="data:image/png;base64,'
											+ _emoji[j][2] + '"></a>';
								}
							}
							var dhs = new html._ContentSetter({
								parseContent : true,
								cleanContent : true,
								node : this.faceNode,
								onBegin : function() {
									this.content = this.content.replace(
											/!{panel}/g, facePanel);
									this.inherited("onBegin", arguments);
								}
							});
							dhs.set(tmpl);
							dhs.tearDown();
						},

						show : function() {
							this.inherited(arguments);
							domStyle.set(this.faceNode, {
								'display' : 'block'
							});
							this.defer(function() {
								domStyle.set(this.faceNode, {
									'height' : this.panelHeight
								});
							}, 1);
						},

						hide : function() {
							this.inherited(arguments);
							domStyle.set(this.faceNode, {
								'height' : 0
							});
							this.defer(function() {
								domStyle.set(this.faceNode, {
									'display' : 'none'
								});
							}, 200);
						},

						_faceShow : function(evt) {
							if (this._isShow) {
								this.hide();
								return;
							}

							this._isShow = true;

							if (this._falseIsInit) {
								this.show();
								return;
							}

							this.iconNode = evt.target;

							this.faceNode = domConstruct.create('div', {
								className : 'muiEditorFace'
							}, this.editor.domNode, 'last');

							var t_h = this.editor.domNode.offsetHeight;
							this.panelHeight = '12rem';
							this
									.connect(
											this.faceNode,
											'click',
											lang
													.hitch(
															this,
															function(evt) {
																this.editor.__textNode
																		.blur();
																if (!this
																		._faceFireClick())
																	return;
																var target = evt.target;
																while (target) {
																	if (target.tagName == 'IMG') {
																		var src = domAttr
																				.get(
																						target,
																						'src');
																		this.editor
																				.insertElement(domConstruct
																						.create(
																								'img',
																								{
																									src : src,
																									className : 'muiEditorFaceImg',
																									'data-type' : 'face'
																								}));
																		break;
																	}
																	target = target.parentNode;
																}
															}));
							this._faceBuildPanel();
							this.show();
							this._falseIsInit = true;
						}
					});
		});
},
'sys/mobile/js/mui/form/_StoreFormMixin':function(){
define([ "dojo/_base/declare", "dojox/mobile/_StoreMixin",
		"dojo/store/JsonRest", "dojo/store/Memory", "dojo/_base/array" ],
		function(declare, StoreMixin, JsonRest, Memory, array) {
			var claz = declare("mui.form._StoreFormMixin", StoreMixin, {

				url : '',

				query : {},

				queryOptions : {},

				values : [],

				onComplete : function(items) {
					this.generateList(items);
				},

				addChild : function(item) {
				},

				generateList : function(items) {
					this.values = items;
					array.forEach(items, function(item, index) {
						var claz = this.createListItem(item);
						if (claz)
							this.addChild(claz);
					}, this);
				},

				createListItem : function(props) {
				},

				startup : function() {
					if (this._started)
						return;
					this.inherited(arguments);
					if (!this.store && !this.url)
						return;
					if (!this.store && this.url)
						var store = new JsonRest({
							target : this.url
						});
					else
						store = new Memory({
							data : this.store
						});
					this.setStore(store, this.query, this.queryOptions);
				}
			});
			return claz;
		});
},
'sys/mobile/js/mui/form/_GroupBase':function(){
define([ "dojo/_base/declare", "mui/form/_FormBase",
		"mui/form/_StoreFormMixin", "dojo/dom-construct" ], function(declare,
		_FormBase, _StoreFormMixin, domConstruct) {
	var _field = declare("mui.form._GroupBase", [ _FormBase, _StoreFormMixin ],
			{

				name : null,

				addValue : function(value) {

				},

				removeValue : function(value) {

				},

				/***************************************************************
				 * 构建隐藏域
				 **************************************************************/
				buildRendering : function() {
					this.inherited(arguments);
					if (this.edit) {
						this.hiddenNode = domConstruct.create('input', {
							type : 'hidden',
							name : this.name
						}, this.domNode);
					}
				},

				_setValueAttr : function(value) {
					this.inherited(arguments);
					if (this.edit)
						this.hiddenNode.value = value;
				}
			});
	return _field;

});
},
'sys/mobile/js/mui/list/JsonStoreList':function(){
define([
    "dojo/_base/declare",
	"dojox/mobile/EdgeToEdgeStoreList",
	"./_JsonStoreListMixin",
	'mui/list/_ListNoDataMixin'
	], function(declare, EdgeToEdgeStoreList, _JsonStoreListMixin,_ListNoDataMixin) {
	
	return declare("mui.list.JsonStoreList", [EdgeToEdgeStoreList, _JsonStoreListMixin,_ListNoDataMixin], {
		
	});
});
},
'sys/mobile/js/mui/property/filter/FilterAddress':function(){
define([ "dojo/_base/declare", "mui/property/filter/FilterBase",
		"dojo/dom-construct", "dojo/_base/array", "dojo/topic",
		"dojo/text!./address/tmpl.jsp", "dojo/html", "dojo/_base/lang" ],
		function(declare, FilterBase, domConstruct, array, topic, tmpl, html,
				lang) {
			var claz = declare("mui.property.FilterAddress", [ FilterBase ], {

				buildRendering : function() {
					this.inherited(arguments);
					var self = this;
					var dhs = new html._ContentSetter({
						parseContent : true,
						cleanContent : true,
						node : this.contentNode,
						onBegin : function() {
							this.content = lang.replace(this.content, {
								type : self.type,
								idField : self.name,
								nameField : self.name
							});
							this.inherited("onBegin", arguments);
						}
					});
					dhs.set(tmpl);
					dhs.parseDeferred.then(lang.hitch(this, function(
							parseResults) {
						self.addressWidget = parseResults[0];
					}));
					dhs.tearDown();
				},

				startup : function() {
					this.inherited(arguments);
					this.subscribe('/mui/Category/valueChange', 'addValue');
				},

				addValue : function(obj, evt) {
					if (!evt || obj != this.addressWidget)
						return;
					this.values[0] = evt.curIds;
					this.setValue();
				}

			});
			return claz;
		});
},
'sys/mobile/js/mui/panel/_FixedPanelMixin':function(){
define("mui/panel/_FixedPanelMixin", [ "dojo/dom-construct",
		'dojo/_base/declare', "dojo/dom-style", "dojo/topic",
		"dojo/_base/lang", "dojo/touch" ], function(domConstruct, declare,
		domStyle, topic, lang, touch) {
	return declare('mui.panel._FixedPanelMixin', null, {

		fixed : true,

		runSlide : '/mui/list/_runSlideAnimation',

		// 发布fixed变更事件，对外交互使用
		change : 'mui/panel/fixedChange',

		buildRendering : function() {
			this.inherited(arguments);
			if (this.fixed)
				this.subscribeScroll();
		},

		nav : null,

		topList : [],

		buildTopList : function() {
			this.set('topList', []);
			var children = this.titleList;
			for (var i = 0; i < children.length; i++) {
				var domNode = children[i];
				var top = {
					dom : domNode
				}
				if (this.currentDom && this.currentDom == domNode) {
					top.top = this.nav.offsetTop;
				} else
					top.top = domNode.offsetTop;
				this.topList.push(top);
			}
		},

		compara : function(y) {
			if (y < this.topList[0].top)
				return null;
			var max = this.topList.length - 1, min = 0;
			while (min <= max) {
				var middle = parseInt((max + min) / 2);

				if (y == this.topList[middle].top)
					return this.topList[middle].dom;

				else if (y > this.topList[middle].top)
					min = middle + 1;
				if (y < this.topList[middle].top)
					max = middle - 1;
			}
			return this.topList[min - 1].dom;
		},

		currentDom : null,

		resetNav : function() {

			if (this.nav) {
				domConstruct.place(this.currentDom, this.nav, "after");
				domStyle.set(this.currentDom, {
					position : 'relative',
				});
				this.nav.parentNode.removeChild(this.nav);
				this.nav = null;
			}
			this.currentDom = null;
		},

		// 主动滚动
		fixedScroll : function(srcObj, evt) {
			this.buildTopList();
			if (this.lock)
				return;
			this.lock = true;

			var y = evt.to.y;

			// 由于滑动惯性到达顶部销毁fixed对象
			if (y >= 0) {
				this.resetNav();
				this.lock = false;
				return;
			}

			y = Math.abs(y);

			var dom = this.compara(y);

			// 不在fixed区域中销毁fixed对象
			if (!dom) {
				this.resetNav();
				this.lock = false;
				return;
			}

			// 在fixed 区域中且当前fixed对象跟之前不一样时重置fixed状态
			if (dom && this.currentDom != dom) {
				this.resetNav();
				this.currentDom = dom;
				this.nav = lang.clone(dom);
				domConstruct.place(this.nav, dom, "after");
				domStyle.set(dom, {
					position : 'absolute',
					top : 0,
					left : 0,
					right : 0
				});

				domConstruct.place(dom, srcObj.domNode, 'last');

				topic.publish(this.change, this, {
					dom : dom
				});
			}
			this.lock = false;
		},

		subscribeScroll : function() {
			this.subscribe(this.runSlide, lang.hitch(this.fixedScroll));

		}

	});
});
},
'sys/mobile/js/mui/person/PersonDetailItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/person/PersonDetailItemMixin"
	], function(declare, _TemplateItemListMixin, PersonDetailItemMixin) {
	
	return declare("mui.person.PersonDetailItemListMixin", [_TemplateItemListMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: PersonDetailItemMixin
	});
});
},
'sys/mobile/js/mui/form/Category':function(){
define( [ "dojo/_base/declare", "dojo/_base/array", "dojo/topic", "dojo/on", "dojo/touch",
          "dojo/dom-construct", "dojo/dom-class", "dojo/query","mui/form/_FormBase","mui/form/_CategoryBase", "dojo/_base/lang"],
		function(declare, array, topic, on, touch, domConstruct, domClass,
				query, FormBase, CategoryBase, lang) {
			var _field = declare("mui.form.Category", [FormBase, CategoryBase ], {
				
				//id字段名
				idField : null,
				
				//姓名字段名
				nameField : null,
				
				placeholder : null,
				
				//对外事件
				EVENT_VALUE_CHANGE : '/mui/Category/valueChange',
				
				buildRendering : function() {
					this.inherited(arguments);
					this._buildValue();
					if(this.edit){
						this.connect(this.domNode,'click', function(){
							this.defer(function(){
								this._selectCate();
							},350);
						});
					}
				},
				
				postCreate : function() {
					this.inherited(arguments);
					this.eventBind();
				},
				
				//加载
				startup : function() {
					this.inherited(arguments);
					this.key = this.idField;
					this.set("value",this.curIds);
				},
				
				_buildValue:function(){
					if(this.edit){
						if(this.idField && !this.idDom){
							var tmpFileds = query("[name='"+this.idField+"']");
							if(tmpFileds.length>0){
								this.idDom = tmpFileds[0];
							}else{
								this.idDom = domConstruct.create("input" ,{type:'hidden',name:this.idField},this.valueNode);
							}
						}
						if(this.nameField && !this.nameDom){
							var tmpFileds = query("[name='"+this.nameField+"']");
							if(tmpFileds.length>0){
								this.nameDom = tmpFileds[0];
							}else{
								this.nameDom = domConstruct.create("input" ,{type:'hidden',name:this.nameField},this.valueNode);
							}
						}
						if(this.idDom){
							this.idDom.value = this.curIds==null?'':this.curIds;
						}
						if(this.nameDom){
							this.nameDom.value = this.curNames==null?'':this.curNames;
						}
					}
					if(!this.cateFieldShow){
						this.cateFieldShow = domConstruct.create("div" ,{className:'muiCateFiledShow'},this.valueNode);
					} else if (lang.isString(this.cateFieldShow)) {
						this.cateFieldShow = query(this.cateFieldShow)[0];
					}
					
					if (this.cateFieldShow && this.edit && !this.cateFieldShow.getAttribute('data-del-listener-' + this.id)) {
						// 用touch.press
						this.connect(this.cateFieldShow, on.selector(".muiAddressOrg", "click"), function(evt) {
							if (evt.stopPropagation)
								evt.stopPropagation();
							if (evt.cancelBubble)
								evt.cancelBubble = true;
							if (evt.preventDefault)
								evt.preventDefault();
							if (evt.returnValue)
								evt.returnValue = false;
							var nodes = query(evt.target).closest(".muiAddressOrg");
							nodes.forEach(function(orgDom) {
								var id = orgDom.getAttribute("data-id");
								this.defer(function() { // 同时关注时，必须要异步处理
									this._delOneOrg(orgDom, id);
								}, 420);
							}, this);
						});
						this.cateFieldShow.setAttribute('data-has-del-listener-' + this.id, 'true');
					}
					domConstruct.empty(this.cateFieldShow);
					this.buildValue(this.cateFieldShow);
				},
				
				buildValue:function(domContainer){
					if(this.curIds!=null && this.curIds!=''){
						var ids = this.curIds.split(this.splitStr);
						var names = this.curNames.split(this.splitStr);
						for ( var i = 0; i < ids.length; i++) {
							this._buildOneOrg(domContainer,ids[i],names[i]);
							if(i < ids.length-1 && !this.edit){
								domConstruct.create("span",{innerHTML:this.splitStr},domContainer);
							}
						}
					}else{
						if(this.edit && this.placeholder!=null && this.placeholder!='')
							domConstruct.create("div",{className:'muiCatePlaceHold', innerHTML:this.placeholder},domContainer);
					}
				},
				
				_buildOneOrg:function(domContainer, id, name){
					var tmpOrgDom = domConstruct.create("div",{className:"muiAddressOrg", "data-id":id},domContainer);
					domConstruct.create("span",{innerHTML:name},tmpOrgDom);
					if(this.edit){
						domClass.add(tmpOrgDom,"muiAddressOrgEdit");
						domConstruct.create("i" ,{className:'mui mui-close'},tmpOrgDom);
					}
				},
				
				_delOneOrg : function(orgDom, id){
					var ids = this.curIds.split(this.splitStr);
					var names = this.curNames.split(this.splitStr);
					var idx = array.indexOf(ids,id);
					if(idx > -1){
						ids.splice(idx,1);
						names.splice(idx,1);
						this.curIds = ids.join(this.splitStr); 
						this.curNames = names.join(this.splitStr);
						if(this.idDom){
							this.idDom.value = this.curIds==null?'':this.curIds;
							this.set("value",this.curIds==null?'':this.curIds);
						}
						if(this.nameDom){
							this.nameDom.value = this.curNames==null?'':this.curNames;
						}
						if(this.curIds==null || this.curIds=='')
							this.buildValue(this.cateFieldShow);
						topic.publish(this.EVENT_VALUE_CHANGE,this,{curIds:this.curIds,curNames:this.curNames});
					}
					domConstruct.destroy(orgDom);
				},
				
				buildOptIcon:function(optContainer){
					domConstruct.create("i" ,{className:'mui mui-org'},optContainer);
				},
				
				returnDialog:function(srcObj , evt){
					this.inherited(arguments);
					if(srcObj.key == this.idField){
						this.set("value",this.curIds);
						this._buildValue();
						topic.publish(this.EVENT_VALUE_CHANGE,this,{curIds:this.curIds,curNames:this.curNames});
					}
				},
				
				clearDialog:function(srcObj , evt){
					this.inherited(arguments);
					if(srcObj.key == this.idField){
						this.set("value",this.curIds);
						this._buildValue();
						topic.publish(this.EVENT_VALUE_CHANGE,this,{curIds:this.curIds,curNames:this.curNames});
					}
				}
				
			});
			return _field;
		});
},
'sys/mobile/js/mui/form/Address':function(){
define(
		[ "dojo/_base/declare", "mui/form/Category", "mui/address/AddressMixin" ],
		function(declare, Category, AddressMixin) {
			var Address = declare("mui.form.Address",
					[ Category, AddressMixin ], {

					});
			return Address;
		});
},
'sys/mobile/js/mui/datetime/_EditDateTimeMixin':function(){
define([ "dojo/_base/declare", "dojo/html", "dojo/dom-construct",
		"dojo/dom-class", "dijit/registry", "dojo/query", "dojo/_base/array",
		"mui/dialog/Dialog", "dojo/dom-style" ], function(declare, html,
		domConstruct, domClass, registry, query, array, Dialog, domStyle) {
	var claz = declare("mui.datetime._EditDateTimeMixin", null, {

		// 编辑模式
		edit : true,

		// 时间类型 date,time,datetime
		type : '',

		tmpl : null,

		mixinId : null,

		title : '',

		value : '',
		
		//内容额外样式
		_contentExtendClass : null,

		// 显示弹出框类名
		showClass : 'muiDateTimeShow',

		getMixinIds : function() {
			if (this.mixinIds)
				return this.mixinIds;
			if(this.type=='date' || this.type=='time'){
				this.mixinIds = ['_' + this.type + '_' + 'picker'];
			}else{
				this.mixinIds = ['_date_picker', '_time_picker'];
			}
			return this.mixinIds;
		},

		setDateTimeValue : function(value) {
			var ids = this.getMixinIds();
			if(ids.length>0){
				if(ids.length==1){
					registry.byId(ids[0]).set('value', value);
				}else{
					var vals = this.splitValue();
					for(var i=0;i<ids.length;i++){
						registry.byId(ids[i]).set('value', vals[i]);
					}
				}
			}
		},
		
		bindSwitch:function(){
			var choices = query('.muiDateTimeDialogContent .muiDateTimeChoices > div', this.dialog);
			var _self = this;
			array.forEach(choices,function(tmpDom){
				_self.connect(tmpDom,'click',function(evt){
					_self._dateTimeSwitch(choices , evt);
				});
			});
		},
		
		_dateTimeSwitch:function(choices , evt){
			var thisDom = evt.target || evt.srcElement;
			if(domClass.contains(thisDom,"checked")){
				return;
			}
			array.forEach(choices,function(tmpDom){
				domClass.toggle(tmpDom, "checked");
			});
			var idx = array.indexOf(choices,thisDom);
			if(idx>-1){
				array.forEach(query('.muiDateTimeArea>div',this.dialog),function(trDom,index){
					if(idx==index){
						domStyle.set(trDom,{'z-index':'2','opacity':'1'});
					}else{
						domStyle.set(trDom,{'z-index':'1','opacity':'0'});
					}
				});
			}
		},
		
		getDateTimeValue : function() {
			var ids = this.getMixinIds();
			var rtnStr = '';
			if(ids.length>0){
				if(ids.length==1){
					rtnStr = registry.byId(ids[0]).get('value');
				}else{
					var vals = [];
					for(var i=0;i<ids.length;i++){
						vals.push(registry.byId(ids[i]).get('value'));
					}
					rtnStr = vals.join(' ');
				}
			}
			return rtnStr;
		},

		getDialogDiv : function() {
			var nodeList = query('.muiDateTimeDialogContent', this.dialog);
			return nodeList.length > 0 ? nodeList[0] : null;
		},

		// 弹出时间选择框
		openDateTime : function(evt) {
			if (this.dialog)
				return;
			this.dialog = domConstruct.create("div", {
				className : 'muiDateTimeDialog ' + this.showClass
			});
			this.dialogContentDiv = domConstruct.create("div", {
					className : 'muiDateTimeDialogContent' + (this._contentExtendClass? " "+ this._contentExtendClass:"")
				}, this.dialog);
			var vals= this.splitValue();
			this.dialogContentDiv.innerHTML = this.tmpl.replace('!{dateValue}',
							vals[0]).replace('!{timeValue}',vals[1]);
			var self = this;
			Dialog.element({
				'title' : this.title,
				'element' : this.dialog,
				'scrollable' : false,
				'parseable': true,
				'buttons' : [ {
					title : '取消',
					fn : function(dialog) {
						dialog.hide();
					}
				} ,{
					title : '确定',
					fn : function(dialog) {
						var value = self.getDateTimeValue();
						self.set('value', value);
						dialog.hide();
					}
				} ],
				'callback': function(dialog) {
					self.destroyDialog();
				},
				'onDrawed':function(dialog){
					self.bindSwitch();
				}
			});
		},
		
		splitValue : function() {
			var arr = [ '', '' ];
			if(this.value==null || this.value==''){
				return arr;
			}
			if(this.type=="date"){
				arr[0] = this.value;
			}else if(this.type=="time"){
				arr[1] = this.value;
			}else{
				arr = this.value.split(' ');
			}
			if (arr.length < 2)
				arr = [ '', '' ];
			return arr;
		},

		// 销毁弹出框对象
		destroyDialog : function() {
			if (this.dialog) {
				domConstruct.destroy(this.dialog);
				this.dialog = null;
			}
		},

		editValueSet : function(value) {
			if (this.valueDom)
				this.valueDom.value = value;
			this.textNode.innerHTML = value;
		},

		hiddenValueSet : function(value) {
			// this.editValueSet(value);
		},

		viewValueSet : function(value) {
			this.textNode.innerHTML = value;
		},

		readOnlyValueSet : function(value) {
			this.editValueSet(value);
		},

		buildRendering : function() {
			this.inherited(arguments);
			this.textNode = domConstruct.create('div', {
				className : 'muiFormDatetimeText'
			}, this.inputContent);
		},

		buildEdit : function() {
			this.inherited(arguments);
			this.valueDom = domConstruct.create('input', {
				readonly : 'readonly',
				name : this.valueField,
				style : 'display:none'
			}, this.inputContent, 'first');
			if (this.domNode)
				this.connect(this.domNode, 'click', 'openDateTime');
		},

		buildReadOnly : function() {
			this.valueDom = domConstruct.create('input', {
				readonly : 'readonly',
				name : this.valueField,
				style : 'display:none'
			}, this.inputContent, 'first');
		},

		buildView : function() {
			//this.buildReadOnly();无需构建表单元素input
		},

		buildHidden : function() {
			this.buildReadOnly();
			domStyle.set(this.domNode, {
				display : 'none'
			});
		},
		
		_getNameAttr:function(){
			return this._get('valueField');
		}

	});
	return claz;
});
},
'sys/mobile/js/mui/list/HiddenTopBottomMixin':function(){
define([
        "dojo/_base/declare", 
        'dojo/topic'], 
		function(declare, topic) {

	return declare("mui.list.HiddenTopBottomMixin", null, {
		
		hideTopBottom: true,
		
		startup : function() {
			if (this._started) {
				return;
			}
			this.inherited(arguments);
			if (this.hideTopBottom) {
				this.subscribe('/mui/list/hideTopBottom', this.doHideTopBottom);
			}
		},
		
		doHideTopBottom: function(srcObj, evt) {
			if (!this.hideTopBottom) {
				return;
			}
			this.domNode.style.display = evt ? 'none' : '';
		}
	});
});
},
'sys/mobile/js/mui/form/SysCategory':function(){
define( [ "dojo/_base/declare", "mui/form/Category", "mui/syscategory/SysCategoryMixin"],
		function(declare, Category, SysCategoryMixin) {
			var sysCategory = declare("mui.form.SysCategory", [Category , SysCategoryMixin], {
			});
			return sysCategory;
	});

},
'sys/mobile/js/mui/form/_CategoryBase':function(){
define( [ "dojo/_base/declare", "dojo/topic", "dojo/dom", "dojo/dom-construct", "dojo/dom-style",
          "dojo/_base/lang", "dojo/html", "dojo/_base/array", "mui/util", "dojo/touch", "dojox/mobile/_css3"],
		function(declare, topic, dom, domConstruct, domStyle, lang, html, array, util, touch, css3) {
			var cateOpt = declare("mui.form._CategoryBase", null, {
				
				key : null,
				
				type: null,
				
				//当前id值`
				curIds : '',
				
				//显示值
				curNames : '',
				
				splitStr: ';',
				
				//是否多选
				isMul : false,
				
				//模板地址
				templURL : null,
				
				_cateDialogPrefix: '__cate_dialog_',
				
				afterSelect : null,
				
				eventBind : function() {
					topic.subscribe("/mui/category/submit",lang.hitch(this,"returnDialog"));
					topic.subscribe("/mui/category/cancel",lang.hitch(this,"closeDialog"));
					topic.subscribe("/mui/category/clear",lang.hitch(this,"clearDialog"));
				},
				
				returnDialog : function(srcObj , evt){
					if(evt){
						if(srcObj.key == this.key){
							this.curIds = evt.curIds;
							this.curNames = evt.curNames;
							this.closeDialog(srcObj);
							if(this.afterSelect){
								this.afterSelect(evt);
							}
						}
					}
				},
				
				closeDialog : function(srcObj){
					if(this.dialogDiv && srcObj.key == this.key){
						domStyle.set(this.dialogDiv, css3.name('transform'),'translate3d(100%, 0, 0)');
						this.defer(function(){
							if(this.parseResults && this.parseResults.length){
								array.forEach(this.parseResults, function(w){
									if(w.destroy){
										w.destroy();
									}
								});
								delete this.parseResults;
							}
							domConstruct.destroy(this.dialogDiv);
							this.dialogDiv = null;
							this._working = false;
						},410);
					}
				},
				
				clearDialog : function(srcObj){
					if(srcObj.key == this.key){
						this.curIds = "";
						this.curNames = "";
						this.closeDialog(srcObj);
					}
				},
				
				_selectCate: function() {
					if(this.templURL && !this._working){
						var dialogId = this._cateDialogPrefix + this.key;
						this._working = true;
						this.dialogDiv = dom.byId(dialogId);
						if(this.dialogDiv == null){
							var _self = this;
							require(["dojo/text!" + util.urlResolver(this.templURL , this)], function(tmplStr){
								_self.dialogDiv = domConstruct.create("div" ,{id:dialogId, className:'muiCateDiaglog'},document.body,'last');
								util.disableTouch(_self.dialogDiv , touch.move);
								var dhs = new html._ContentSetter({
									node:_self.dialogDiv,
									parseContent : true,
									cleanContent : true,
									onBegin : function() {
										this.content = lang.replace(this.content,{categroy:_self});
										this.inherited("onBegin",arguments);
									}
								});
								dhs.set(tmplStr);
								dhs.parseDeferred.then(function(results) {
									_self.parseResults = results;
									domStyle.set(_self.dialogDiv, css3.name('transform'),'translate3d(0, 0, 0)');
								});
								dhs.tearDown();
							});
						}
					}
				}
			});
			return cateOpt;
		});
},
'sys/mobile/js/mui/calendar/CalendarContent':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase",
				"mui/calendar/base/CalendarBase",
				"mui/calendar/_ContentEventMixin",
				"dojo/text!./tmpl/calendar_content.html", "dojo/date",
				"dojo/date/locale", "dojo/string", "dojo/_base/lang",
				"dojo/_base/array", "dojo/topic", "dojo/dom-class",
				"dojo/dom-style", "dojox/mobile/_css3", "dojo/dom-construct",
				"dojo/query", "dojo/dom-attr" ],
		function(declare, _WidgetBase, CalendarBase,_ContentEventMixin,template, dateClaz,
				locale, string, lang, array, topic, domClass, domStyle, css3,
				domConstruct, query, domAttr) {
			var claz = declare(
					"mui.calendar.CalendarContent",
					[ _WidgetBase, CalendarBase ],
					{

						// 容器节点
						tableNode : null,
						// 日期信息节点
						dateNode : null,
						datesNode : [],

						templateString : template,

						thTemplate : '<th><span >${d}</span></th>',
						tdTemplate : '<td><span data-dojo-attach-point="datesNode"></span></td>',
						trTemplate : '<tr class="">${d}${d}${d}${d}${d}${d}${d}</tr>',

						buildRendering : function() {
							this.dayNames = locale.getNames('days', 'narrow',
									'standAlone');
							this._buildTable();
							this.inherited(arguments);
							this.stuffDate();
							this.bindEvent();
							this.subscribe(this.VALUE_CHANGE, 'valueChange');
							this.subscribe(this.MONTH_CHANGE, 'monthChange');
							this.subscribe(this.NOTIFY, 'processEvent');
							this.subscribe('/mui/calendar/bottomStatus',
									'processEventOfMonth');
							this.subscribe('/mui/calendar/bottomScroll',
									'scale');
						},

						scale : function(obj, evt) {
							if (!evt)
								return;
							domStyle
									.set(
											this.domNode,
											css3
													.add(css3
															.add(
																	{},
																	{
																		transform : 'scale('
																				+ (1 - Math
																						.abs(evt.y)
																						/ (this.domNode.offsetHeight * 3))
																				+ ')'
																	})));
						},

						monthChange : function() {
							this.stuffDate();
							topic.publish(this.DATA_CHANGE, this, {
								lastDate : this.lastDate,
								startDate : this.startDate,
								currentDate : this.currentDate,
								endDate : this.endDate
							});
						},

						// 哪天有日程(key,value形式...key=日期,value=true|false是否存在日程)
						haveEvent : null,
						processEvent : function(haveEvent) {
							if (haveEvent) {
								this.haveEvent = haveEvent;
							}
							query('.muiCalendarNotify',this.domNode).remove();// 清空小红点
							for (var i = 0; i < this.datesNode.length; i++) {
								var key = domAttr
										.get(this.datesNode[i], "date");
								if (this.haveEvent && this.haveEvent[key]) {
									domConstruct.create("i", {
										className : "muiCalendarNotify"
									}, this.datesNode[i].parentNode);
								}
							}
						},

						processEventOfMonth : function(obj, evt) {
							// status=true:月模式
							if (evt && evt.status)
								this.processEvent(null);
						},
							
						valueChange : function(){
							var dates = this.datesNode;
							array.forEach(array.filter(dates, function(item) {
								return domClass.contains(item, 'selected');
							}), function(item, index) {
								domClass.toggle(item, 'selected', false);
							}, this);
							
							array.map(dates, function(item) {
								var _c=locale.format(this.currentDate,{
									selector : 'time',
									timePattern : 'yyyy-MM-dd'
								})
								if(_c == domAttr.get(item,'date') ){
									domClass.toggle(item, 'selected', true);
								}
							}, this);
						},
						
						bindEvent : function() {

							for (var i = 0; i < this.datesNode.length; i++) {
								this.connect(this.datesNode[i], 'click',
										'onDateClick');
							}
							// this.connect(this.dateNode, 'click',
							// 'onDateClick');
						},

						onDateClick : function(evt) {
							var target = evt.target;
							while (target) {
								if (domClass
										.contains(target, 'muiCalendarDate')) {
									this.triggleSelected(target)
									break;
								}
								target = target.parentNode;
							}
						},

						lastSelected : function(node) {
							var date = dateClaz.add(this.currentDate, 'month',
									-1);
							date.setDate(node.innerHTML);
							this.set('currentDate', date);
						},

						nextSelected : function(node) {
							var date = dateClaz.add(this.currentDate, 'month',
									1);
							date.setDate(node.innerHTML);
							this.set('currentDate', date);
						},

						currSelected : function(node) {
							var dates = this.datesNode;
							array.forEach(array.filter(dates, function(item) {
								return domClass.contains(item, 'selected');
							}), function(item, index) {
								domClass.toggle(item, 'selected', false);
							}, this);

							array.map(dates, function(item) {
								if (item == node) {
									var date = new Date(this.currentDate);
									date.setDate(node.innerHTML);
									this.set('currentDate', date);
									domClass.toggle(item, 'selected', true);
								}
							}, this);
						},

						triggleSelected : function(node) {
							if (domClass.contains(node, 'muiCalendarDatePre'))
								// 上个月
								this.lastSelected(node);
							else if (domClass.contains(node,
									'muiCalendarDateNext'))
								// 下个月
								this.nextSelected(node);
							else
								// 当前月
								this.currSelected(node);
						},

						// 填充日期
						stuffDate : function() {
							var month = new Date(this.currentDate), today = new Date();
							month.setDate(1);
							// 本月第一天星期几
							var firstDay = (month.getDay()
									- this.firstDayInWeek + 7) % 7;

							var daysInPreviousMonth = dateClaz
									.getDaysInMonth(dateClaz.add(month,
											"month", -1));
							// 本月多少天
							var daysInMonth = dateClaz.getDaysInMonth(month);
							array
									.forEach(
											this.datesNode,
											function(node, idx) {

												var number, className = 'muiCalendarDate muiCalendarDate', sym;
												var date = new Date(month);
												if (idx < firstDay) {// 前
													number = daysInPreviousMonth
															- firstDay
															+ idx
															+ 1;
													className += sym = 'Pre';
												} else if (idx >= (firstDay + daysInMonth)) {// 下
													number = idx - firstDay
															- daysInMonth + 1;
													className += sym = 'Next';
												} else {// 当前
													number = idx - firstDay + 1;
													className += sym = 'Curr';
												}
												

												if (sym == 'Pre')
													date = dateClaz.add(date,
															"month", -1);
												if (sym == 'Next')
													date = dateClaz.add(date,
															"month", 1);
												date.setDate(number);
												
												if (idx == 0) {
													this.startDate = date;
												}
												if (idx == this.datesNode.length - 1) {
													this.endDate = date;
												}

												if (!dateClaz.compare(date,
														today, "date")) {
													className = "muiCalendarCurrentDate "
															+ className;
												}

												if (!dateClaz.compare(date,
														this.currentDate,
														"date")) {
													className = " selected "
															+ className;
												}
												
												//周六、日字体显示为蓝色
												if(date.getDay()==0 || date.getDay()==6){
													className+=" muiCalendarHoliday";
												}
												
												this._setText(node, number);
												node.className = className;
												domAttr
														.set(
																node,
																'date',
																locale.format(date,{
																		selector : 'time',
																		timePattern : 'yyyy-MM-dd'
																	}));
											}, this);
						},

						// 构建表格
						_buildTable : function() {
							var d = this.thTemplate, i = 7;
							// 构建日历星期表头
							this.weekHtml = string
									.substitute(
											[ d, d, d, d, d, d, d ].join(''),
											{
												d : ""
											},
											lang
													.hitch(
															this,
															function() {
																var r = this.dayNames[(i + this.firstDayInWeek) % 7]
																i++;
																return r;
															}));

							// 构建内容
							var r = string.substitute(this.trTemplate, {
								d : this.tdTemplate
							});
							this.dateHtml = [ r, r, r, r, r, r ].join("");
						},

						resize : function() {
							topic.publish('/mui/calendar/contentComplete',
									this, {
										height : this.domNode.offsetHeight
									})
						},
						
						startup:function(){
							topic.publish(this.DATA_CHANGE, this, {
								lastDate : this.lastDate,
								startDate : this.startDate,
								currentDate : this.currentDate,
								endDate : this.endDate
							});
						}
						
					});
			return claz;
		});
},
'sys/mobile/js/mui/property/PropertyFilterOk':function(){
define([ "dojo/_base/declare", "dojo/dom-style", "dijit/registry",
		"dojo/topic", 'dojox/mobile/viewRegistry' ], function(declare,
		domStyle, registry, topic, viewRegistry) {

	return declare("mui.property.PropertyFilterOk", null, {

		values : null,

		listId : null,

		buildRendering : function() {
			this.inherited(arguments);
			this.subscribe('/mui/property/filter/values', 'setValues');
		},

		setValues : function(obj, evt) {
			if (!evt)
				return;
			this.values = evt.values;
		},

		show : function(evt) {
			var id = this.listId;
			if (!id)
				return;
			var list = registry.byId(id);
			if (!this._url)
				this._url = list.url;
			var arr = [ this._url ];
			for ( var k in this.values) {
				for (var j = 0; j < this.values[k].length; j++) {
					arr.push("q._prop_." + encodeURIComponent(k) + '='
							+ encodeURIComponent(this.values[k][j]));
				}
			}
			list.url = arr.join('&');
			topic.publish('/mui/property/hide', this, null);
			topic.publish('/mui/list/onReload', viewRegistry
					.getEnclosingScrollable(list.domNode), null);

		}
	});
});

},
'sys/mobile/js/mui/form/editor/plugins/image/web/EditorUpload':function(){
define([ "dojo/_base/declare", "dojo/request",
		"mui/form/editor/plugins/image/_EditorUploadMixin" ], function(declare,
		request, _EditorUploadMixin) {
	return declare("mui.form.editor._EditorUploadMixin",
			[ _EditorUploadMixin ], {

				_uploadFile : function(file) {
					var canUpload = false;
					var d = null;
					if (window.FormData) {
						d = new FormData;
						d.append("NewFile", file);
						d.append("json", true);
						canUpload = true;
					}
					if (canUpload) {
						var self = this;
						var promise = request.post(this.uploadurl, {
							data : d,
							handleAs : 'json'
						});
						promise.then(function(data) {
							if (data.status == '1') {
								file.status = 2;
								file.filekey = data.filekey;
								self.uploadSuccess(file, data);
							} else {
								file.status = 0;
								self.uploadError(file, {
									rtn : data
								});
							}
						}, function(data) {
							file.status = 0;
							self.uploadError(file, {
								rtn : data
							});
						}, function(response) {
							file.status = 1;
							self.uploadProcess(response.loaded, file);
						});
					} else {
						file.status = 0;
						self.uploadError(file, {
							rtn : {
								'status' : '-1',
								'msg' : '附件上传错误,当前浏览器表单不支持.'
							}
						});
					}
				}
			});
});

},
'sys/mobile/js/mui/nav/_HomeNavBarMixin':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style",
		"mui/header/HeaderItem", "mui/folder/_Folder", "dojo/_base/lang",
		"mui/back/HrefBackMixin", "dojo/topic", "mui/util" ], function(declare,
		domConstruct, domStyle, HeaderItem, _Folder, lang, HrefBackMixin,
		topic, util) {
	var cls = declare('mui.nav._HomeNavBarMixin', null, {

		homeClick : null,

		homeIcon : 'mui mui-home-opposite',

		addFirstChild : function(item) {
			this.firstItem = item;
			domStyle.set(item.domNode, 'display', 'none');
			this.addChild(item);
			this.subscribe('/mui/nav/onComplete', 'buildHomeBtn');
		},

		homeItemClick : function(e) {
			var item = this.firstItem;
			topic.publish('/mui/navitem/_selected', item, {
				width : 0,
				left : 0,
				target : item,
				url : item.url
			});
			if (window[this.homeClick])
				window[this.homeClick]();
			else if ('[object Function]' == Object.prototype.toString
					.call(this.homeClick)) {
				this.homeClick();
			} else
				new Function(this.homeClick)();
		},

		buildHomeBtn : function() {
			var mixins = [ _Folder, HrefBackMixin ];
			HeaderItem = HeaderItem.createSubclass(mixins);
			var item = new HeaderItem({
				icon : this.homeIcon,
				click : lang.hitch(this, this.homeItemClick),
				url : util.formatUrl(this.firstItem.url),
				moveTo : this.firstItem.moveTo
			});
			item.buildRendering();
			item.startup();
			domConstruct.place(item.domNode, this.domNode, 'before');
		}
	});
	return cls;
});
},
'sys/mobile/js/mui/rtf/RtfResize':function(){
define( [ "dojo/_base/declare", "dojo/dom","mui/rtf/_ImageResizeMixin",
		"mui/rtf/_TableResizeMixin" ], function(declare, dom,
		_ImageResizeMixin, _TableResizeMixin) {

	var claz = declare("mui.rtf.RtfResize", [ _ImageResizeMixin,
			_TableResizeMixin ], {

		//包含编辑器内容dom对象
		containerNode : null,

		//RTF名称
		name : null,

		formatContent : function(domNode) {
			this.inherited(arguments);
		},

		setName : function(name) {
			this.name = name;
		},

		// 构造函数
		constructor : function(name) {
			this.inherited(arguments);
			if (typeof (name) == "object") {
				this.setName(name['name']);
				this.containerNode = name['containerNode'];
			} else {
				this.setName(name);
			}
			this.load();
		},

		load : function() {
			var _container = null;
			if (this.name != null) {
				_container = '_____rtf_____' + this.name;
				_container = dom.byId(_container);
			} else {
				_container = this.containerNode;
			}
			this.formatContent(_container);
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/category/CategoryHeader':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase" , "dojo/dom-construct" ,
          "dojo/dom-style" , "dojo/request" , "dojo/topic" , "mui/util"], function(declare,
		WidgetBase, domConstruct, domStyle, request, topic, util) {
		var header = declare("mui.category.CategoryHeader", [ WidgetBase], {
				//标示
				key : null,
				
				//父分类ID
				_parentId : null,
				
				//当前分类id,可不填写,无此属性,则不需和后台交互
				curId : null,
				
				//必填属性
				curName : null,
				
				height: "inherit",
				
				title: "请选择",
				
				baseClass:"muiCateHeader",
				
				//获取详细信息地址
				detailUrl : null,
				
				buildRendering : function() {
					this.inherited(arguments);
					this.contentNode = domConstruct.create('div',{"className":"muiCateHeaderContent"},this.domNode);
					this.returnDom = domConstruct.create('div',{"className":"muiCateHeaderReturn"},this.contentNode);
					this.titleDom = domConstruct.create('div',{"className":"muiCateHeaderTitle",innerHTML:this.curName},this.contentNode);
					this.cancelNode = domConstruct.create('div',{"className":"muiCateHeaderCancel",innerHTML:'取消'},this.contentNode);
				},

				postCreate : function() {
					this.inherited(arguments);
					this.subscribe("/mui/category/changed","_chgHeaderInfo");
					this.subscribe("/mui/search/submit","_hideHeader");
					this.subscribe("/mui/search/cancel","_showHeader");
					this.connect(this.returnDom,'click', function(){
						this.defer(function(){
							this._gotoParent();
						},350);
					});
					this.connect(this.cancelNode,'click', function(){
						this.defer(function(){
							this._goBack();
						},350);
					});
				},
				
				startup : function() {
					if (this._started) {
						return;
					}
					this.inherited(arguments);
					if (this.domNode.parentNode) {
						var h;
						if (this.height === "inherit") {
							if (this.domNode.parentNode) {
								h = this.domNode.parentNode.offsetHeight + "px";
							}
						} else if (this.height) {
							h = this.height;
						}
						domStyle.set(this.domNode,{'height':h,'line-height':h});
					}
					this._chgHeaderInfo(this,{fdId:this.curId});
					topic.publish("/mui/category/changed",this,{fdId:this.curId});
				},
				
				_showHeader : function(srcObj){
					if(srcObj.key == this.key){
						domStyle.set(this.domNode,{display:'block'});
					}
				},
				
				_hideHeader : function(srcObj){
					if(srcObj.key==this.key){
						domStyle.set(this.domNode,{display:'none'});
					}
				},
				
				_refreshHeader : function(){
					this._buildReturn();
					this.titleDom.innerHTML = this.curName;
				},
				
				_buildReturn : function(){
					if(this.curId){
						if(!this.returnIcon){
							this.returnIcon = domConstruct.create('i',{"className":"mui mui-back"},this.returnDom);
							this.returnText = domConstruct.create('span',{"className":"muiCateHeaderReturnTxt",innerHTML:' 上一级'},this.returnDom);
						}
					}else{
						domConstruct.empty(this.returnDom);
						this.returnIcon = null;
						this.returnText = null;
					}
				},
				
				_gotoParent : function(){
					var argu={};
					if(this._parentId){
						argu.fdId = this._parentId;
					}
					topic.publish("/mui/category/changed" , this , argu);
				},
				
				_goBack : function(){
					topic.publish("/mui/category/cancel" , this);
				},
				
				_chgHeaderInfo : function(srcObj,evt){
					if(srcObj.key==this.key){
						if(evt){
							if(evt.fdId && this.titleDom){
								this.curId = evt.fdId;
								var _url = util.urlResolver(this.detailUrl,this);
								_url = util.formatUrl(_url);
								var promise = request.post(_url, {
									handleAs : 'json'
								});
								var _self = this;
								promise.then(function(items) {
									if(items.length>0){
										var cateData = items[0];
										_self.curId = cateData.fdId;
										_self.curName = cateData.label;
										_self._parentId = cateData.parentId;
										_self._refreshHeader();
									}else{
										//错误处理
									}
								}, function(data) {
									//错误处理
								});
							}else{
								this.curId = null;
								this.curName = this.title;
								this._parentId = null;
								this._refreshHeader();
							}
						}
					}
				}
			});
			return header;
});
},
'sys/mobile/js/mui/form/CheckBox':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"mui/form/_OptionsBase", "dojo/dom-construct", "dojo/topic",
		"dojo/_base/lang", "dojo/dom-style" ], function(declare, query,
		domClass, _OptionsBase, domConstruct, topic, lang, domStyle) {
	var _field = declare("mui.form.CheckBox", [ _OptionsBase ], {

		valueField : null,

		// 与标准html属性重名会出问题
		// name : null,

		opt : false,

		type : 'checkbox',

		checked : false,

		mul : true,

		CHECK_CHANGE : 'mui/form/checkbox/change',

		ITEMVALUE_CHANGE : 'mui/form/checkbox/valueChange',

		checkedClass : 'muiFormCheckBoxChecked',

		_buildValue : function() {
			// 多选外部容器
			this.checkboxNode = domConstruct.create('div', {
				className : 'muiFormCheckBox'
			}, this.fieldOptions, 'first');

			// 多选遮罩
			this.overlay = domConstruct.create('div', {
				className : 'muiFormCheckBoxOverlay mui mui-checked'
			}, this.checkboxNode, 'last');
			domConstruct.place(this.domNode, this.checkboxNode, 'last');
			this.inherited(arguments);

		},

		_checkedChange : function(obj, evt) {
			if (!evt)
				return;
			if (evt.name == this.name && obj != this)
				this.set('checked', false);
		},

		_onClick : function(evt) {
			if (!this.fireClick())
				return;
			this.set('checked', this.checked ? false : true);
			topic.publish(this.ITEMVALUE_CHANGE, this, {
				name : this.name
			});
			if (!this.mul) {
				topic.publish(this.CHECK_CHANGE, this, {
					name : this.name,
					value : this.value
				});
			}
		},

		buildEdit : function() {
			this.connect(this.fieldOptions, 'click', '_onClick');
			if (!this.mul) {
				domClass.add(this.fieldItem, 'sgl');
				this.subscribe(this.ITEMVALUE_CHANGE, '_checkedChange');
			}
		},

		buildHidden : function() {
			domStyle.set(this.domNode, {
				display : 'none'
			});
		},

		buildReadOnly : function() {
			domStyle.set(this.domNode, {
				readOnly : 'readOnly'
			});
		},

		buildView : function() {
			this.buildReadOnly();
		},

		viewValueSet : function(value) {
			this.domNode.value = value;
		},

		editValueSet : function(value) {
			this.viewValueSet(value);
		},

		hiddenValueSet : function(value) {
			this.viewValueSet(value);
		},

		readOnlyValueSet : function(value) {
			this.viewValueSet(value);
		}
	});
	return _field;
});
},
'sys/mobile/js/mui/dialog/OperaTip':function(){
define([ "dojo/_base/declare", "dojo/_base/lang", "dojo/dom-class",
		"dojo/dom-construct", "dojo/dom-style", "mui/dialog/_DialogBase",
		"dojo/_base/window", "dojo/_base/fx", "mui/util", "dojo/touch",
		"dojo/_base/array", "dojo/dom-geometry" ], function(declare, lang,
		domClass, domConstruct, domStyle, _DialogBase, win, fx, util, touch,
		array, domGeom) {

	var OperaTip = declare('mui.dialog.OperaTip', [ _DialogBase ], {

		baseClass : "muiDialogOperationTip",

		refNode : null,

		pos : 'left',

		operas : [],

		buildRendering : function() {
			if (this.operas.length == 0)
				return;
			this.inherited(arguments);
			this.domNode = domConstruct.create('div', {
				className : 'muiDialogOperationTip'
			}, document.body);

			this.operaNode = domConstruct.create('div', {
				className : 'muiDialogOperationContainer'
			}, this.domNode);
			array.forEach(this.operas, function(item) {
				var opera = domConstruct.create('div', {
					className : 'muiDialogOperationButton',
					innerHTML : '<span class="' + item.icon
							+ ' mui"></span>&nbsp;' + item.text
				}, this.operaNode);
				if (item.func)
					this.connect(opera, 'click', function(evt) {
						item.func(evt);
					});
			}, this);
		},

		show : function() {
			if (!this.domNode)
				return;
			var ref = this.refNode;
			var pos = domGeom.position(ref);
			var w = util.getScreenSize().w;
			domStyle.set(this.domNode, {
				top : pos.y + 'px',
				right : w + 10 - pos.x + 'px'
			});

			domStyle.set(this.operaNode, {
				'-webkit-transform' : 'translate3d(0,0,0)'
			});

			this.handle = this.connect(document.body, touch.press,
					'onBodyClick');
			this.inherited(arguments);
			return this;
		},

		hide : function() {
			domStyle.set(this.operaNode, {
				'-webkit-transform' : 'translate3d(100%,0,0)'
			});
			this.defer(function() {
				this.disconnect(this.handle);
				domConstruct.destroy(this.domNode);
				this.domNode = null;
				this.destroy();
			}, 200);
			this.inherited(arguments);
			return this;
		},

		onBodyClick : function(evt) {
			var target = evt.target, isHide = true;
			while (target) {
				if (target == this.domNode) {
					isHide = false;
					break;
				}
				target = target.parentNode;
			}
			if (isHide) {
				this.defer(function() {
					this.hide();
				}, 500);
			}
		}
	});

	return {
		tip : function(options) {
			return new OperaTip(options).show();
		},
		OperaTip : OperaTip
	};

})
},
'sys/mobile/js/mui/top/_TopListMixin':function(){
define( [ "dojo/_base/declare", 'dojo/topic', 'dojo/dom-style',
		"dojo/_base/lang" ], function(declare, topic, domStyle, lang) {

	return declare("mui.list._TopListMixin", null, {

		adjustDestination : '/mui/list/adjustDestination',

		listTop : '/mui/list/toTop',

		toTop : function(evt) {
			topic.publish(this.listTop , this);
		},

		connectToggle : function() {
			// 监听列表进行显示与隐藏
		this.subscribe(this.adjustDestination, lang.hitch( function(srcObj, to, pos, dim) {
			// 当前位置+惯性，当前位置，容器高宽等
			this.defer(function() {
				var beShow = to.y < -5 && ((dim!=null && dim.c.h >= dim.d.h) || dim==null);
				if (beShow && !this._show)
					this.show();

				if (!beShow && this._show)
					this.hide();
			}, 0);
				
			}));

	}
	});
});
},
'sys/mobile/js/mui/nav/MobileCfgNavBar':function(){
define("mui/nav/MobileCfgNavBar", ['dojo/_base/declare', 
                "./NavBarStore",
                "mui/util"], function(declare, NavBarStore, util) {
	
		return declare('mui.nav.MobileCfgNavBar', [NavBarStore], {

			url : "/sys/mobile/sys_mobile_module_category_config/sysMobileModuleCategoryConfig.do?method=data&fdModelName=!{modelName}",

			modelName: null,

			startup : function() {
				if (this._started)
					return;
				if (this.modelName) {
					this.url = util.urlResolver(this.url, {modelName: this.modelName});
				}
				this.inherited(arguments);
			}
		});
});
},
'sys/mobile/js/mui/nav/NavItem':function(){
define(
		'mui/nav/NavItem',
		[ "dojo/_base/declare", "dojox/mobile/_ItemBase", "dojox/mobile/Badge",
				"dojo/dom-construct", "dojo/dom-style", "dojo/dom-class",
				"dojo/request", "dojo/topic", "mui/util" ],
		function(declare, ItemBase, Badge, domConstruct, domStyle, domClass,
				request, topic) {
			var NavItem = declare(
					'mui.nav.NavItem',
					ItemBase,
					{

						// 选中class
						_selClass : 'muiNavitemSelected',
						// 选中事件
						topicType : '/mui/navitem/_selected',

						tag : 'li',

						badge : 0,

						buildRendering : function() {
							this.domNode = this.containerNode = this.srcNodeRef
									|| domConstruct.create('li', {
										className : 'muiNavitem'
									});

							this.inherited(arguments);

							if (this.text) {
								this.textNode = domConstruct.create('span', {
									className : 'textEllipsis muiNavitemSpan'
								}, this.domNode);
								this.textNode.innerHTML = this.text;
								if (this.badge == 0 && this.countUrl != ''
										&& this.countUrl != null) {
									var _self = this;
									request.post(this.countUrl, {
										handleAs : 'json'
									}).then(function(data) {
										if (data.count > 0) {
											_self.set('badge', data.count);
										}
									}, function(data) {

									});
								}
							}

							this
									.subscribe(this.topicType,
											'handleItemSelected');
						},

						handleItemSelected : function(srcObj) {
							if(this.getParent() == srcObj.getParent() ){
								domClass.remove(this.domNode, this._selClass);
							}
						},

						startup : function() {
							if (this._started)
								return;
							this.connect(this.textNode, "onclick", '_onClick');
							this.inherited(arguments);
						},

						// 选中
						setSelected : function() {
							this.beingSelected(this.textNode);
						},

						beingSelected : function(target) {
							while (target) {
								if (domClass.contains(target, 'muiNavitem'))
									break;
								target = target.parentNode;
							}
							var left, width;
							if (!target.offsetParent)
								left = 0, width = 0;
							var style = domStyle.getComputedStyle(target), marginLeft = domStyle
									.toPixelValue(target, style.marginLeft), marginRight = domStyle
									.toPixelValue(target, style.marginRight);

							topic.publish(this.topicType, this, {
								width : width == 0 ? 0 : target.offsetWidth
										+ marginRight + marginLeft,
								left : left == 0 ? left : target.offsetLeft
										+ target.offsetParent.offsetLeft
										- marginLeft,
								target : this,
								url : this.url,
								text : this.text
							});
							domClass.add(this.domNode, this._selClass);
						},

						_onClick : function(e) {
							var target = e.target;
							this.beingSelected(target);
							// 默认click事件
							this.defaultClickAction(e);
						},

						userClickAction : function() {
							if (this.moveTo) {
								return true;
							}
							return false; // 修复出现view跳转问题
						},

						_setBadgeAttr : function(value) {
							if (!this.badgeObj) {
								this.badgeObj = new Badge();
								domStyle.set(this.badgeObj.domNode, {
									position : 'absolute',
									left : '80%',
									top : '2px'
								});
							}
							this.badgeObj.setValue(value);
							if (value) {
								this.domNode.appendChild(this.badgeObj.domNode);
							} else {
								if (this.domNode === this.badgeObj.domNode.parentNode) {
									this.domNode
											.removeChild(this.badgeObj.domNode);
								}
							}
						}

					});

			return NavItem;
		});
},
'sys/mobile/js/mui/back/HomeButton':function(){
define([
    "mui/tabbar/TabBarButton",
	"dojo/_base/declare",
	"mui/i18n/i18n!sys-mobile",
	"mui/device/adapter" 
	], function(TabBarButton, declare, Msg , adapter) {
	
	var goHome = function() {
		var rtn = adapter.closeWindow();
		if(rtn==null){//无接口、接口调用不存在或失败情况
			location = dojoConfig.baseUrl?dojoConfig.baseUrl:'/';
		}
	};
	
	return declare("mui.back.HomeButton", [TabBarButton], {
		icon1: "mui mui-home",
		
		align: "left",
		
		buildRendering:function(){
			this.inherited(arguments);
			this.labelNode.innerHTML = Msg['mui.back.home'];
		},
		
		_onClick : function(evt) {
			setTimeout(function(){
				goHome();
			}, 350);
		}
	});
});
},
'sys/mobile/js/mui/list/_TemplateItemListMixin':function(){
define([
	"dojo/_base/declare",
	"mui/list/item/_TemplateItemMixin"
	], function(declare, Item) {
	
	return declare("mui.list._TemplateItemListMixin", null, {
		
		itemRenderer: Item,
		
		itemTemplateString: null,
		
		createListItem: function(/*Object*/item){
			//console.info('createListItem');
			return new this.itemRenderer(this._createItemProperties(item));
		},
		
		_createItemProperties: function(/*Object*/item) {
			//console.info('_createItemProperties', item);
			var props = this.inherited(arguments);
			props['templateString'] = this.itemTemplateString;
			return props;
		}
	});
});
},
'sys/mobile/js/mui/top/Top':function(){
define( [ "dojo/_base/declare", "dijit/_Contained", "dijit/_Container",
		"dijit/_WidgetBase", "dojo/_base/lang", "dojo/dom-class",
		"dojo/dom-construct", "dojo/dom-style",  "dojo/_base/array"], function(declare, Contained,
		Container, WidgetBase, lang, domClass, domConstruct, domStyle, array) {
	return declare("mui.top.Top", [ WidgetBase, Container, Contained ], {

		bottom : '60px',

		right : '5px',

		// 当前是否显示
		_show : false,

		buildRendering : function() {
			this.inherited(arguments);
			if (!this.containerNode)
				this.containerNode = this.domNode;
			domClass.replace(this.containerNode, "muiTop");
			domStyle.set(this.domNode, {
				bottom : !this.bottom ? "60px" : this.bottom,
				right : !this.right ? "60px" : this.right
			});
			this.topNode = domConstruct.create('i', {
				className : 'mui mui-up-n'
			}, this.domNode);
		},

		startup : function() {
			if (this._started)
				return;
			this.inherited(arguments);
		},

		postCreate : function() {
			this.connect(this.domNode, "onclick", '_onClick');
			this.connectToggle();
			this.subscribe("/dojox/mobile/viewChanged,/dojox/mobile/afterTransitionIn", function(view) {
				this.hide();
				if (view._v && view.toTop) {
					if (view.getPos().y < -5) {
						this.show();
					}
				} else {
					array.forEach(view.getChildren(), function(child) {
						if (child._v && child.toTop) {
							if (child.getPos().y < -5) {
								this.show();
							}
							return false;
						}
					}, this);
				}
			});
		},

		_onClick : function(evt) {
			this.toTop(evt);
		},

		show : function() {
			domStyle.set(this.domNode, {
				display : 'block'
			});
			this.set('_show', true);
		},

		hide : function() {
			domStyle.set(this.domNode, {
				display : 'none'
			});
			this.set('_show', false);
		},

		// 以下mixin实现

		// 置顶实现
		toTop : function(evt) {
		},
		// 显示隐藏切换
		connectToggle : function() {
		}

	});
});

},
'sys/mobile/js/mui/calendar/CalendarWeek':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase",
				"mui/calendar/base/CalendarScrollable",
				"dojo/text!./tmpl/calendar_week.html", "dojo/date",
				"dojo/date/locale", "dojo/string", "dojo/topic",
				"dojo/dom-construct", "dojo/dom-style", "dojo/_base/array",
				"dojo/_base/lang", "dojo/dom-class", "dojo/query",
				"dojo/dom-attr" ],
		function(declare, _WidgetBase, CalendarScrollable, template, dateClaz,
				locale, string, topic, domConstruct, domStyle, array, lang,
				domClass, query, domAttr) {
			var claz = declare(
					"mui.calendar.CalendarWeek",
					[ _WidgetBase, CalendarScrollable ],
					{

						// 容器节点
						tableNode : null,
						// 日期信息节点
						dateNode : null,
						datesNode : [],
						weekNode : null,

						templateString : template,

						thTemplate : '<th><span >${d}</span></th>',

						trTemplate : '<tr>${d}${d}${d}${d}${d}${d}${d}</tr>',

						tdTemplate : '<td><span data-dojo-attach-point="datesNode"></span></td>',

						buildRendering : function() {
							this.dayNames = locale.getNames('days', 'narrow',
									'standAlone');

							var i = 7, d = this.thTemplate;
							this.weekHtml = string
									.substitute(
											[ d, d, d, d, d, d, d ].join(''),
											{
												d : ""
											},
											lang
													.hitch(
															this,
															function() {

																var r = this.dayNames[(i + this.firstDayInWeek) % 7]
																i++;
																return r;
																// return
																// this.dayNames[i++
																// % 7];
															}));

							// 构建内容
							var r = string.substitute(this.trTemplate, {
								d : this.tdTemplate
							});
							this.dateHtml = r;

							this.inherited(arguments);

							this.subscribe(this.VALUE_CHANGE, 'valueChange');
							this.subscribe(this.NOTIFY, 'processEvent');
							this.subscribe('/mui/calendar/bottomStatus',
									'processEventOfWeek');
							this.subscribe('/mui/calendar/bottomScroll',
									'translate');

							this.stuffDate();
							this.bindEvent();
						},

						translate : function(obj, evt) {
							if (!evt)
								return;
							var top = evt.top;
							this.scrollTo({
								y : '-' + top
							});
						},

						// 哪天有日程(key,value形式...key=日期,value=true|false是否存在日程)
						haveEvent : null,
						processEvent : function(haveEvent) {
							if (haveEvent) {
								this.haveEvent = haveEvent;
							}
							query('.muiCalendarNotify',this.domNode).remove();// 清空小红点
							for (var i = 0; i < this.datesNode.length; i++) {
								var key = domAttr
										.get(this.datesNode[i], "date");
								if (this.haveEvent && this.haveEvent[key]) {
									domConstruct.create("i", {
										className : "muiCalendarNotify"
									}, this.datesNode[i].parentNode);
								}
							}
						},

						processEventOfWeek : function(obj, evt) {
							// status=false:周模式
							if (!evt || !evt.status)
								this.processEvent(null);
						},

						valueChange : function() {
							this.stuffDate();
							this.processEvent(null);
						},

						stuffDate : function() {
							var date = this.currentDate.getDate(),today = new Date();
							// var day = this.currentDate.getDay();
							var day = (this.currentDate.getDay()
									- this.firstDayInWeek + 7) % 7;

							array
									.forEach(
											this.datesNode,
											function(node, idx) {
												var className = 'muiCalendarDate muiCalendarDateCurr';
												var d = new Date(
														this.currentDate);
												d.setDate(date - day + idx);
												//选中日
												if (day == idx)
													className += ' selected';
												//今天
												if (!dateClaz.compare(d,
														today, "date")) {
													className = "muiCalendarCurrentDate "
															+ className;
												}
												
												var diff=dateClaz.difference(this.currentDate,d,'month');
												//上个月 
												if(diff<0){
													className += ' muiCalendarDatePre';
												}
												//下个月
												if(diff>0){
													className += ' muiCalendarDateNext';
												}
												//周六、日字体显示为蓝色
												if(d.getDay()==0 || d.getDay()==6){
													className+=" muiCalendarHoliday";
												}
												
												this
														._setText(node, d
																.getDate());
												node.className = className;
												domAttr
														.set(
																node,
																'date',
																locale
																		.format(
																				d,
																				{
																					selector : 'time',
																					timePattern : 'yyyy-MM-dd'
																				}));
											}, this);
						},

						bindEvent : function() {
							for (var i = 0; i < this.datesNode.length; i++) {
								this.connect(this.datesNode[i], 'click',
										'onDateClick');
							}
//							this
//									.connect(this.tableNode, 'click',
//											'onDateClick');
						},

						onDateClick : function(evt) {
							var target = evt.target;
							while (target) {
								if (domClass
										.contains(target, 'muiCalendarDate')) {
									this.triggleSelected(target)
									break;
								}
								target = target.parentNode;
							}
						},

						triggleSelected : function(node) {
							var dates = this.datesNode;
							array.forEach(array.filter(dates, function(item) {
								return domClass.contains(item, 'selected');
							}), function(item, index) {
								domClass.toggle(item, 'selected', false);
							}, this);
							array.map(dates, function(item) {
								if (item == node) {
									var date = new Date(this.currentDate);
									if (domClass.contains(node, 'muiCalendarDatePre')){
										// 上个月
										date = dateClaz.add(date, 'month',-1);
									}else if (domClass.contains(node,'muiCalendarDateNext')){
										// 下个月
										date = dateClaz.add(date, 'month',1);
									}
									date.setDate(node.innerHTML);
									this.set('currentDate', date, false);
									domClass.toggle(item, 'selected', true);
								}
							}, this);
						},

						resize : function() {
							topic.publish('/mui/calendar/weekComplete', this, {
								height : this.domNode.offsetHeight
							});
						}

					});
			return claz;
		});
},
'sys/mobile/js/mui/property/filter/FilterBase':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/dom-construct",
		"dijit/_Contained", "dijit/_Container", "dojo/topic" ], function(
		declare, _WidgetBase, domConstruct, Contained, Container, topic) {
	var claz = declare("mui.property.FilterBase", [ _WidgetBase, Contained,
			Container ], {

		baseClass : 'muiPropertyFilter',

		subject : null,

		name : null,

		SET_EVENT : '/mui/property/filter/value/set',

		buildRendering : function() {
			this.inherited(arguments);
			this.titleNode = domConstruct.create('div', {
				className : 'muiPropertyFilterTitle',
				innerHTML : '<span>' + this.subject + '</span>'
			}, this.domNode, 'first');
			this.contentNode = domConstruct.create('div', {
				className : 'muiPropertyFilterContent'
			}, this.domNode, 'last');
			this.values = [];
		},

		startup : function() {
			this.inherited(arguments);
		},

		setValue : function() {
			topic.publish(this.SET_EVENT, this, {
				key : this.name,
				value : this.values
			});
		}

	});
	return claz;
});
},
'sys/mobile/js/mui/list/SwapStoreView':function(){
define([
	'dojo/_base/declare', 
	'dojo/_base/lang',
	'dijit/_WidgetBase',
	'dojox/mobile/SwapView'
	], function(declare, lang, WidgetBase, SwapView) {
	
	var topicOnSwap = 'mui/list/onListSwaped';
	
	var topicOnFilter = '/mui/list/_onFilter';
	
	return declare('mui.list.SwapStoreView', [WidgetBase], {
		
		baseCloneList: null,
		
		postCreate: function() {
			this.inherited(arguments);
			// 绑定nav加载完成事件
		},
		
		startup: function() {
			if(this._started){
				return;
			}
			this.inherited(arguments);
			
		},
		
		createLists: function() {
			// 创建swap对象
			// 通过clone动态创建list
			// 设置list为swap的子对象
			// 替换list的onfilter 做界面切换，然后再刷新
		}
		
	});
});
},
'sys/mobile/js/mui/fixed/Fixed':function(){
define("mui/fixed/Fixed", [ "dojo/dom-construct", 'dojo/_base/declare',
		"dojo/dom-class", "dojo/dom-style", "dojo/topic", "dojo/_base/lang",
		"dijit/_WidgetBase", "dijit/_Contained", "dijit/_Container",
		"mui/fixed/FixedItem" ], function(domConstruct, declare, domClass,
		domStyle, topic, lang, WidgetBase, Contained, Container, FixedItem) {
	return declare('mui.fixed.Fixed', [ WidgetBase, Contained, Container ], {

		runSlide : '/mui/list/_runSlideAnimation',

		buildRendering : function() {
			this.inherited(arguments);
			this.subscribeScroll();
		},

		nav : null,

		topList : [],

		// 构建fixedItem位置列表
		buildTopList : function() {
			this.set('topList', []);
			var children = this.getChildren();
			for (var i = 0; i < children.length; i++) {
				if (children[i] instanceof FixedItem) {
					var domNode = children[i].domNode;
					var top = {
						dom : domNode
					}
					if (this.currentDom && this.currentDom == domNode) {
						top.top = this.nav.offsetTop;
					} else
						top.top = domNode.offsetTop;
					this.topList.push(top);
				}
			}
		},

		// 比对当前位置处于fixedItem的区域，参考维基库
		compara : function(y) {
			if (y < this.topList[0].top)
				return null;

			var max = this.topList.length - 1, min = 0;
			while (min <= max) {
				var middle = parseInt((max + min) / 2);

				if (y == this.topList[middle].top)
					return this.topList[middle].dom;

				else if (y > this.topList[middle].top)
					min = middle + 1;
				if (y < this.topList[middle].top)
					max = middle - 1;
			}
			return this.topList[min - 1].dom;
		},

		// 监听滚动事件
		subscribeScroll : function() {
			this.subscribe(this.runSlide, lang.hitch(function(srcObj, evt) {
				
				if(this.getParent()!=srcObj)
					return;
				
				this.buildTopList();
				if (this.lock)
					return;
				this.lock = true;

				var y = evt.to.y;

				// 由于滑动惯性到达顶部销毁fixed对象
				if (y >= 0) {
					this.resetNav();
					this.lock = false;
					return;
				}

				y = Math.abs(y);

				var dom = this.compara(y);

				// 不在fixed区域中销毁fixed对象
				if (!dom) {
					this.resetNav();
					this.lock = false;
					return;
				}

				// 在fixed 区域中且当前fixed对象跟之前不一样时重置fixed状态
				if (dom && this.currentDom != dom) {
					this.resetNav();
					this.currentDom = dom;
					this.nav = lang.clone(dom);
					domConstruct.place(this.nav, dom, "after");
					domStyle.set(dom, {
						position : 'absolute',
						top : 0,
						left : 0,
						right : 0
					});

					domConstruct.place(dom, srcObj.domNode, 'last');

					topic.publish(this.change, this, {
						dom : dom
					});
				}
				this.lock = false;
			}));
		},

		resetNav : function() {

			if (this.nav) {
				domConstruct.place(this.currentDom, this.nav, "after");
				domStyle.set(this.currentDom, {
					position : 'static',
				});
				this.nav.parentNode.removeChild(this.nav);
				this.nav = null;
			}
			this.currentDom = null;
		},

		startup : function() {
			if (this._started)
				return;
			this.inherited(arguments);
		}
	});
});
},
'sys/mobile/js/mui/pageLoading':function(){
define([
        "dojo/dom",
        'dojo/request/notify',
    ], function(dom, notify) {
	
	var hideDone = false;
	var canHide = false;
	var ajaxRequestConut = 0;
	
	var hide = function() {
		if (canHide && 0 <= ajaxRequestConut) {
			setTimeout(function() {
				dom.byId('pageLoading').style.display = 'none';
			}, 10);
			hideDone = true;
		}
	};
	
	notify('start', function() {
		if (hideDone)
			return;
		ajaxRequestConut ++;
	});
	
	notify('stop', function() {
		if (hideDone)
			return;
		ajaxRequestConut --;
		hide();
	});
	
	return {
		hide: function() {
			canHide = true;
			hide();
		},
		isHide: function() {
			return hideDone;
		}
	};
});
},
'sys/mobile/js/mui/calendar/_ContentEventMixin':function(){
define([ "dojo/_base/declare", "dojo/dom-geometry", "dojo/touch","dojo/date",
         "dojo/_base/window", "dojo/topic", "dojo/_base/array","mui/util" ],
		function(declare, domGeometry, touch, dateClaz, win, topic, array, util) {
	
	var claz=declare('mui.calendar._ContentEventMixin',null,{
		
		_changeMonthConnects:[],
		
		buildRendering:function(){
			this.inherited(arguments);
			this.bindChangeMonthEvent();
		},
		
		bindChangeMonthEvent:function(){
			this.touchStartHandle = this.connect(this.domNode,
					touch.press, "onTouchStart");
		},
		
		onTouchStart:function(e){
			this.dy = 0;
			//this.eventStop(e);
			this._changeMonthConnects.push(this.connect(this.domNode,touch.move, "onTouchMove"));
			this._changeMonthConnects.push(this.connect(this.domNode,touch.release, "onTouchEnd"));
			this.startY = e.touches ? e.touches[0].pageY
					: e.clientY;
		},
		
		onTouchMove:function(e){
			//this.eventStop(e);
			this.currentY = e.touches ? e.touches[0].pageY : e.clientY;
			this.dy=this.currentY-this.startY;
		},
		
		onTouchEnd:function(e){
			//this.eventStop(e);
			var dist=this.domNode.clientHeight / 4;
			if(this.dy>dist){
				this.set('currentDate', dateClaz.add(
						this.currentDate, 'month', 1));
			}
			if(this.dy < -dist ){
				this.set('currentDate', dateClaz.add(
						this.currentDate, 'month', -1));
			}
			//移除事件
			array.forEach(this._changeMonthConnects, function(item) {
				this.disconnect(item);
			}, this);
			this._changeMonthConnects = [];
		},
		
		eventStop : function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
		}
		
		
	});
	
	
	return claz;
	
});
},
'sys/mobile/js/mui/form/editor/EditorPluginMixin':function(){
define([ "dojo/_base/declare", "dojo/_base/array", "dojo/dom-construct",
		"dojo/_base/lang" ], function(declare, array, domConstruct, lang) {

	return declare("mui.form.editor.plugins.EditorPluginMixin", null, {

		plugins : [ 'face', 'image' ],

		holdTime : 250,

		lastTime : null,

		fireClick : function(evt) {
			if (!this.lastTime) {
				this.lastTime = new Date().getTime();
				return true;
			}
			var time = this.lastTime;
			this.lastTime = new Date().getTime()
			if (time && this.lastTime - time <= this.holdTime)
				return false;
			return true;
		},

		formatPlugin : function() {
			this.plugins = array.map(this.plugins, function(plugin) {
				var url = plugin;
				if (plugin.indexOf('/') < 0)
					url = 'mui/form/editor/plugins/' + plugin + '/Plugin';
				return url;
			}, this);
		},

		buildEdit : function() {
			this.inherited(arguments);
			this.formatPlugin();
			this.editorDeferred.then(lang.hitch(this, function() {
				var self = this;
				require(this.plugins, function() {
					array.forEach(arguments, function(Item) {
						var plugin = new Item({
							editor : this
						});
						var item = domConstruct.create('a', {
							className : plugin.icon + ' mui',
							href : 'javascript:;'
						}, this.pluginNode);
						if (plugin.event)
							this.connect(item, 'click', function(evt) {
								if (!this.fireClick(evt))
									return;
								this.defer(function() {
									this.__textNode.blur();
									plugin.event.call(plugin, evt)
								}, 1);
							});
						plugin.startup();
					}, self);
				});
			}));
		}
	});
});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryMixin':function(){
define( [ "dojo/_base/declare"],
		function(declare) {
			window.SIMPLE_CATEGORY_TYPE_CATEGORY = 0;//"CATEGORY" 类别
			
			var simpleCategory = declare("mui.simplecategory.SimpleCategoryMixin", null, {

				type : window.SIMPLE_CATEGORY_TYPE_CATEGORY ,
				
				//模块名
				modelName:null,
				
				//对节点的验证权限,0显示所有(00可以选中所有,01只能选中有维护权限的,02只能选中有使用权限的),1 只显示有维护权限的
				authType:"02",
				
				isMul: false , 
				
				templURL : "mui/simplecategory/simplecategory_sgl.jsp?modelName=!{modelName}&authType=!{authType}",
				
				_setIsMulAttr:function(mul){
					this._set('isMul' , mul);
					if(this.isMul){
						this.templURL =  "mui/simplecategory/simplecategory_mul.jsp?modelName=!{modelName}&authType=!{authType}";
					}else{
						this.templURL =  "mui/simplecategory/simplecategory_sgl.jsp?modelName=!{modelName}&authType=!{authType}";
					}
				}
				
			});
			return simpleCategory;
	});
},
'sys/mobile/js/mui/syscategory/SysCategoryItemMixin':function(){
define(	["dojo/_base/declare" , "dojo/dom-class", "mui/iconUtils" , "mui/category/CategoryItemMixin"],
		function(declare, domClass, iconUtils, CategoryItemMixin) {
			var item = declare("mui.syscategory.SysCategoryItemMixin", [CategoryItemMixin], {

				buildRendering:function(){
					this.fdId = this.value;
					this.label = this.text;
					this.icon  = 'mui mui-organization';
					this.type = this.nodeType=='CATEGORY'?window.SYS_CATEGORY_TYPE_CATEGORY:window.SYS_CATEGORY_TYPE_TEMPLATE;
					this.inherited(arguments);
				},
				
				getTitle:function(){
					return this.label;
				},
				
				//是否显示往下一级
				showMore : function(){
					if(this.type == window.SYS_CATEGORY_TYPE_CATEGORY){
						return true;
					}
					return false;
				},
				
				//是否显示选择框
				showSelect:function(){
					var pWeiget = this.getParent();
					if(pWeiget && pWeiget.selType==this.type){
						return true;
					}
					return false;
				},
				
				//是否选中
				isSelected:function(){
					var pWeiget = this.getParent();
					if(pWeiget && pWeiget.curIds && (pWeiget.curIds.indexOf(this.fdId)>-1)){
						return true;
					}
					return false;
				},
				
				buildIcon:function(iconNode){
					if(this.icon){
						iconUtils.setIcon(this.icon, null,
								this._headerIcon, null, iconNode);
					}
				}
			});
			return item;
		});
},
'sys/mobile/js/mui/form/validate/Validation':function(){
define( ["dojo/_base/declare", "mui/form/validate/Validator", "mui/form/validate/Reminder", 
         "mui/form/validate/dom-value", "dojo/dom-attr", "dojo/_base/lang", "mui/form/_FormBase", "mui/i18n/i18n!:error"], function(
		declare, Validator, Reminder, domValue, domAttr, lang, FormBase, Msg) {
	//常用检验类型配置
	var Validates = {
		'required':{//必填
			error : Msg['errors.required'].replace("{0}","{name}"),
			test  : function(v) {return !this.getValidator('isEmpty').test(v);}
		},
		'number' : {//数字类型
			error : Msg['errors.number'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || (!isNaN(v) && !/^\s+$/.test(v)&& /^.{1,20}$/.test(v) );}
		},
		'digits' : {//整数类型
			error :  Msg['errors.integer'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || !/[^\d]/.test(v);}
		},
		'alpha' : {//英文字符
			error : Msg['errors.alpha'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || /^[a-zA-Z]+$/.test(v);}
		},
		'alphanum' : {//英文字符或数字
			error : Msg['errors.alphanum'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || !/\W/.test(v);}
		},
		'date' : {  //日期类型
			error : Msg['errors.date'].replace("{0}","{name}"),
			test  : function(v) {
				var res=false;
				var regDate=/^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;
				var regTime=/^[0-2][\d]:[0-5][\d]$/;
				if(v)
				{
					var dateAry=v.split(/\s+/);
					
					if(dateAry.length==1){
						res=regDate.test(v) || regTime.test(v);
					}else if(dateAry.length==2){
						res=regDate.test(dateAry[0])&&regTime.test(dateAry[1]);
					}
				}
				return this.getValidator('isEmpty').test(v) || res;
			}
		},
		'email' : { //电子邮件校验
			error : Msg['errors.email'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || /\w{1,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$/.test(v);}
		},
		'url' : {  //URL地址校验
			error : Msg['errors.url'].replace("{0}","{name}"),
			test  : function(v) {return this.getValidator('isEmpty').test(v) || /^(http|https|ftp):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][A-Z0-9_-]*)+)(:(\d+))?\/?/i.test(v);}
		},
		'currency-dollar' : {//货币格式
			error : Msg['errors.dollar'].replace("{0}","{name}"),
			test  : function(v) {
				// [$]1[##][,###]+[.##]
				// [$]1###+[.##]
				// [$]0.##
				// [$].##
				return this.getValidator('isEmpty').test(v) || /^\$?\-?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}\d*(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/.test(v);
			}
		},
		'maxLength(length)' : {//最大长度校验
			error : Msg['errors.maxLength.simple'].replace("{0}","{name}").replace("{1}","{maxLength}"),
			test  : function(v, e, o) {
				var length = isNaN(o['length']) ? 0 : parseInt(o['length']);
				if (length == 0 || this.getValidator('isEmpty').test(v)) return true;
				o['maxLength'] = length; //Math.floor(length/30)*20;
				var newvalue = v.replace(/[^\x00-\xff]/g, "***");
				return newvalue.length <= length;
			}
		},
		'range(min,max)' : {//阈值范围
			error : Msg['errors.range'].replace("{0}","{name}").replace("{1}","{min}").replace("{2}","{max}"),
			test : function(v, e, o) {
				if (this.getValidator('isEmpty').test(v)) return true;
				if ((!isNaN(v) && !/^\s+$/.test(v))) {
					var min = isNaN(o['min']) ? 0 : parseFloat(o['min']);
					var max = isNaN(o['max']) ? 0 : parseFloat(o['max']);
					var value = parseFloat(v);
					return (min <= value && value <= max);
				}
				return false;
			}
		},
		'max(num)' : {//不小于
			error : Msg['errors.max'].replace("{0}","{name}").replace("{1}","{num}"),
			test : function(v, e, o) {
				if (this.getValidator('isEmpty').test(v)) return true;
				if ((!isNaN(v) && !/^\s+$/.test(v))) {
					var num = isNaN(o['num']) ? 0 : parseFloat(o['num']);
					var value = parseFloat(v);
					return (value <= num);
				}
				return false;
			}
		},
		'min(num)' : {//不大于
			error : Msg['errors.min'].replace("{0}","{name}").replace("{1}","{num}"),
			test : function(v, e, o) {
				if (this.getValidator('isEmpty').test(v)) return true;
				if ((!isNaN(v) && !/^\s+$/.test(v))) {
					var num = isNaN(o['num']) ? 0 : parseFloat(o['num']);
					var value = parseFloat(v);
					return (value >= num);
				}
				return false;
			}
		},
		'scaleLength(num)' : {//小数位判断
			error : Msg['errors.scaleLength'].replace("{0}","{name}").replace("{1}","{num}"),
			test : function(v, e, o) {
				if (this.getValidator('isEmpty').test(v)) return true;
				if ((!isNaN(v) && !/^\s+$/.test(v))) {
					v = parseFloat(v).toString();
					var lasIndex = v.lastIndexOf('.');
					if (lasIndex < 0) return true;
					var num = isNaN(o['num']) ? 0 : parseInt(o['num']);
					var value = v.substr(lasIndex + 1).length;
					return (value <= num);
				}
				return false;
			}
		},
		'before':{//与当前比较判断，不早于当前时间
			error : Msg['errors.time.before'].replace("{0}","{name}"),
			test : function(v,e,o){
				if (this.getValidator('isEmpty').test(v)) return true;
				var today = new Date();
				today.setSeconds(0, 0);
				var temDate = null;
				if(dojoConfig.locale!=null && dojoConfig.locale!='zh-cn'){
					temDate = Date.parse(v);
				}else{
					var arr = v.split(/[^0-9]/);
					temDate = new Date(parseInt(arr[0],10),parseInt(arr[1],10)-1,parseInt(arr[2],10),arr[3]==null?0:parseInt(arr[3],10),
							arr[4]==null?0:parseInt(arr[4],10),arr[5]==null?0:parseInt(arr[5],10),arr[6]==null?0:parseInt(arr[6],10),
							arr[7]==null?0:parseInt(arr[7],10)).getTime();
				}
				if(temDate <= today.getTime())
					return true;
				return false;
			}
		},
		'after':{//与当前比较判断，不晚于当前时间
			error : Msg['errors.time.after'].replace("{0}","{name}"),
			test : function(v,e,o){
				if (this.getValidator('isEmpty').test(v)) return true;
				var today = new Date();
				today.setSeconds(0, 0);
				var temDate = null;
				if(dojoConfig.locale!=null && dojoConfig.locale!='zh-cn'){
					temDate = Date.parse(v);
				}else{
					var arr = v.split(/[^0-9]/);
					temDate = new Date(parseInt(arr[0],10),parseInt(arr[1],10)-1,parseInt(arr[2],10),arr[3]==null?0:parseInt(arr[3],10),
									arr[4]==null?0:parseInt(arr[4],10),arr[5]==null?0:parseInt(arr[5],10),arr[6]==null?0:parseInt(arr[6],10),
									arr[7]==null?0:parseInt(arr[7],10)).getTime();
				}
				if(temDate >= today.getTime())
					return true;
				return false;
			}	
		},
		'__date' : {//时间格式判断
			error : Msg['errors.date'].replace("{0}","{name}"),
			test  : function(v) {
				var res=false;
				//格式:yyyy-MM-dd
				var regDate = /^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;
				if(dojoConfig.locale!=null && dojoConfig.locale!='zh-cn'){
					//格式:MM/dd/yyyy
					regDate = /^(((0[13578]|1[02])\/(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)\/(0[1-9]|[12][0-9]|30))|(02\/(0[1-9]|[1][0-9]|2[0-9])))\/([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})$/;
				}
				if(v){
					res=regDate.test(v);
				}
				return this.getValidator('isEmpty').test(v) || res;
			}
		},
		'__datetime' : {//时间日期格式判断
			error : Msg['errors.datetime'].replace("{0}","{name}"),
			test  : function(v) {
				var res=false;
				var regDate=/^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;
				if(dojoConfig.locale!=null && dojoConfig.locale!='zh-cn'){
					regDate = /^(((0[13578]|1[02])\/(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)\/(0[1-9]|[12][0-9]|30))|(02\/(0[1-9]|[1][0-9]|2[0-9])))\/([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})$/;
				}
				var regTime=/^[0-2][\d]:[0-5][\d]$/;
				if(v)
				{
					var dateAry=v.split(/\s+/);
					if(dateAry.length==2){
						res = regDate.test(dateAry[0])&&regTime.test(dateAry[1]);
					}
				}
				return this.getValidator('isEmpty').test(v) || res;
			}
		},
		'__time': {//时间格式判断
			error : Msg['errors.time'].replace("{0}","{name}"),
			test  : function(v) {
				var res=false;
				var regTime=/^[0-2][\d]:[0-5][\d]$/;
				if(v){
					res= regTime.test(v);
				}
				return this.getValidator('isEmpty').test(v) || res;
			}
		}
	};
	var Validation = declare("mui.form.validate.Validation",  null , {
		
		serialAttrName:'__validate_serial',
		
		_validateSerialPrefix:'_validate_',
		
		//校验器对象缓存
		Validators:{},
		
		constructor:function(){
			this.inherited(arguments);
			if(!window._validateSerialIndex)
				window._validateSerialIndex = 1;
			this.addValidator('isEmpty','',function(v) {
				return ((v == null) ||v.replace(/^(\s|\u00A0)+|(\s|\u00A0)+$/g,"")==''|| (v.length == 0));
			});
			for (var type in Validates) {
				this.addValidator(type, Validates[type].error, Validates[type].test);
			}
		},
		
		//增加校验器
		addValidator:function(type , error , testFun){
			var _parseArray = this._parseValidatorName(type);
			var _type = _parseArray.shift();
			if(!this.Validators[_type]){
				this.Validators[_type] =  new Validator(_type, error, testFun, _parseArray);
			}
		},
		
		//获取校验器
		getValidator:function(name){
			var _parseArray = this._parseValidatorName(name);
			var _type = _parseArray.shift();
			var _validator = this.Validators[_type] ? this.Validators[_type] : new Validator();
			_validator.setParamValues(_parseArray);
			_validator.setOwner(this);
			return _validator;
		},
		
		//校验单个组件或dom元素
		validateElement:function(element){
			var validate = this._getValidatorName(element);
			if(!validate) return true;
			this._serializeElement(element);
			var vos = validate.split(' ');
			for(var i=0; i<vos.length; i++){
				var tmpValidate = vos[i].trim();
				if(tmpValidate!=''){
					var tmpValidator = this.getValidator(tmpValidate);
					if(!this._doValidateElement(element, tmpValidator)){
						return false;
					}
				}
			}
			return true;
		},
		
		_doValidateElement:function(element,validator){
			var isPass = this._isElementEnable(element) && validator.test(this._getValidatorValue(element), element);
			var options = lang.mixin(validator.options,{'name':this._getValidatorLabel(element)});
			var _reminder = new Reminder(this._getValidatorDom(element) , validator.error, options);
			(isPass) ? _reminder.hide() : _reminder.show();
			return isPass;
		},
		
		_isElementEnable:function(element){
			return true;
		},
		
		_serializeElement:function(element){
			var serlialDom = this._getValidatorDom(element);
			if(serlialDom!=null){
				if(domAttr.get(serlialDom,this.serialAttrName)==null){
					domAttr.set(serlialDom, this.serialAttrName, this._validateSerialPrefix + window._validateSerialIndex);
					window._validateSerialIndex = window._validateSerialIndex + 1;
				}
			}
			return;
		},
		
		_getValidatorDom:function(element){
			if(element instanceof FormBase){
				return element.domNode;
			}
			return element;
		},
		
		//获取元素的校验信息
		_getValidatorLabel:function(element){
			if(element instanceof FormBase){
				return element.subject;
			}
			return domAttr.get(element,'subject');
		},
		
		//获取元素的校验信息
		_getValidatorValue:function(element){
			if(element instanceof FormBase){
				return element.get('value');
			}
			var params = domValue.get(element);
			return params ? params[1] : '';
		},
		
		//获取元素的校验信息
		_getValidatorName:function(element){
			var validate = null;
			if(element.getAttribute){
				validate = element.getAttribute("validate");
				if(validate!=null && validate!=''){
					validate = validate.trim();
				}
			}
			if(validate!=null && validate!=''){
				return validate;
			}
			if(element.validate && element.validate!=''){
				return element.validate;
			}
			return validate;
		},
		
		//解析参数key或value
		_parseValidatorName:function(name){
			var _name = name.replace('(', ',').replace(')', '');
			return _name.split(',');
		}
		
	});
	return Validation;
});
},
'sys/mobile/js/mui/query/_CategoryQueryDialogMixin':function(){
/**
 * 分类查询父类
 * 具体实现类:
 * 		mui.simplecategory.SimpleCategoryDialogMixin（简单分类）
 * 		mui.syscategory.SysCategoryDialogMixin（全局分类）
 */
define( [ "dojo/_base/declare", "mui/form/_CategoryBase",  "mui/util"],
		function(declare, CategoryBase, util) {
			var category = declare("mui.query._CategoryQueryDialogMixin", [CategoryBase], {
				filterURL:null,
				
				redirectURL: null,
				
				postCreate : function() {
					this.inherited(arguments);
					this.eventBind();
				},
			
				show:function(refHeight){
					this._selectCate();
				},
				
				_formatParam:function(){
					var url = location.href;
					if(this.redirectURL){
						this.curNames = encodeURIComponent(this.curNames);
						url =  util.formatUrl(util.urlResolver(this.redirectURL,this));
					}
					return util.setUrlParameter(url,"queryStr",util.urlResolver(this.filterURL,this));
				},
				
				returnDialog:function(srcObj , evt){
					this.inherited(arguments);
					if(srcObj.key == this.key){
						window.open(this._formatParam(),'_self');
						this._set('curIds', '');
						this._set('curNames', '');
					}
				}
			});
			return category;
	});
},
'sys/mobile/js/mui/calendar/base/CalendarBase':function(){
define([ "dojo/_base/declare", "dojo/topic", "dijit/_TemplatedMixin",
		"dojo/date", "dojo/_base/window","dojo/dom-attr","dojo/dom-construct" ], function(declare, topic,
		_TemplatedMixin, dateClaz, win, domAttr, domConstruct) {
	var claz = declare("mui.calendar.CalendarBase", [ _TemplatedMixin ], {

		/**
		 * 发布数据改变事件--对外 事件数据包： lastDate :// 上次点击时间 startDate :// 本月第一天
		 * currentDate :// 当前选中时间 endDate :// 本月最后一天
		 */
		DATA_CHANGE : '/mui/calendar/dataChange',

		/**
		 * 发布值改变事件--对外 事件数据包： lastDate :// 上次点击时间 currentDate :// 当前选中时间
		 */
		VALUE_CHANGE : '/mui/calendar/valueChange',

		/**
		 * 接受通知事件 事件数据包： [date1,date2]
		 */
		NOTIFY : '/mui/calendar/notify',
		
		/**
		 * 设置每个星期的第一天是周几，取admin.do里的值,如果为空默认为1
		 */
		firstDayInWeek:isNaN(dojoConfig.calendar.firstDayInWeek)?
						1:dojoConfig.calendar.firstDayInWeek,

		// 月发生改变
		MONTH_CHANGE : 'mui/calendar/_weekChange',
		_setText : function(node, text) {
			node.innerHTML = text;
		},

		buildRendering : function() {
			this.inherited(arguments);
			this.subscribe(this.VALUE_CHANGE, 'synDate');
		},

		// 同步日期
		synDate : function(evt) {
			if (!evt)
				return;
			this.lastDate = evt.lastDate;
			this.currentDate = evt.currentDate;
		},

		// 当前日期
		currentDate : new Date(),

		// 上一点击日期
		lastDate : new Date(),

		_setCurrentDateAttr : function(date, fire) {
			var isSameMonth = false;
			if (dateClaz.difference(date, this.currentDate, "month") == 0)
				isSameMonth = true;
			this.lastDate = new Date(this.currentDate);
			this.currentDate = date;
			// 绑定日期点击事件
			topic.publish(this.VALUE_CHANGE, this, {
				currentDate : this.currentDate,
				lastDate : this.lastDate
			});
			// 不同个月发布事件重新渲染面板
			if (!isSameMonth || fire)
				topic.publish(this.MONTH_CHANGE, this);
		},

		getScreenHeight : function() {
			return win.global.innerHeight
					|| win.doc.documentElement.clientHeight
					|| win.doc.documentElement.offsetHeight;
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/tabbar/TabBarButtonGroup':function(){
define(	["dojo/_base/declare", "mui/tabbar/TabBarButton", "dojo/dom-class",
				"dojo/dom-style", "dojox/mobile/Tooltip", "dojo/dom-construct",
				"dijit/registry", "dojo/_base/lang"], function(declare,
				TabBarButton, domClass, domStyle, Tooltip, domConstruct,
				registry, lang) {

			return declare("mui.tabbar.TabBarButtonGroup", [TabBarButton], {

				align : 'right',

				// 列表滚动事件，用于隐藏弹出层
				adjustDestination : '/mui/list/adjustDestination',

				buildRendering : function() {
					// 构建弹出层
					this.openerContainer = new Tooltip();
					domConstruct.place(this.openerContainer.domNode,
							document.body, "last");
					domClass
							.add(this.openerContainer.domNode, 'muiNavBarGroup');
					var cover = this.openerContainer.containerNode;

					this.tabGroupContainer = domConstruct.create('div', {
								className : 'muiNavBarGroupContainer'
							}, cover);
					var children = this.srcNodeRef.children;
					while (children.length > 0) {
						domConstruct.place(children[0], this.tabGroupContainer,
								"last");
					}

					this.inherited(arguments);
					if (!this.label)
						domClass.add(this.getParent().domNode,
								'muiNavBarButton');

				},
				startup : function() {
					if (this._started)
						return;

					if (this.align != 'center')
						domStyle.set(this.iconDivNode, {
									"float" : this.align
								});
					
					this.subscribe(this.adjustDestination, lang.hitch(this,
									this.hideOpener));
					this.inherited(arguments);
				},

				// 点击打开Opener
				_onClick : function(evt) {
					var opener = this.openerContainer;
					if (opener.resize)
						this.hideOpener(this);
					else
						opener.show(this.iconDivNode?this.iconDivNode:this.domNode, ['above']);
					this.defaultClickAction(evt);
					this.handle = this.connect(document.body, 'touchend', 'unClick');
				},

				hideOpener : function(srcObj) {
					this.openerContainer.hide();
				},

				// 点击页面其他地方隐藏弹出层
				unClick : function(evt) {
					var target = evt.target, isHide = true;
					while (target) {
						if (target == this.domNode) {
							isHide = false;
							break;
						}
						target = target.parentNode;
					}
					if (isHide) 
						this.defer(function() {
							this.hideOpener();
						}, 400);
					this.disconnect(this.handle);
				}
			});
		});
},
'sys/mobile/js/mui/nav/_ShareNavBarMixin':function(){
/*******************************************************************************
 * 导航平分插件
 ******************************************************************************/
define(
		"mui/nav/_ShareNavBarMixin",
		[ "dojo/_base/declare", "dojo/_base/array", "dojo/dom-style" ],
		function(declare, array, domStyle) {
			var cls = declare(
					'mui.nav._ShareNavBarMixin',
					null,
					{

						buildRendering : function() {
							this.inherited(arguments);
							this.subscribe('/mui/nav/onComplete', 'onShare')
						},

						onShare : function(obj, evt) {
							var c_w = this.containerNode.offsetWidth, d_w = this.domNode.offsetWidth;
							if (c_w > d_w)
								return;
							var children = this.getChildren();
							var innerWidth = 0;
							array.forEach(children, function(item) {
								var node = item.domNode;
								innerWidth += node.offsetWidth;
							});
							var pd = (c_w - innerWidth) / (children.length * 2);
							array.forEach(children, function(item) {
								var node = item.domNode;
								domStyle.set(node, {
									'margin-left' : pd + 'px',
									'margin-right' : pd + 'px'
								})
							});
						}
					});
			return cls;
		});
},
'sys/mobile/js/mui/back/BackButton':function(){
define(["dojo/_base/declare", "mui/tabbar/TabBarButton", "dojo/dom-construct", "mui/dialog/Dialog", "mui/device/adapter","dojo/_base/lang" ],
		function(declare, TabBarButton, domConstruct, Dialog, adapter,lang) {
	
			return declare("mui.back.BackButton", [ TabBarButton ], {
				icon1 : "mui mui-back",

				align : "left",
				
				//是否在编辑状态下
				edit : false,

				_onClick : function(evt) {
					this.defer( function() {
						if(this.edit){
							var contentNode = domConstruct.create('div', {
								className : 'muiBackDialogElement',
								innerHTML : '<div>退出编辑？<div>'
							});
							Dialog.element({
								'title' : '提示',
								'showClass' : 'muiBackDialogShow',
								'element' : contentNode,
								'scrollable' : false,
								'parseable': false,
								'buttons' : [ {
									title : '取消',
									fn : function(dialog) {
										dialog.hide();
									}
								} ,{
									title : '确定',
									fn : lang.hitch(this,function(dialog) {
										this.doBack();
										dialog.hide();
									})
								} ]
							});
						}else{
							this.doBack();
						}
					}, 450);// 延时处理原因：手机端延时300毫秒问题导致返回多次（iphone4发现问题）
			},
			doBack : function(refresh){
				var rtn = adapter.goBack();
				if(rtn == null){
					history.back();
				}
			}
			});
		});
},
'sys/mobile/js/mui/form/Input':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"mui/form/_InputBase", "dojo/dom-construct", "dojo/topic" ], function(
		declare, query, domClass, _InputBase, domConstruct, topic) {
	var claz = declare("mui.form.Input", [ _InputBase ], {
		edit : true,

		type : 'input',

		name : null,

		inputClass : 'muiFormInput',

		buildOptIcon : function(optContainer) {
			domConstruct.create("i", {
				className : 'mui mui-insert mui-rotate-45'
			}, optContainer);
		},

		buildEdit : function() {
			this.inputNode = domConstruct.create('input', {
				name : this.name,
				className : this.inputClass,
				placeholder : this.placeholder
			}, this.valueNode);
			this.connect(this.inputNode, 'focus','_onFocus');
		},
	
		_getValueAttr : function() {
			if (this.inputNode)
				return this.inputNode.value;
		},

		buildReadOnly : function() {
			this.inputNode = domConstruct.create('input', {
				name : this.name,
				className : this.inputClass,
				readonly : 'readonly'
			}, this.valueNode);
		},

		buildHidden : function() {
			this.inputNode = domConstruct.create('input', {
				name : this.name,
				className : this.inputClass,
				style : 'display:none'
			}, this.valueNode);
		},

		viewValueSet : function(value) {
			this.valueNode.innerHTML = value;
		},

		editValueSet : function(value) {
			this.inputNode.value = value;
		},

		readOnlyValueSet : function(value) {
			this.inputNode.value = value;
		},

		hiddenValueSet : function(value) {
			this.inputNode.value = value;
		}
	});

	return claz;
});
},
'sys/mobile/js/mui/property/PropertyFilterValuesMixin':function(){
define([ "dojo/_base/declare", "dojo/topic", "dojo/_base/lang" ], function(
		declare, topic, lang) {

	return declare("mui.property.PropertyFilterValuesMixin", null, {

		// 数据格式{'id':[value]}
		buildRendering : function() {
			this.inherited(arguments);
			this.subscribe('/mui/property/filter/value/set', 'setValue');
			this.values = {};
		},

		setValue : function(obj, evt) {
			if (!evt)
				return;
			var key = evt.key;
			var value = evt.value;
			this.values[key] = value;
			topic.publish('/mui/property/filter/values', this, {
				values : this.values
			});
		}
	});
});

},
'sys/mobile/js/mui/list/SwapScrollableView':function(){
define([
	'dojo/_base/declare', 
	'dojo/_base/lang',
	'dojo/_base/array',
	'dojo/dom-construct',
	'dojo/dom-class',
	'dijit/registry',
	'dijit/_WidgetBase',
	'dijit/_Container',
	"dijit/_Contained",
	'dojox/mobile/SwapView',
	'dojox/mobile/View',
	'dojo/parser',
	'dojo/topic',
	'mui/list/StoreScrollableView',
	], function(declare, lang, array, domCtr, domClass, registry, WidgetBase, Container, _Contained, 
		SwapView, View, parser, topic, ScrollableView) {
	
	var InnerSwap = declare([SwapView], {
			onAfterTransitionIn: function() {
				this.inherited(arguments);
				// 提示：滑动切换并不会触发此方法
				topic.publish('/dojox/mobile/viewChanged', this);
				this.resize();
			}
	});
	
	return declare('mui.list.SwapScrollableView', [WidgetBase, Container, _Contained], {
		
		innerSwapClass: InnerSwap,
		
		stopParser: true,
		
		templateString: null,
		
		refNavBar: null,
		
		currView: null,
		
		postCreate: function() {
			this.inherited(arguments);
			this.subscribe('/dojox/mobile/viewChanged', 'handleViewChanged');
		},
		
		startup: function() {
			if(this._started) {
				return;
			}
			this.inherited(arguments);
			if (!this.templateString) {
				this.templateString = this.domNode.innerHTML;
				this.domNode.innerHTML = '';
			}
		},
		
		handleViewChanged: function(view) {
			if (!(view instanceof SwapView)) {
				return;
			}
			array.forEach(this.getChildren(), function(child) {
				if (child === view) {
					var reloadTime = view.reloadTime || 0;
					var nowTime = new Date().getTime();
					var needLoad = (this.currView != view) && (reloadTime == 0);
					this.currView = view;
					view.containerNode.style.paddingTop = "0";
					this.onSwapViewChanged(view);
					if (needLoad) {
						view.reloadTime = nowTime;
						view.getChildren()[0].reload();
					}
					if (window.localStorage) {
						try {
							localStorage.setItem("swapIndex:" + location.pathname, view.getIndexInParent());
						} catch (e) {
							if(window.console)
								console.log(e.name);
						}
					}
					return false;
				}
			}, this);
		},
		
		onSwapViewChanged: function(view) {
			
		},

		_createScroll: function(item) {
			return new ScrollableView({rel: item});
		},
		
		_createSwap: function() {
			return new this.innerSwapClass();
		},
		
		generateSwapList: function(items) {
			var loadIndex = 0;
			
			array.forEach(items, function(item, i) {
				var swap = this._createSwap();
				this.addChild(swap);
				var scroll = this._createScroll(item);
				swap.addChild(scroll);
				
				item.moveTo = swap.id; // 绑定view跳转
				
				parser.parse(domCtr.create('div', {innerHTML: this.templateString}))
						.then(function(widgetList) {
							array.forEach(widgetList, function(widget, index) {
								scroll.addChild(widget, index + 1);
							});
						});
			}, this);
			
			if (window.localStorage) {
				loadIndex = localStorage.getItem("swapIndex:" + location.pathname);
				if (loadIndex == null) {
					loadIndex = 0;
				} else {
					loadIndex = parseInt(loadIndex);
				}
			}
			
			if (loadIndex == 0) {
				this.handleViewChanged(this.getChildren()[loadIndex]);
			} else {
				var self = this;
				require(['dojox/mobile/TransitionEvent'], function(TransitionEvent) {
					new TransitionEvent(document.body, {moveTo: self.getChildren()[loadIndex].id}).dispatch();
				})
			}

			this.resize();
		},

		resize: function() {
			if(this.domNode.parentNode){
				var node, len, i, _fixedAppFooter;
				for(i = 0, len = this.domNode.parentNode.childNodes.length; i < len; i++){
					node = this.domNode.parentNode.childNodes[i];
					if(node.nodeType === 1){
						var fixed = node.getAttribute("fixed")
							|| node.getAttribute("data-mobile-fixed")
							|| (registry.byNode(node) && registry.byNode(node).fixed);
						if(fixed === "bottom"){
							domClass.add(node, "mblFixedBottomBar");
							_fixedAppFooter = node;
						}
					}
				}
			}

			this.inherited(arguments); // scrollable#resize() will be called
			array.forEach(this.getChildren(), function(child){
				if(child.resize){
					if (!child._fixedAppFooter) {
						child._fixedAppFooter = _fixedAppFooter;
						child.getChildren()[0]._fixedAppFooter = _fixedAppFooter;
					}
					child.resize(); 
				}
			});
		}
	});
});
},
'sys/mobile/js/mui/list/item/ComplexLItemMixin':function(){
define(	["dojo/_base/declare", 
       	 "dojox/mobile/_ItemBase", 
       	 "dojo/dom-construct",
       	 "dojo/dom-class", 
       	 "dojo/dom-style", 
       	 "mui/util",
       	 "./_ListLinkItemMixin"], function(
				declare, ItemBase, domConstruct, domClass, domStyle, util, _ListLinkItemMixin) {

			return declare("mui.list.item.ComplexLItemListItem", [ItemBase, _ListLinkItemMixin], {
				tag : 'li',
				// 图片url
				icon : '',
				// 描述
				summary : '',
				// 标题
				label : '',
				// 链接
				href : 'javascript:;',
				// 主键
				fdId : '',
				// 创建者
				creator : '',
				// 创建时间
				created : '',
				// 数量
				count : 0,

				buildRendering : function() {
					this._templated = !!this.templateString;
					if (!this._templated) {
						this.domNode = this.containerNode = this.srcNodeRef
								|| domConstruct.create(this.tag, {
											className : 'muiComplexlItem'
										});
						this.contentNode = domConstruct.create(
										'div', {
											className : 'muiListItem'
										}, this.domNode);
					}
					this.inherited(arguments);
					if (!this._templated)
						// 构建内部元素
						this.buildInternalRender();
				},

				buildInternalRender : function() {

					this.articleNode = domConstruct.create('a', null,
							this.contentNode);
					if (this.icon)
						this.iconNode = domConstruct.create('span', {
									innerHTML : '<img src="' + this.icon + '">'
								}, this.articleNode);

					if (this.label) {
						this.hrefNode = domConstruct.create('h3', {
									className : 'textEllipsis muiSubject',
									innerHTML : this.label
								}, this.articleNode);
					}
					if (this.summary) {
						this.descNode = domConstruct.create('p', {
									innerHTML : this.summary,
									className : 'muiListSummary'
								}, this.articleNode);
					}
					if (this.href) {
						this.makeLinkNode(this.articleNode);
					}

					this.infoNode = domConstruct.create('div', {
								className : 'muiComplexlBottom muiListInfo'
							}, this.articleNode);

					if (this.creator) {
						this.creatorNode = domConstruct.create('div', {
									className : 'muiComplexlCreator muiAuthor',
									innerHTML : this.creator
								}, this.infoNode);
					}
					
					if (this.created) {
						this.createdNode = domConstruct.create('div', {
									className : 'muiComplexlCreated',
									innerHTML : '<i class="mui mui-time"></i>' + this.created
								}, this.infoNode);
					}
					
					if (this.count) {
						this.countNode = domConstruct.create('div', {
									className : 'mui mui-eyes mui-2x muiComplexlRead',
									innerHTML : '&nbsp;&nbsp;<span class="muiNumber">' + this.count + '</span>'
								}, this.infoNode);
					}
				},

				startup : function() {
					if (this._started) {
						return;
					}
					this.inherited(arguments);
				},

				_setLabelAttr : function(text) {
					if (text)
						this._set("label", text);
				}
			});
		});
},
'sys/mobile/js/mui/address/AddressHeader':function(){
define( [ "dojo/_base/declare", "mui/category/CategoryHeader"], function(declare,CategoryHeader) {
		var header = declare("mui.address.AddressHeader", [ CategoryHeader], {
				//获取详细信息地址
				detailUrl : '/sys/organization/mobile/address.do?method=detailList&orgIds=!{curId}'
			});
			return header;
});
},
'sys/mobile/js/mui/rtf/_TableResizeMixin':function(){
define([ "dojo/_base/declare", "dojo/html", "dojo/dom-construct","dojo/dom-style", "dojo/query", "dojo/_base/array",
				"dojo/text!mui/rtf/TableResize.html", "dojo/_base/lang"], function(declare, html, domConstruct,
				domStyle, query, array, tmpl, lang) {

			return declare("mui.rtf._TableResizeMixin", null, {

				formatContent : function(domNode) {
					this.inherited(arguments);
					var tables = [];
					if (typeof (domNode) == "object") {
						tables = query('table', domNode);
					} else {
						tables = query(domNode + ' table');
					}
					array.forEach(tables, lang.hitch(this,
							function(item, index) {
								this.resizeTable(item);
							}));
					array.forEach(tables, function(item, index) {
						item.parentNode.removeChild(item);
					});
				},

				resizeTable : function(item) {
					this.container_temp = domConstruct.create('div', null, item, 'before');
					domStyle.set(this.container_temp, {
						height : item.offsetHeight + 'px' 
					});
					var dhs = new html._ContentSetter( {
						parseContent : true,
						cleanContent : true,
						node : this.container_temp,
						onBegin : function() {
							this.content = this.content.replace(/!{table}/g,
									item.outerHTML);
							this.inherited("onBegin", arguments);
						}
					});
					dhs.set(tmpl);
					dhs.parseDeferred.then(lang.hitch(this,function(parseResults){
						if(parseResults && parseResults.length){
							array.forEach(parseResults, function(w){
								if(w.resize){
									w.resize();
								}
							});
						}
					}));
					dhs.tearDown();
				}
			});

		});
},
'sys/mobile/js/mui/query/QueryList':function(){
define([ "dojo/_base/declare", "dijit/_WidgetBase", "dijit/_Contained",
		"dijit/_Container", "dojo/window", "dojo/_base/array",
		"dojo/dom-style", "dojo/dom-class" ], function(declare, WidgetBase,
		Contained, Container, win, array, domStyle, domClass) {
	return declare("mui.query.QueryList", [ WidgetBase, Contained, Container ],
			{

				baseClass : 'muiQueryList',

				// 距离手机顶部高度
				topHeight : 0,

				HIDE_EVENT : '/mui/folder/hide',

				SHOW_EVENT : '/mui/folder/show',
				
				startup : function() {
					this.subscribe(this.HIDE_EVENT, 'hide');
					this.subscribe(this.SHOW_EVENT, 'show');
					this.inherited(arguments);
					var childs = this.getChildren();
					var avgLen = this.domNode.offsetWidth / (childs.length)
							- childs.length + 1;
					array.forEach(childs, function(child) {
						if (child && child.setStyle) {
							child.setStyle({
								width : avgLen + 'px'
							});
						}
					}, this);
				},
				
				show : function() {
					var childs = this.getChildren();
					var time = 80, times = 400, tim = 400;
					array.forEach(childs, function(child) {
						if (child && child.itemR) {
							this.defer(function() {
								domClass.add(child.itemR, 'muiQueryScale');
								this.defer(function() {
									domClass.remove(child.itemR,
											'muiQueryScale');
									domClass.add(child.itemR,
											'muiQueryListItemROn');
								}, tim);
							}, times);
							times += time;
						}
					}, this);
				},

				hide : function() {
					var childs = this.getChildren(), len = childs.length;
					var time = 80, times = time * len, tim = 400;
					array.forEach(childs, function(child) {
						if (child && child.itemR) {
							this.defer(function() {
								domClass.add(child.itemR, 'muiQueryScaled');
								this.defer(function() {
									domClass.remove(child.itemR,
											'muiQueryScaled');
									domClass.remove(child.itemR,
											'muiQueryListItemROn');
								}, tim);
							}, times);
							times -= time;
						}
					}, this);
				}
			});
});
},
'sys/mobile/js/mui/mime/mime':function(){
define( [ "dojo/request", "mui/util" ], function(request, util) {

	var url = "/sys/mobile/js/mui/mime/mime.jsp?fileName=!{fileName}";

	return {
		getMime : function(fileName) {
			var mime = "";
			var rqUrl = util.formatUrl(util.urlResolver(url, {
				'fileName' : fileName
			}));
			request(rqUrl, {
				sync : true,
				handleAs : 'json'
			}).then( function(data) {
				if (data["status"] == 1) {
					mime = data['message'];
				}
			});
			return mime;
		}
	};
});
},
'sys/mobile/js/mui/store/JsonpRest':function(){
define( [ "dojo/_base/xhr", "dojo/_base/lang", "dojo/json",
		"dojo/_base/declare", "dojo/store/util/QueryResults", /*=====, "./api/Store" =====*/
		"dojo/request/script" ], function(xhr, lang, JSON, declare,
		QueryResults, script /* =====, Store ===== */) {

		// No base class, but for purposes of documentation, the base class is dojo/store/api/Store
		var base = null;

		return declare("mui.store.JsonpRest", base, {

			constructor : function(options) {

				this.headers = {};
				declare.safeMixin(this, options);
			},

			// headers: Object

			headers : {},

			target : "",

			idProperty : "id",

			ascendingPrefix : "+",

			descendingPrefix : "-",

			_getTarget : function(id) {
				// summary:
			//		If the target has no trailing '/', then append it.
			// id: Number
			// The identity of the requested target
			var target = this.target;
			if (typeof id != "undefined") {
				if (target.charAt(target.length - 1) == '/') {
					target += id;
				} else {
					target += '/' + id;
				}
			}
			return target;
		},

		get : function(id, options) {

			options = options || {};

			var hasQuestionMark = this.target.indexOf("?") > -1;

			var query = options.query;
			if (query && typeof query == "string") {
				query = xhr.queryToObject(query);
				query = query ? (hasQuestionMark ? "&" : "?") + query : "";
			}

			return script.get(this.target, {
				jsonp : "jsonpcallback",
				query : query,
				timeout : typeof(options.timeout) == "number" ? options.timeout : 10000
			});
		},

		accepts : "application/javascript, application/json",

		getIdentity : function(object) {

			return object[this.idProperty];
		},

		put : function(object, options) {
				//不支持
		},

		add : function(object, options) {
				//不支持
		},

		remove : function(id, options) {
				//不支持
		},

		query : function(query, options) {

				options = options || {};

				var hasQuestionMark = this.target.indexOf("?") > -1;
				if (query && typeof query == "string") {
					query = xhr.queryToObject(query);
					query = query ? (hasQuestionMark ? "&" : "?") + query : "";
				}

				if (options && options.sort) {
					var sortParam = this.sortParam;
					query += (query || hasQuestionMark ? "&" : "?")
							+ (sortParam ? sortParam + '=' : "sort(");
					for ( var i = 0; i < options.sort.length; i++) {
						var sort = options.sort[i];
						query += (i > 0 ? "," : "")
								+ (sort.descending ? this.descendingPrefix
										: this.ascendingPrefix)
								+ encodeURIComponent(sort.attribute);
					}
					if (!sortParam) {
						query += ")";
					}
				}

				var results = script.get(this.target, {
					jsonp : "jsonpcallback",
					query : query,
					timeout : typeof(options.timeout) == "number" ? options.timeout : 10000//10秒后没响应就认为是请求失败
				});

				return QueryResults(results);
			}
		});

	});
},
'sys/mobile/js/mui/device/kk5api':function(){
/*
 * 用于kk5客户端对应功能接口调用
 */
define(["mui/util",'mui/device/kk5/attachment','mui/mime/mime',"mui/device/kk5/easymilib"],function(util, Attachment, mime) {
	var kk5api = {
			closeWindow : function() {
				window.KK.app.exit();
				return {};
			},
			
			showTitleBar:function(isShow){
				if(isShow){
					window.KK.app.hideTitleBar();
				}else{
					window.KK.app.showTitleBar();
				}
				return {};
			},
			
			goBack : function() {
				window.KK.history.canGo(function(rtnObj){
					if(rtnObj.canGoBack){
						window.KK.history.back();
					}else{
						window.KK.app.exit();
					}
				});
				return {};
			},
			
			goForward : function(){
				window.KK.history.forward();
				return {};
			},
			
			getUserID : function(){
				var userinfo = window.KK.app.getUserInfo();
				if(userinfo!=null)
					return userinfo.loginName;
				return null;
			},
		
			_select : function(feature, context){
				var attSetting = context.options;
				if(!window.AttachmentList)
					window.AttachmentList = {};
				var attachmentObj = window.AttachmentList[attSetting.fdKey];
				if(!attachmentObj){
					attSetting.uploadStream = true;
					attachmentObj = new Attachment(attSetting);
					window.AttachmentList[attSetting.fdKey] = attachmentObj;
				}
				window.KK.media.getPicture({
					sourceType:feature,
					destinationType:'data',
					targetWidth:window.screen.width,  
					targetHeight:window.screen.height,  
					encodingType:'png'
				},function(data, savePath){
					attachmentObj.startUploadFile({
						href : "data:image/png;base64," + data,
						data : data,
						size : data.length,
						name: "image.png"
					});
				},function(){
					attachmentObj.uploadError(null,{
						rtn:{'status':'-1','msg':'附件上传错误'}
					});
				});
				return {};
			},
			
			openCamera:function(context){
				return this._select("camera",context);
			},

			selectFile:function(context){
				return this._select("album",context);
			},
			
			openSpeech:function(context){
				var attSetting = context.options;
				if(!window.AttachmentList)
					window.AttachmentList = {};
				var attachmentObj = window.AttachmentList[attSetting.fdKey];
				if(!attachmentObj){
					attachmentObj = new Attachment(attSetting);
					window.AttachmentList[attSetting.fdKey] = attachmentObj;
				}
				window.KK.media.captureAudioView(function(file){
					attachmentObj.startUploadFile(file);
				},function(code){
					if(code==-3){
						if(window.console){
							window.console.log('录音取消..');
						}
					}
					if(code==-9){
						if(window.console){
							window.console.error('录音出错..');
						}
					}
				});
				return {};
			},
			
			playSpeech:function(voiceUrl){
				window.KK.media.playAudioView(voiceUrl,function(code){
					if(code==-3){
						if(window.console){
							window.console.log('录音播放取消..');
						}
					}
					if(code==-9){
						if(window.console){
							window.console.error('录音播放出错..');
						}
					}
				});
				return {}; 
			},
			//fullPath为全路径，区别kk5以下的api（为小写fullpath）
			uploadFile:function(file, uploadurl, userKey, successFun, progressFun, errorFun){
				var self = this;
				window.KK.proxy.uploadView({
					"token":userKey,
					"userkey": userKey,
					"url": uploadurl,
					"fullPath": file.fullPath
				},function(fileInfo){
					successFun(fileInfo);
				},function(code){
					var msg = "";
					if(code==-1){
						msg = '附件上传网络不可用';
						if(window.console){
							window.console.error(msg);
						}
					}
					if(code==-2){
						msg = '附件上传调用参数错误';
						if(window.console){
							window.console.error(msg);
						}
					}
					if(code==-3){
						msg = '附件上传被取消';
						if(window.console){
							window.console.error(msg);
						}
					}
					if(code==-9){
						msg = '附件上传服务器端出错';
						if(window.console){
							window.console.error(msg);
						}
					}
					if(errorFun){
						errorFun({
							rtn:{'status':'-1','msg':'附件上传错误:' + msg }
						});
					}
				});
				return {};
			},
		
			captureScreen:function(callback){
				window.KK.app.captureScreen({
					targetWidth:window.screen.width,  
					targetHeight:window.screen.height
				},function(imageInfo){
					callback("data:image/png;base64," + imageInfo.imageData);
				},function(code){
					if(window.console)
						window.console.error("截屏出错:" + code);
				});
				return {};
			}
		};
	window.kk5Api = kk5api;
	return kk5api;
});

},
'sys/mobile/js/mui/panel/SlidePanel':function(){
define(
		[ "dojo/_base/declare", "dojo/_base/array",
				"dojox/mobile/ScrollableView", "dojo/dom-construct",
				"dojo/dom-class", "mui/util", "dojo/dom-style",
				"dojox/mobile/_css3", "dojo/dom-attr", "dojo/topic",
				"dojo/request", "dojo/_base/lang", "dojo/touch" ],
		function(declare, array, ScrollableView, domConstruct, domClass, util,
				domStyle, css3, domAttr, topic, request, lang, touch) {

			return declare(
					"mui.panel.SlidePanel",
					[ ScrollableView ],
					{
						// 数据源
						store : [],

						// 相关view
						relView : null,

						dir : 'left',

						width : '170',

						templateUrl : null,
						sourceUrl : null,

						icon : null,

						swipeThreshold : 100,

						SLIDE_PANEL_CLICK : '/mui/panel/slide/click',

						startup : function() {
							if (this._started)
								return;

							this.navNodes = [];
							var defaultIcon = this.icon;
							array.forEach(this.store, function(item, index) {
								var icon = item.icon;
								if (!icon) {
									icon = defaultIcon;
								}
								icon = icon ? '<span class="mui ' + icon
										+ '"></span>' : '';
								var className = "muiSlidePanelCatalog";
								if (item.selected == true)
									className += " selected";
								domConstruct.create('div', {
									className : className,
									innerHTML : icon + '<div>' + item.text
											+ '</div>',
									title : item.text,
									'data-mui-index' : index
								}, this.containerNode);
							}, this);

							this.customRender();

							var tmpWidth = "100%";
							if (this.width) {
								tmpWidth = this.width;
							}
							if (tmpWidth.toString().indexOf("%") > -1) {
								tmpWidth = tmpWidth;
							} else {
								tmpWidth = tmpWidth + 'px';
							}
							domStyle.set(this.domNode, {
								width : tmpWidth
							});
							domClass.add(this.domNode, 'muiSlidePanel '
									+ this.dir);
							this.inherited(arguments);
							this.play();
							this._started = true;
						},

						customRender : function() {
							var self = this;
							if (!this.sourceUrl || !this.templateUrl)
								return;

							request
									.post(util.formatUrl(this.sourceUrl))
									.then(
											function(data) {
												if (!data)
													return;
												var store = (new Function(
														"return (" + data
																+ ");"))();
												request
														.post(
																util
																		.formatUrl(self.templateUrl))
														.then(
																function(_data) {
																	var html = "";
																	array
																			.forEach(
																					store,
																					function(
																							item) {
																						html += lang
																								.replace(
																										_data,
																										item);
																					});
																	domConstruct
																			.place(
																					domConstruct
																							.toDom(html),
																					self.containerNode,
																					'last');
																});
											});
						},

						transformKey : css3.name('transform'),

						play : function() {
							this.domNode.style['display'] = 'block';
							this.domNode.style['height'] = util.getScreenSize().h
									+ 'px';
							this.overlayNode = domConstruct.create('div', {
								className : 'muiPanelOverlay'
							}, document.body);
							domConstruct.place(this.domNode, this.overlayNode,
									'last');
							this
									.defer(
											function() {
												this.domNode.style[this.transformKey] = 'translate3d(0, 0, 0)';
											}, 1);

							this.connect(this.overlayNode, 'click', 'onClose');
							this.connect(this.overlayNode, touch.press,
									'onPress');
							this.connect(this.overlayNode, touch.release,
									'onRelease');
							this
									.connect(this.overlayNode, touch.move,
											'onMove');
							if (this.store)
								this.connect(this.domNode, 'click',
										'onNavClick');
						},

						onNavClick : function(evt) {
							var target = evt.target;
							while (target) {
								var index = domAttr.get(target,
										'data-mui-index');
								if (index) {
									topic.publish(this.SLIDE_PANEL_CLICK, this,
											{
												index : index,
												title : domAttr.get(target,
														'title')
											});
									this.onClose();
									break;
								}
								target = target.parentNode;
							}
						},

						onClose : function() {
							var t3d = 'translate3d(-100%, 0, 0)';
							if (this.dir == 'right')
								t3d = 'translate3d(100%, 0, 0)';
							this.defer(function() {
								this.domNode.style[this.transformKey] = t3d;
							}, 1);

							this.defer(function() {
								this.destroy();
								domConstruct.destroy(this.overlayNode);
							}, 1000);

						},

						onPress : function(e) {
							this.eventStop(e);
							this.touchStartX = e.touches ? e.touches[0].pageX
									: e.clientX;
						},

						onRelease : function(e) {
							if (Math.abs(this.dx) >= this.swipeThreshold) {
								if (this.dx > 0 && this.dir == 'right') {
									this.onClose();
								} else if (this.dx < 0 && this.dir == 'left') {
									this.onClose();
								}
							}
							this.dx = 0;
						},

						onMove : function(e) {
							this.eventStop(e);
							var x = e.touches ? e.touches[0].pageX : e.clientX;
							this.dx = x - this.touchStartX;
						},

						eventStop : function(evt) {
							evt.preventDefault();
						}
					});
		});

},
'sys/mobile/js/mui/folder/_Folder':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/dom-style", "dojo/dom-class", "dojo/touch"], 
		function(declare,WidgetBase, domStyle, domClass, touch) {

	return declare("mui.folder._Folder", null, {

		buildRendering : function() {
			this.inherited(arguments);
			domClass.add(this.domNode,"muiFolder");
		},
		
		postCreate : function() {
			this.inherited(arguments);
			this.connect(this.domNode, touch.press, "_onExpand");
		},
		
		_onExpand : function(evt) {
			this.defer( function() {
				if(this.defaultClickAction)
					this.defaultClickAction(evt);
				this.show(evt);
			}, 410);
			evt.preventDefault();
		},
		
		show:function(evt){
			
		}
	});
});

},
'sys/mobile/js/mui/device/_attachment':function(){
/*
 * 附件上传类
 */
define(["dojo/_base/declare", "dojo/request", "dojo/topic", "dojo/_base/lang","mui/util"],
		function(declare, request, topic , lang, util) {
			return declare(
					"mui.device._attachment",
					null,{

						fdKey : '',

						fdModelName : '',

						fdModelId : '',

						fdMulti : false,

						//附件类型 office,pic,byte
						fdAttType : 'byte',

						//附件显示样式 office,pic,link
						fdViewType : 'byte',

						//附件处理状态
						editMode : 'edit',
						
						//上传类型
						uploadStream:false,

						//事件前缀
						eventPrefix : "attachmentObject_",

						//获取上传token
						tokenurl : util.formatUrl("/sys/attachment/sys_att_main/sysAttMain.do?method=handleAttUpload&gettype=getuserkey&format=json",true),

						//注册附件信息
						attachurl : util.formatUrl("/sys/attachment/sys_att_main/sysAttMain.do?method=handleAttUpload&gettype=submit&format=json",true),
						//上传附件信息		
						uploadurl : util.formatUrl("/sys/attachment/uploaderServlet?gettype=upload&format=json",true),
						//上传图片base64附件信息
						uploadStreamUrl : util.formatUrl("/sys/attachment/uploaderServlet?gettype=uploadStream&type=pic&format=json",true),

						deleteUrl: util.formatUrl("/sys/attachment/sys_att_main/sysAttMain.do?method=delete&format=json",true),
							
						constructor : function(options) {
							this.init(options);
						},
						
						init : function(options) {
							//设置属性
							this.fdKey = options.fdKey;
							this.fdModelName= options.fdModelName;
							this.fdModelId= options.fdModelId;
							this.fdMulti= options.fdMulti;
							this.fdAttType= options.fdAttType;
							this.editMode= options.editMode;
							this.uploadStream = options.uploadStream;
							if(this.uploadStream == true){
								this.uploadurl = this.uploadStreamUrl;
							}
							
							if (options.extParam) {
								this.extParam = new String(options.extParam);
							}
							//属性间逻辑处理
							if(this.fdKey==null || this.fdKey==''){
								if(window.console)
									window.console.error("附件机制错误:fdKey信息为空!");
								return;
							}
							if(this.fdModelName==null || this.fdModelName==''){
								if(window.console)
									window.console.error("附件机制错误:fdModelName信息为空!");
								return;
							}
							this.fdViewType = this.fdAttType;
							this.eventPrefix = this.eventPrefix + this.fdKey
									+ "_";
							this.UPLOAD_EVENT_START = this.eventPrefix + "start";
							this.UPLOAD_EVENT_SUCCESS =  this.eventPrefix + "success";
							this.UPLOAD_EVENT_FAIL =  this.eventPrefix + "fail";
							this.UPLOAD_EVENT_PROCESS =  this.eventPrefix + "process";
						},

						//生成唯一标示
						guid:(function() {
			                var counter = 0;
			                return function( prefix ) {
			                    var guid = (+ new Date().getTime()).toString( 32 ),
			                        i = 0;
			                    for ( ; i < 5; i++ ) {
			                        guid += Math.floor( Math.random() * 65535 ).toString( 32 );
			                    }
			                    return (prefix || 'mobile_') + guid + (counter++).toString( 32 );                  
			                };
			            })(),
			            
			            //开始上传附件
			            //file信息:fdId, size, name, type, fullpath,status,fileKey
						startUploadFile : function(file) {
							if(file._fdId==null || file._fdId==''){
								file._fdId = this.guid();
							}
							if(window.console){
								window.console.log("startUploadFile begin..");
							}
							file.edit = this.editMode=="edit";
							file.key = this.fdKey;
							file.status = -1;
							var extendData = "filesize=" + file.size + "&md5=";
							var self = this;
							self.uploadStart(file,{});
							request.post(self.tokenurl, {
								data : extendData,
								handleAs : 'json'
							}).then(function(data) {
								if(window.console){
									window.console.log("startUploadFile getToken end.. result:" + data.status );
								}
								if (data.status == '1') {
									file.status = 1;
									self._uploadFile(file, data.userkey);
								} else {
									file.status = 0;
									self.uploadError(file , {
											rtn : data
										});
								}
							}, function(data) {
								file.status = 0;
								self.uploadError(file , {
										rtn : data
									});
							});
						},
						
						//附件上传后，注册附件信息,同步执行
						registFile:function(file , callback){
							var xdata = "filekey=" + file.filekey + "&filename="
								+ encodeURIComponent(file.name) + "&fdKey="
								+ this.fdKey + "&fdModelName=" + this.fdModelName
								+ "&fdModelId=" + this.fdModelId +"&fdAttType=" + this.fdAttType;
							var self = this;
							request.post(this.attachurl, {
								data : xdata,
								handleAs : 'json',
								sync: true
							}).then(function(data) {
								if (data.status == '1') {
									file.fdId = data.attid; 
									file.status = 2;
									if(callback)
										callback(file,{rtn:data});
								} else {
									file.status = 0;
									if(callback)
										callback(file,{rtn:data});
								}
							}, function(data) {
								file.status = 0;
								if(callback)
									callback(file,{rtn:data});
							});
							return file.fdId;
						},

						_uploadFile : function(file, userKey) {
							//子类各自实现
						},
						
						uploadStart:function(file,context){
							topic.publish(this.UPLOAD_EVENT_START, this, lang.mixin(context , {file:file}));
						},
						
						uploadSuccess : function(file , context) {
							topic.publish(this.UPLOAD_EVENT_SUCCESS, this ,lang.mixin(context , {file:file}));
						},

						uploadError : function(file , context) {
							topic.publish(this.UPLOAD_EVENT_FAIL , this , lang.mixin(context , {file:file}));
						},

						uploadProcess : function(loaded , file) {
							//var percent = Math.round(evt.loaded * 100 / file.size);
							topic.publish(this.UPLOAD_EVENT_PROCESS,this , {file:file, loaded:loaded});
						},
						
						destroy : function() {
							this.inherited(arguments);
						}
					});
		});

},
'sys/mobile/js/mui/form/_ValidateMixin':function(){
define(["dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/query", "dojo/on", "dojo/ready",
        "dojo/topic", "dojo/dom-geometry", "mui/form/_FormBase", "dijit/registry", 
        "mui/form/validate/Validation"], function(
		declare, lang, array, query, on, ready, topic, domGeometry, FormBase, registry, Validation) {
		return declare("mui.form._ValidateMixin",null,{
			
			validateImmediate: true,
			
			validateNext: true,
			
			//视图切换时校验
			performTransition: function(){
				if(this.validateNext){
					if(this.validate()){
						this.inherited(arguments);
						return true;
					}
					return false;
				}else{
					this.inherited(arguments);
					return true;
				}
			},
			
			buildRendering: function(){
				this.inherited(arguments);
				this._validation = new Validation();
			},
			
			startup:function(){
				this.inherited(arguments);
				if(this.validateImmediate){//等子组件都初始化完再注入
					var _self = this;
					if(!window.__validateInit){
						ready(function(){
							lang.extend(FormBase,{validateImmediate:true, validation:_self._validation});
							window.__validateInit = true;
						});
					}
				}
			},
			
			validate:function(elements){
				var elems = [];
				if(elements){
					elems = elems.concat(elements);
				}
				var extElems = this.getValidateElements();
				if(extElems){
					elems = elems.concat(extElems);
				}
				var result = true;
				var first = null;
				var errors=[];
				for ( var i = 0; i < elems.length; i++) {
					if (!this._validation.validateElement(elems[i])) {
						if(result){
							first = elems[i];
							result = false;
						}
						errors.push(elems[i]);
					}
				}
				if(first!=null){
					var scollDom = first;
					if(first instanceof FormBase){
						scollDom =  first.domNode;
					}
					var domOffsetTop=this._getDomOffsetTop(scollDom);
					if(domOffsetTop > 50 )
						topic.publish("/mui/list/toTop",this,{y: 0 - domOffsetTop + 50});
					else
						topic.publish("/mui/list/toTop",this,{y: 0 - domOffsetTop });
				}
				topic.publish("/mui/validate/afterValidate",this,errors);
				return result;
			},

			_getDomOffsetTop:function(node){
				 var offsetParent = node;
				 var nTp = 0;
				 while (offsetParent!=null && offsetParent!=document.body) { 
					 nTp += offsetParent.offsetTop; 
					 offsetParent = offsetParent.offsetParent; 
				 } 
				 return nTp;
			},
			
			getValidateElements : function(){
				var elems = [];
				if(this.domNode){
					array.forEach(query("[widgetid]",this.domNode),function(node){
						var w = registry.byNode(node);
						if((w instanceof FormBase) && w.edit==true){
							elems.push(w);
						}
					});
					array.forEach(query("[validate]",this.domNode),function(node){
							elems.push(node);
					});
				}
				return elems;
			}
			
	});
});
},
'sys/mobile/js/mui/form/editor/plugins/face/emoji':function(){
define(
		[ "dojo/_base/declare" ],
		function(declare) {

			var emoji = declare(
					"mui.form.editor.plugins.emoji",
					null,
					{

						getEmojiList : function() {

							return [ [
									[
											"e415",
											"1f604",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEIElEQVQ4ja2UXWyTZRTHf33e923XD8a6bkPGgsAcQxxxIYIdRIQwhGAYasAERCHBG43xwiujmOiFkSv5UCABQgzKjUH52IYYNBB10I5MB9MhNGTAxoBRutJ27dr343hRFvGDxAtPcpLn+T8n/3PynPM/8D+b60EP9WU0LHuY55+cTFNNhV4DMBC3BqLXOHP8KocuJvn1PxGWl1D17hw2b2ipeHlc4yJdmzwfl78aABkZxL7WQbr7pPXZ0fjnH57l7cQoQw+sdmopM6IbVcw81iwSbxMZ6RZJRUSGfyh6KlLE4m1iHmuW6EYVm1rKjPsLGzu4gh6qTryiIo0vLZuizXod8mlwsiDyt7QuUD7wjMPu2Un3geNXlux3wsN5hgDR7oVpHy1w7WpZM22B3rAGcoNgDoGTBjsNZgqsNDiZImbegfwdVKieKm+szHszOfHbKxwZI1R1ZTTuetW73fv4XBfKgPwQGDkopEDLQj4Fdgb07J9YLgH2KMqrmOnub/iq0zqaGOWWArQVta61vpqAwmVBtg/0OL3Rc6xft5tTrR2g3wL9FqdaO1i/bje90XOgx4uxmoWvJqBW1LrWApoO6E21elgrdUPhJmAADocP/ka136H9yHkWPpEGoP1IH9V+h8MHu5g54zEYVYCJVuqmqVYP02XqCjCqQ1oVhhsKaSjEkUSC4KQA729poH52BZmkQybpUD+7gg+2NBCcFEASCSjEi81zu6kOaVWA4QLKO15zR8IrK+uURwO3DQEBtw6OA44GebvYOo8GygZdQdaCjAtMDSdvEzl6OzZ/VyGsA3I9YccxM3V4YdN7I4RCFvWPwISHoKwcSryAA7kcJBNw4wb0/g6mbbDpHT+khesJ+zYgOmBG+pzzz+XNJhWwMH3jUU/vJ+HL0R+/in15CMfKFgfW8GP4JuCbOQUqLOzODeDPYvcbRPqcHsAEMOqCtKR2eGzpCch3W5HVC+bKzh0fy49nf5EbKVtMEcmLyEAiLydPR2X71s3ywrxZEt2DSHdAUp947LogLYChA1ZsmK59rWb7m9OMFYtXBrh6oZO+PZ0MfglfK3BU8QuVDX4HJAmrm2HuMwGkB/a1m+2xYboAa0x67vIS5n3/hv5F4yrvJGrgmwMmmQsWpSU2hl6Un2kqUnlFsFGn+UUD+qD7UO764k+tdYlRTgOFMek5OYu7J3qd2FNeJzyxUhtft8jAN0XnrqaR03TM8QbeWoOG5W5mz9PhosPPraP9q/Zabw1mOANk/7FtgMqQl6Xblqu29D6PJaf9IpdLRfrv+eVSkZ/8kt7rsbYtV20hL0uByn/bNvffxwE19SHmPDvdtTA8XT1aU+WqABgYknjkknOh/ZKcuniHs8AAkAbkQYRjpoAyIAj4Afc9vACMAMNAsjidf7U/AC8J3bioSnIJAAAAAElFTkSuQmCC" ],
									[
											"e056",
											"1f60a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD80lEQVQ4ja2UXYiUZRTHf8/zPjO7s86ss+s2pjuYNq2rspGI2kokGxgYoRBEoGkGKlSXGSHYRTdRl+FFhkVfUlC5pKuuhheZII5ZuX5guauurtPkjrM768zsfOz7vs/pYnZxi4QuOvCHw/8c/uc8h/Mc+J9N3S/QHqVj7UM89/g8VsVbTBwglfVSZ4Y4fewm310Z49J/EmyuJ7ZrBe+9vL5lc2TpU8aZ9wRqxlwAZDyNP3SKQt8P3mc92X3vnGXnaIXMfbtd0MiiM1v1gNu7RiR7WGS8TySfFMmdrCGfrHHZw+L2rpEzW/XAgkYWTW9sylFNdcSOv6STS19cO9959DWoFsCWQOQfZRXoBqiL4F/8gL4vj914+gvbmauSAcSZTHPeXa32rN/w8GrTsQHKaXAzYAvgF8DNg1cAW6xx7ghUR9Cz2omFBqKh22Nzvr/BwSlB3RZl6Z5tod2hx1YqdACqGQiUYSIPTgmqefCLYEr3uPIo+BV0SLMkeKuj+yevZ7TCsAacdQm1saE1rNE+FAfByXI5eZ4tm/Zy4tApMMNghjlx6BRbNu3lcvI8ONlarvZpaA3rdQm1EXAMYFYlTKcTCUI+DdaAZznQ/TutYcuRgxfoWl4A4MjBQVrDlgPdv7IksQjGNWgPJxJkVcJ08otrDBCY2+zE8AzcGYOKj2ihqTXEjp0J9n2doThma7u5rIXNG2J88nkauZpBWQV1DtQZ5jY7MXADBjCIRQoTMCKQ91CNilfWNKBKOba9EALXBaj5xVwtNliFvGBnGmhSYC2AMYCks35WSsU2ygJFD7SgfCCowKEGAAsEQXmCFEGNK5Qx2DpFOuvfAUQDbvKmvWCth4766JjHcJ3H7m9dCuUqtFZgziTiFbK5Ku/vd7k7w4VmDxX1sZ5HcsheBFwDVHuuSe/bRbs90BbQuJYHZ1k6QsKbu4S2NmH+I7X9vt6vuD4IW7YronEFOY0Yh+o11/Zck16g6gAyWqE4W8vClctNu4orCMOC5dD1DBTLitt/aMoVTfsyeHWH4qE2VXvcTAfJw4f7q4e/uiQfAXenPlSwuZ6uc2+YlD0ZEbkaFhmsF0kHRfKBexgLiAwFRa7Wi/SHxf4YkXM7TKq5nq7adKeNu+xx9/hlO/Bk2HbOfsDMVCEHREFZw7iCkoayA54DEwabgr6jlVvPf+y9ni5yGihNFwSo5ipkus/Zn0N/ek2LG0kEtKOVOKAdcB0oauwwFC66/t5Pq0e3feO/NSk2Csj0azP9+kSAePssVjy7UHV1LtSL4zHVApDKSDbZb3870i8nroxwFkgBhSmxfxOcMg1EgSZgxtR8gAlgHMgBY5Ob+Tf7C2bR3ypQnhOCAAAAAElFTkSuQmCC" ],
									[
											"e057",
											"1f603",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEGUlEQVQ4ja2UXWzTZRTGf/+vfq+0bGtglq/NMRogLCbARhQxTCEQ5kfAZPgRAndqNDFeEEVvDBFvDKjoBYQYlBsvJOqGGDQSJbCtAacj4DZxY90G1Nq1a7uu/X8cL7olxEjihU9ykvc878nJed9zngP/M5R7XTSFWLV1CU+uX0xrtEaPAoylrLGeUS6dvcnpgQxX/1PC+R4ib6zl0J72mueqmjfp2uIHUfx1AEhhAnv0Arm+89YnX6U+PRhnf3qG5D2rXRZkRc8+dcg80yaS6hQp/iIy1S0y+WPFprorXKpTzDNt0rNPHVoWZMXdhc0dlLCbyLnn1e7mZ7Yu1Va/CEyDMwPiQNmsRLkMUFRQPYAPu/8ofafOjjx60mmZLJEERJtNqL2zUfm4vaN+o76qA+wkxeQIr71wkPVr6vBWAUyTHh1h/yvvsqklimHkUUP3E/EOhby3Mwu/HeFLQFRAbQyxZu92T4e+JAaFBNgJrl2JkxlMcTXeC9wB7nA13ktmMMW1K3GwE1BIoC+JsXe7p6MxxBpAVQFtR4Oy2xcNqCgWFIehfItCNklNGPLZFJQSUEqQz6aoCUMhm4TyrUqsauGLBtQdDcpuQNMBvbVBb9GCLijfBjFAsQm4sxQtqPKkIdMHQJUnT9GCgDsL+d+hqIFiogVdtDboLVw2dR0w6qq1CIYLyjlwHLAVYvUaC2IhVjb5oVj56JVNfhbEQsTqNchlwJJKk1wu6qq1CJiGDujgIHYZRdfAbYNX8M5XeOvtMBTKUJbKjC6a5UrFCldQwNQQ0wYcAF0HZDxtpzDzjXjhwJsFwtUWy+thUR0EwuDxVCosFiE/CaPj8NsAmLbBgdf9kBPG0/afgOiA2T3s/PpEyWxVAxambx7GwyfJ+opMpG5i/5HEsaYrA2v4MXwRfCuXQa2F3bsH/NPYCYPuYacfMAGMxjDtU0fdtvQH5LvDyK6N6+Sjo+/JT/Gf5daULaaIlERkLF2SHy72yPuHD8lTG1ZLzzFE+gIy9YHbbgzTDhg6YA1NcvnE12bXy/XGjs2PB7h5vZfhY71MfA5fqOColSerNvgdkAzsaoN1jwWQfjjRZXYNTXIZsOak55rvYcP3L+mfNe/03kcUvjllkr9uEfTYGHqlKaapMlVSCTfrtD1twDD0nS6Ob/7QejY9w0WgPCc9p2iRPXfNGXrI67QsrNXmNT5i4Fuqk9U0ipqOOc/A22CwapuLBzboMOBw5euZxM7j1qsTeS5VxP+PbQPUVnvZcmSb2pk74bbkol/kRlAkMWs3giIX/JI77raObFM7q71sAWr/bdvc7VcB0aZq1m5frmxqWa7GohGlBmAsKanuQed616CcH/iLODAG5AC5V8I5qEAICAN+wDXLl4ECMAlk5qb5bvwNrDvQie5JWqMAAAAASUVORK5CYII=" ],
									[
											"e414",
											"263a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEFklEQVQ4ja2UW2xUVRSGv73PninT6QzTC1NLpxUYKTQVqAlICxExoUiCiD7wIF4TeDBEY2IkIZE3NeoLiYlGog8abw+iMZBa0WokJqSDpbFyCZdahdIOtJ3plM6UmTNzzlk+lDFoJPHBlaxkZ+21///fK/kX/M+hbnexLMLdW+7k0bXNdMbqTAxgNOWMnhih7+hlvrowzZn/BFgzj+jLa3jjmYfrngy1P2Cs5vWo4EIAZDaJO3Kc7OCPzodHUh+/1s++qQITt1W7OMzyE7v0UKlnk0iqW2R2UGQmIZL5aS5nEnO1VLeUejbJiV16aHGY5bcKKx9UdQXR3qd0ov3xLYusVc+Bk4XSDXDdv9NaFvgqwYRwf32bwU+PXur6yOvI2EwAYpXbXt+g3t3+WHyD1fk0FK/iTo2gmQGZheLMHIGaBSeDmx1H+3Poxjbq9flI4Fqm4dtLHAZEAXpphPaT+wP94a7N+vigoftwH4WiUHtHLS8820GoygdANlfirYMJ0tfSzPMrHtreyfp2h5ne77zVr+bXDE0zaABrW1ztDDZXaccuMpnJsGdPB02NIZyig3EmIecAEFKGfc+vwvgNV8ayDJyZxLGDBJur9LZ4YeeBATltANMZNx1WwA+FJI+sqwR+h5yNyZfAD9g351hhYWaBgI+mcAVN6yqhkISAn8646WCgZAzgW1hjRcU1qGvT4Exx9kqRT45d5+p4iZVtVby4ZwEAB96Z5NTZHA31Pp7YOJ+2Jj9YGqkwLKyxolDyGcAgHpItotICeZexTIm19weJxyoQo8AtALBpaxVdDwYZHrUZS9u0uR5e0IJqBZ4HYAwgyZSbkhu5pV5eUGmHzY0KFimI5iEEFD0AVrZqyMKKIHBZIFlAY3ArFMmUOwmIBkqJy94pz3PQERcWOIi/CNjgK4DKg9+eS52fq2EjpojUOBBx8RyHxIh3GihpwD4yLD12zvNosFBLLFRMQRSSacjmgflAGDJZGL8OLADVqGCxhdRb2Dc878iw9AC2BchUgVy9lpZ7V5tlKqagBojC0JjizVcs/jiv6DumOXTI4p77FLVNGuZZqLCFzMDBL+zuz87I+8D1slPsn8dkdEuDdNXf5Q+rOg0KGlqhJa45129hodn9kiK+QkHBAr8Pmdac+r4wtuuQuzfvcAH4y6cKqF4SYcfAXjPi/lAlcj4kMlwpMhEQmQqITAdExgMiv1WKnA2J21slA3vNyJIIO4Dq8l4oKwSwMwUmvvzFOxm46lS3hoj7tKWVbUFRQ1bDlMYbh+zpkvveB/Y3uz939ydz9AFTgNy6bW5VGgJiy2pZs7VFbexo0a2xqKoDGJ2QVOKid+7ri3LsQpp+YBTIlsH+DbAcGojc/EqQOQMCFIFZIANMA94/H/4JxEPPH5Uk1DMAAAAASUVORK5CYII=" ],
									[
											"e405",
											"1f609",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEFklEQVQ4ja2Ub2jVVRjHP+f8zr3b3XbXnVvTjYupFzcdkxakbgRqoLUwrV4YaH+IFApf9UbSCpIgCioJXyTVi6S0F5ZFalMR+4u4aSNxSm5LtO1u6rz3bt57t/u793d/5+nFdkNCoRd94YHDcw6f8z0P53ngf5a620ZzhNbO+3hq+Vw6onUmChBPFOM9Q5w+9hff9k9w4T8BZ5VT//pS3n1hfd1z4baHjTP3IVRlIwAyOYo/dIrMuR+Lew8lvnj7LNtTLmN3dTu/mkU9m/Wg17VaJHFEZPKcSLpbZPyX6Uh3T+cSR8TrWi09m/Xg/GoW3W6stFA1ZdSfeF53tz3TOc9ZshWKk+BNgfj/ulaBUwHBMH7fR5zbf+zqms9t+3ieMUCcmWPOOyvUnvUbF6wwSzaCScHkKDaXRJEDLw3FzEykoZCEQhJd20x9aDASuj7RcPwq35WAemGEtj1bQrtDbcsUNVWc+uYH3v/wOPNiEe6tLUA+Df4M0GZAMuCNg++iQ5qW4HDrwTPFQymXGwZw1sXUpopolSas+fXrkxw4NMCbb3VSN6sAt4ZB7HR1AgryQt61lEWCoMdB+1REq/S6mLtpV6/0GcB0xEy7iZTBxDA9faO8t7OJ8oqLcC0HASDvg1ZkXdj9VZrkmItRDo+tnMOqFZWY6iAdMdNOr2cMEGisdeoxAchleOXZCCaQJN6XZ8cHI+zY2khLawW4PlWzNK+9XAeVDtmEx8+9UxQmPILBII21Tj14AQMYsNhiAa0cTNGHkObS1RxOGgYuT9Gy1AFt2bt3ku6zU5SXa55+vIq1j1RCooj1fMACGAPISMpP2EJ2oRgFFHGKltYHYF5vGW3tLjg5MJqGFp8Xl2usAmOzkM5hMdiCMJLybwJiAK/7ij3/pOt16IgCPPB95jQKO3cpsBayAkF49AkFPpBVkNNI1kcFBMkJ3VdsH+BpIH94ULrcm77VjkaXaQhqMIrRfqGQFogqaFBkrwnXBxVYBb5CBTRKadybvj08KF1A3gEk5ZKdbaVp2f2BZlWjoVzgHhgYVuzc7nDlvOLUMc2+fQ4PrlTUNmhQGnQAm4CP9+ePfHlBPgVulTolfyYu8c56u2b2/EC1qtEg0LgIFjdrLvU6GKV56VVFbImCKQecAJJUnD/ujmw+4G/LFelnuiD/9HTNgggbereZIf9klcilsMjlCpGxkEgqJDIRErkREvmzQuRiWPwTVdK7zQwtiLABqCnNhZJDgPy4y9jB3+1voWvFmsVhYgHtaJV3oKAhoyGlsTcg0+f5n3yWP7rlgP/GaJbTQAqQO81DBYSBaHMtS9c2qVXtTXpxtF7VAcTHJNE9YP/4fkB+6k9yFogDmRLsTsCSNBCZeUolEJzJF4BJYByYKP3m2/U3OBTWBAnHkvQAAAAASUVORK5CYII=" ],
									[
											"e106",
											"1f60d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEM0lEQVQ4ja2UbWiVZRjHf/fz3Of9xbN5ztmLZzpZ7igumIa2w9AyFc3KXhCK1BKGEaVIRRD1oQ8VBX0yooRETAnCilI3c0lvVmxq0qbi1Ol07mzN7eycs52XnZfnPHcf5soooQ/94YL7vq6b//WH+39d8D9D3K4Q9tGwdg6P3j2bSMgvQwDRmBE9cZ2Oo/18eTHJuf9EWG4n+NoS3tmy3r/Z07hC6rObEa5qAFRmiNL1X0h1fW/sPRTb/9YpXonnGLmt2rle5p9o0XqLR1YpFWtVKtOl1ESnUonjUzHROZWLtarikVXqRIvWO9fL/FuFTR9EmY3gsae0zsaNa2v1O5+DQgrMSTDNv7fVNNAcYPVQOvsBXZ8cvbZ6n9mUyDMCKP3mM/3t5eLD9RvrlstFGyE7BNYk6Bmw5iCbgFIK3EXQ0iDGITOKVrmAoP2Sz/F7oqr9GgenCbV5Php3bXW854hERGqihK06S8/Rbt5/7GP0Upo5S7ygZzm+6zh7tn5K5R2SQKOVVDSGo8LGQq2/4fOTxqF4jhs6ILc0iBce3OBvPrJ3jC+eOUZ+YIzUV33UX07y28/93LWpAjOb5PCmb2ieMIj3Jbl86jqfPd9OppBnYbMU/Wcy6Y4hvpOAjNTJJlxWRtsHecJvZ1Z3GrfHQSLsJ+PNYjHPT1lpsYuGCSdlTgfp7jS1fjsd7YPwZBWROtnEr0WpAZbqcj0oHJLIjiribrDZAafJgFmgYVvwz/9o2BZkwCyA08Rmh7gLIjuqEE5JdbkeBCwSkGCikjnC99mJhQNcOJAi/W0Wy8NOQksVjOYACC2VDK/W6Tg4gnulk3mvB/DPkqjhHGACSAmowXgpViqk52ljGfzlJv5XYeB+QaA2D/lhcNyUOAkNm3RGlwlqFhmQTKBiGqWCYjBeGgWUBIqdV80zj+SKEeETqGIRkS5Rs0JBUYGhoPSXa+1BQU2tgGgBldNRVgtqTNF51TwLFHVAxbLQ0qQ9bquWQsxQ9JwzObgPhAm5vKCYF6TTgpEbgr5uOLwfAn6Br0IiDEm2zzBf+sJ4M57jggSM3gSn9xwutm2vtTyklUsq5kPXGwZX2kGWKQw1JVAC+ZjACAg2b9dBk5jDij1txbbeBKcBY3pS8iejKro2aK6umG3xOusFi1dqxAcENV5BXUijpkLD59bwhQXPvivxBCRqUHCmPTfYcqD08qTBRaA0TWhOGowfO2/2LnObTZUuywzPXJ3wPToTdkHWIsCvURnRWfO0jtuuY/ZA19e5gQ27jReH0nQA2X9sGyAw08Ganeu01vHdNkP95FLqikepqHcqrniV+tGlxj+yGTvXaa0zHawBAv+2bW69e4BQeCZLHqgX9zbVawtCQeEHiI6oWOcls6ftkvrh4hingCiQAtTtCKehAT6gDHAB1pv5ApABEkBy2s234g97XctiiIuXYwAAAABJRU5ErkJggg==" ],
									[
											"e418",
											"1f618",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAELklEQVQ4ja2UbWjVdRTHP7//7/+/d85dt7un3Jx3ayiaU+cKyVmmiZW6MDEajJAkKOilBRW+SNHyRdSr8oX2oiDSJK3ByIeWDyC4ljk3dcPHUpt7cm73Yffu/h9PLzZhSEIvOnDgxznn9+HL4ZwD/7OpRyXm5rNgbYyNT1eyvKJIVwD03vd7229z9tgdmq8n6PlPwEiIgvefYufbDflvFdStyDGr6lF5MQBk7A7erTbiF85k9/2c+OrT83yUcog/Uu3MXGKtTXQ4zfUiQz+KZC6KpP4QSfw24anzIplOkYFD4jTXS2sTHTNziU0Vph/AIiGi329SR1ZvWVlnvrgDXJsgfgPlDkN2COx7kB2ceBs56KqVxEr7yursv1c1X5UfHJ/sVKDe9Yza8/qW6nX6+Xc413KUz3buo/LxYkpKfLAT4KfAT064NwxuHKN0AbHItbJQX/yxX2/TAogCjKoZ1HRsy7kQfWWd7ujU7Nt7nA93vEFVVQ6kU5NlgDZACzg+5IVA50H/JUZPnvCf3J2tu5Wk2wR0Q7VqisTyNK7H0daLfLJrPUVVI5DITLTHDkAr0smAL7/u5t5Qihm5Fhsa5rGkdjqRWJ5uqLab9nTKdg2E333W2rZ4eX4lKqB2USHRomH6u/5i++5OqosTFEXjkBkkFIqzpCaXdWsKmV2u+LMvyZxSG62yJG+Py+GeYL8JmLESXSZWCOUmyFejkDHovpJk6EaaSz1h5i4MQSAcPDhI++9JpuUaNG4o4uU1+TAaRyyLWIkuA9c0AUspUeK5oDQEPso0mPdEiFnzcli4OAd8Gwwwiw3WvlZIIIqkCiCeQVyFuD5KiQIsE5CBhDcizhhiKhQeeAGzY4qdu8OEdRKygu8JrzZODkVGgQMymiHARBxhIOGNAGIAbtvNoCvIOqiQA2EbrCwEGcIqCWoM10pzuXecb/emuXomDdkxTh0ZY/OaFN8dSONnHH7pCvrU5BzKSAbjzWVGY7jMVCokKBOwACsAS6FzFcXlwqnjGrsfFiwRvtgKjUGI4HqI02d9/JvB/PsipgZkeJzUHEtqaxdZ1arAgByBMGCqCXBEsf8bjboGm9f6UGgybhlEu0wWF8yg0tEUeS49XhB/sCn2+V4ZWF8uL5RUWdMpMMAEtAJDAYqapXC8XXG332DRCoPCOSbtzTZFGZ+U49KSdXsOe/LeA2CQchhp7Q5uPBcJ6kuLzYiapidghoE9ZtB2BGLAynpNuCCEHja40ueNtvc4Y59nvD2HPPnAhutTz5cCSsryWPbxS3pr0yZrVbhCY0QNUAIJH8aFwFbYw8KBFvf0tmP+3sE0V4B+YARwH76HCsgHKpbNYvXGGmP10vnG/PJSFRVRanAoGDl3Lbj602U52XZXTgC9QAKQqYB/Mw0UAlFgOhCajDtAGhidVOQ//PEfMoDWgFnab/IAAAAASUVORK5CYII=" ],
									[
											"e417",
											"1f61a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEEUlEQVQ4ja2UbWjVdRTHP7/f73/vdffu4d5Np5u3u+tqNJJpM3yY07QwygyRlGAVBUXmqyiKgoiCgl5EEATS07swTNBSo0w08yFcKpubtdp8ahvb3SbdO+/u7t39P/1+vbiORBB60YEDh3O+58N5c77wP4e43aCpinseSbBlZQOr4zUqDjCS9kfODHH6x2H2X8ryx38CVgSJvn4f727fVPVCtHXtHCvZhihPAGCmh/EGO7l+/lTx8++zX3zQxds5h+u3vXZBmMSRDrqd/W3GjO81ptBjTK7LmOyvpcx1lXrje42zv80c6aB7QZjEzYfNFqIiSGzfNnn0gWfWtlorXgPtg5MFXwPmX7mSEKwCqfDOfsjPX546v3Wv3pBzmASMuqFU77WLnU8+m9xord0OOo1J/4UQ02By4EyBlwORA38KkxtFlBWR8SU0hPrqAqns/KNDfAcYAchkJYu735xzPrbxYdU9EObgN7+QzbvUzK/hlR2riUQCAOTzLh99epr0RJqqSIDNj69h2d0FJg8d9pe9X2wdnKLPAtSmRtFRmSxXnuPy59Vhtj6xlDuTMbQ2hEUaCj4AYaF4eUcrUgquDE5yoX+YJYuiVCbL1aZGu2Nnj3nHAqw1jVa7ioRgJsVTGypAjQPD4DigDNgloAgpyn0BZUFaFgVpSZRBYRQiIdY0Wu07e1zLAqxEraozxkKMT4L3N5fGHHYdn2IkZbO0pYKXXqwF4ONPxuj9LUe8PsTT6yppqg+BJTFBi0StqoMSMCCMEWbKgQyIosfAuEPTvWVs3BzDKAnaBgkr11ewoj3C5eEiAymbJs+gwxbEQGgjgIAFmImMlyGfx+QNIu3yWIOCpIB5LoRBFw2uDSuXCLBh1TxgyGBSDhgLExRMTHoZwEjA7RzUvdp3ocrDVHugiqALQAFEHi9Q4NK1GfYdmOFi3wz4hZIm6iIrPYzv0jmoewFXAvbBK+aQXdBGLpCIuxTEBVQLCGsIQjAKza2aoRHBhbNA1EC9gKSC+RK7oM3BK+YQYEvA689wbs8J95i2gDtUKWskhBWEBFQIvt5tUT4B29p9CCpoUIhFCq1gz0n3WH+Gc4A3+yl2V8qMPxrnoXmNwQhzJYQAJUAKQLB4ORw+Ixgdk7SslxC2YErRf8K+9twe/42cQ9/NQJ1zyBzp05fvr9RttXOtClGmSjApsaclnT9AAljXpghFg+gxwYXDxdTWz7xXB7OcBKYBZoEAxfQMEwd6dG91xq9rjpJUSIRUWEbSEIXkQkFASIpXNbu+so8/v9t/a6gES886yK1+KIAqIL5qIQ9uWSwfXN4sm+trRcwYISau6cy5i3rg29/Nsc5R8xMwAmRvsqPbOrYCqoEYEAGCN/oOkAcmgQzg37r4Dxf+wwV1GcNvAAAAAElFTkSuQmCC" ],
									[
											"e40d",
											"1f633",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEQ0lEQVQ4ja2UW2xUVRSGv33mzHSmQ4fODJ3SUlqwaacoWBOtBZISLoIogaSNQESJNvhgIT4QXoz2UY08oA+CDQFRIkZuKYkWSiIVAg0UKQ0Fmt64FGgL0plOr3M5M3OWD0ONUUl88E92srLX2v9ee/9ZP/zPUE9L+DOZv7qAyvJ8FuXN0PMA+gOJ/sv3uXT6Hie6R7j5nwg9dnwfv8znW9ZlbXaWLtMtsxeDKzeVHBsk+eAik+1nE9/8NPT9p7/x4XCUx0/tdq6LkrYaS69cWCcSaBAx2kUirSKhC6kVaU3tBRpELqyTthpL71wXJX9tbCpQ7jR8v75nabHN98+pb88h+PARbq+bD3a8idubDkAoGOarXT8SCobw5sykqvQhxs3uvuX7kwtDMR4DMkVo+XKZOrh1W+Fb9QMreL4kl3l+L4aRwKYmUVoCADF1DHFis+l0dge53jVI1awmvt5z+4ftZ+UdIKkArSiTF67U2q9MX7FSY24pPLoPkRhkpoNhA+PJtTbAZsBIGBxpMDMf7rYz2vSLWfZJtKx3hGs6YFlbqDZlFGRoqDG+3dNCx1ARKBf56V1sWxvHkjYNgOTkBHt+tnI/XAKS5LmsFqrXxMkoyNDWFsY2fXFVbgA4jm2wNktTlhzZWS4HDp+X8YjIRFSkvvG61NVWiDRniTRnSV1thdQ3XpeJqMh4ROTA4fNyZGe5SFOWHNtgbQYcGmCd5dV8ZthgzFVF9cYKqjevZ/mScipXL8BZXEM4GCccjOMsrqFy9QKWLymnevN6qjdWMOaqIhkxyPVqPsCqA7qIkIwYuNxuALKzs9FUSq/pHi+iYqnY6wVgTkEBWT4fAC63m2TYABEAXQdkIJAMLI4nirzRg7TdfZfdu3cD0NMPhOpwzoukROmso6d/FUeOHgWgrS+OZ/wgNkeMgYAaAsQC6Pl2Slf47S8V6ne4ea+JjpCT3r4eQp3beXXOSSx2QINnnF20drTQHUin60478WtbWWlexByz8925+KlLDzmtAGvxdF67+r7txDQ3GuMGMQeYHnDkALMBlwIBRgUGIDIIWhDSokCGjYkQ5ot7jcqeURotgARjTOSaZnFZjs2vREOPCVabAo9iOKmYiCrCk4rYmMIRU1iHFPqIAqxIzMK+80bDoVvsA0anJsXmSWPxuTX6oQXzrbNwm+AWyBM+2q8YG0oVuXzwWbVAv4JhBaMaNzriA0tPJt4ejnERMP6cZSCzcBqvHH9d31W6yDpbFWiQY8JMBXZJVUQUDAo80pA+k/bL8QdvnErsuD3BGWBkSpQpxEIGj4/fMlsdk6b7WZ8q1B0WTVMWEA2iGgxrJIdg8nYiubfBaNxyJlk7EOESMEzql//hhwrIAPL8HsrWFKmlC/3avLxsNQOg/3cJtHSbnSd75Vz3MFeAfmB8iuzfCKegAZmAG3CSsgVI2cQkEHryRPPvB/8A9L7Znjl0mX0AAAAASUVORK5CYII=" ],
									[
											"e40a",
											"1f614",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEJklEQVQ4ja2UXWyTZRTHf8/zfmztvlo6ipQ5ZYN9yHC9cLqJIZAAAYkmXmA0fIQIxkSvSFwkwQu9MEoCNyaiqFEjH0YSosAYEOJHNAsDXMAxw8fQYSmDdV3XtV3bt2/f9/FiW1hMSLzwJP/kyTknJ/8nOecH/3OIBxUafbSsfYQXnqqlo6ZarwGIxovR8xHOnf6b764nGfhPA+eUEtzVxgdbn6/eXBFeqWu1yxBlIQDU5DBOpIf05Z+KXx2PH3jvIjsTeWIPdLuwkqbz2+Sg3b1KqXiXUpOXlUr1KjX+y5RSvVO5eJeyu1ep89vk4MJKmmYbm3kIfwnBs1tkb3jj2ke1pW+AmwE7C64Dala31MDwgizHufIRlw+dvrX6a7d93CIGKG26VXt/ufj4uZfrluvhjaAnsGND5FIxTL0AdhqKaVAZMolhhBVHK7eQvkXMLbnh895Lzj9zi2MzA+ViH+F92z0fetvahXIk+3Z/w4HDPWRsl9amEigkwUmByPHtsQE+/+QUt/oHaAvPRavSadYiLUcvFI8n8oxogL51idixfp1vmQwuYPfeXwnVVtG542nCLV7IjEBhAoopKKZoDVezbk0DQ9EkJ7su8UxHNYY1KiJXc5lzd/lRB/SOer1dqzJRqdu8uiVEYBEwehHyzn0BlGqAhhQaL231M3YzhEoNo1WZdNTr7fTZug4YoYAWxDARZpZT30cpcR0eb/ESuW3z+182b26vBmDP/jitdQa1Dxv0DwxjSY1NL84BwyQU0IJgGzqgg4tbLCBzDqtXetl3cIyzPVkq5kpe2RwAswAC1j1bxhcHxkh3u8yv03l9UwByFq7tAC6ArgPqTsKJu4XMYnTBvEqXd3cZFAs6ehlQHIdJF4Alj0n27jEpZkE3BYxP4OYlbkFxJ+GMAkoCdu+Q26/yNpg2rsrDRAbdyUytisyCJz8lPQtOeqqWzOA6eTBtVM6md8i9AtgSsE4Mqu78qONKTSJLJJgSPIJoVGBZAhYICAkyk4J79wSUCjAk0pRIIcmPOu6JQdUNWBqgEnky81zV8GSr0Sj8EkoVVMHgbcE7OzWG+gU9pyUHD2o8sUIQeEiCkCAN3DjsP2R1HR5QnwETM5diXYiq6Nqgu3reQqNS+CUoCDVBc6PkWp+GLiSvvSWoXyogq4FmoMYE/Wfyd7YdcTpzRa4Dzuyb9tf52NDXqUecH8qVulah1J9epWIepRIepZIepUY8St30KvVHhXLOlqu+Tj1S52MD4J/hwoxDAGs8T+zoJfc3z92iv7mCekNqUlgaFCSkJSQk7gikr9jOp19ap7Yfcd4eznAOSDCNkH/zUAAVQE1jgLb1DWJFe4NsrgmKaoBoTMV7b7hXT95QP18f4yIQBdLc59EDiS0B3/RXygBzOl8AJoFxIDmzzbPjHxSw3MWlPK+lAAAAAElFTkSuQmCC" ],
									[
											"e404",
											"1f601",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEGElEQVQ4ja2UXWhTZxjHf+95T9IkTbvElIqNH1M76yRjIii2G7KPCsJQUIZQ182BIoztZl4NvPBiG9vFmLANFBni3HbhqJsaUipzWsWPWumouhW0spmt7do0PSc2X+ckOefdRRoVQdjFXvjDw/993v/7PA/8H/ifj3jSRVuI2KYlbF2/hBeiERkFGJ9xxgeSXO5L8tPtDL/9J8F5Ppr3reXTt7c0vdmw+mVdLu5ABFoAUIUJnL+ukB0+Xzl6Ov3tx9f5wLBIPbHapY2sHNyl3S33dio1HVcqP6zU7IBS5sUqZgeq3HRclXs71eAu7e7SRlY+WlgtEOE6mn9+SxtY/camp+Vz74CdA7cASj32rQAtAHVBnFsHGf6+797GY+560yYFKDmXJj/ZIA5u6Vq2QY91QXECyilws+BkoTwLlSy4uSpXngF7Bi3SRrN/NOSfzCw4c49TNUHtmRCrD+72f+F/fp1A84CdAk8RSrMgC2DPgpMDvfCQKxrgWGh+jVXev2MnBiunDYspDZCbl4sdgUVBDVGBwp+gpxm5doOd3Yfpj18GfQr0Kfrjl9nZfZiRazdAT1dzZYXAoqC2ebnYAUgNkB2terts8EJpEqwxKCQ52TNEtN4lceomTFeROHWTaL3LyZ4hKCSrudYkssFLR6veXhP0tkRkMx4vlLJgp1GGQTgaZP+BGG1rmshlXHIZl7Y1Tew/ECMcDaIMA6w02FnweGmJyGbAqwM6uCinhNIkmnIQUrCnK4gsZdi93Q/lMsBcnGFPVxBhlXEdhRISUXEAF0DXATU+46TdUq5V6IJbSQ8/DjyL41lA+KlGzNn7zI9ESJsmocZGZkyThdEWJpIjdK4apj1WxrUVE4YzDSiA4N514lDph4ByLtarox9uV9lUUl0616fMiaS60n9GVfKGGrx0XmXTY+ri2YRyXUvljX/UZ+9vU86FelU6HlB714lDQFAD7Pio6rWmHVdoGrZbx/3pFAGvB7ecp0642FkDr2vjFLL4JGAVyJkmdkVHKQ0r5bjxUdUL2DpQGTUZOhIvJ95d4tn8YnueQ19+RC5nEwwGKBaLNDQEyeXz+H0+8vkCfSeOUShm2bYljHNfcSRRToyaDAGVmvW883x0/PKe/t3iV3xRw+dSqg1aqNpoQIk5aOiaJGxrjF+wxl/9qtJtWFwBSg+8DISWhejs2aN/HtvoW6jmC/A6VcEHfhbgCihJmFT8fs4ae/1wZe8fGc4CmUe9DGCbFqmeX93r9VOVebEQy3y61HQhkbpEuhJZ1BBpKIyUna+/sft2H3f2TeS4Chi1Nh7fhwJoABa2RVj72grxUvsKbVV0vmgCGJ9S6at33JHEHdV/e4brwBiQfTiTJ29sDQgBYaAe8M7xJSAPmHMtuo8//BfkmP/RCa2+wwAAAABJRU5ErkJggg==" ],
									[
											"e105",
											"1f61c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEOUlEQVQ4ja2UWWzUVRSHv/8yS6czbacd2k47BbogQgXbAMW0hda+UBYhVYO4BLAPYoxxI8QIDz7hi8YExUgUjQnUILGp1TTYgITFINCWAg5CWdLQQvdt1s7Mf7k+DE0alMQHT3KSk7t855d7zznwP5v0qI05KeTW5lFf6aNmaR7lAFcH6D53j9OnBvh1dJqh/wS0KzjeepLdb651vJ29fIVTnVeJlD4XABHoQ797jpHOjvD+Y9F9n13ho5hB9JFqcxz42jfTGW9eKcTgUSGiV4QIdwkROJ/0cFdybfCoiDevFO2b6cxx4JstbCaQnBYyft4inVn9Su0TyvKdoMVBD4IQD6WVweoCix3j4iecOXzKv/GIWB3WmAKE8uCY8mGltO/FrfPq1fJtEBuB+CDoITBmOSGwBiB0FxIjyIVLmWu7kS31T2Wd7KcNEBIgF6ZR2rXb3u2uq1NIXwRa+J/Pq0pgRDjYOkXPSC5gsqIkyubqEQLtvxvle2PlvUGuKYC6rVR655l1GatkTz7oYTDCQDipSg+BEQRplIM/aaQs2sWOHW+wqmY9F2+lcq/nLGVF43KvPx66MMgpFVCrStRKJd0GiUFw2ECPExuPYXeYYDMhphHsD6AWfMrLDauoqanB5/PR1NTEVwcuoctdVJeolfsuaaoKWPKz5BysFpBD/PHbAIebx4hrAkmWWfd0Og0N6SCBx+MFIDMzE6fTmYyzchCqTH6WnANYVECVJCSh60gJGNKg8d0CCubIBKKCju4IRBOkZerEbjdzf3QNLS0tAFy/CymRX7C4BUhIgKoCYiigT4hEGKFKNNQBlmnQDLIzJBYUSxAMAwZrHvua46cVXLmNCJEgPryf+oI2RDSVoYA+AQgV0Dp6Tf+GeKJCcUsYEQ3FZUCWALsAVUBG8tNdwLNFB9CnDhCZhHQvYNrQxnU6ek0/oKlAvPWmOLZnzHzV8rhFOtMucehzQWmZwOoWWFIBe7JyxHSyAPRJ8F+B1z+wsvwpK3G/JlpvimNAXAHEaJRgoWIuKV9sKS6sUBjsEUzcNrBc9bGluxr75Sy8l+dT9edCuvtiTMRClFXbWLfdiuiDQ0diJ77tFl8AgZlOiV/oF/c3eKmfU6Smlj+vcnMigTJRRm3Fa3gXFOEtKcVVXMUl8xaejf00vp8CwxI3jidGt36v74xoXAf0GaAZ0Zg6cc24U+sUVbnZinPZ2gSYy8jPewkxz4Xk8yJnF6MsOc/6xhtwx4q/LT783Jfae31BziY7AWaAALHxaYZ+7DI7XUO6Z6FNFCZCJZLHvQkyBHKqDUlNIxhuwzLcY373jX58e5Ox5wFsHBCzp83s6ZMG+BZ7WFk311m3q3hPQ56nwAEwMNYf/fjO3paTfeGTf41xAbgHBGdg/wacMRlwA56F9rSKF9zzN4Hgh8m+1p5Y4CIwBkwC5sMX/wZ1WNlm+3tovAAAAABJRU5ErkJggg==" ],
									[
											"e409",
											"1f61d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAENUlEQVQ4ja2UaWxUVRiGn3OXTmlLy9hhSktbKMWUUJA2LYWAxeovkE2iQTQWBBN/GOMCISYQ4y9NVGKCSyAxEA2iiKLBpCKBEMAEWVoL2MpmQQbodGiZ6Sydzp17537+mDa4kfjDL3mTk7M8+U7Oe174n0vda2H8GCa0lLFwXjkPPVBGPcD5XjpP3OTY0V5+6B+m7z8Bc3XyXprFphcX5b3sb5xdYEyahyqqBECiAZzrJ7jdfibx4YHk1vfP8VYqQ/Ke3ZbkUX5wJe3Wvjkiwb0iyXMiiQ6R6MmsEh3ZueBesfbNkYMraS/Jo/zPjY0OVIHJuO9WqeMLnmmZoTeuBzsNdgyQf17KLAQzh0z7exz/7GjXsj2yIGEzCIg+skt/Y57a+tTqSQuNhrVg90OqF5w4ZP5Fdj+4MTT/dMrzLvi1W9HiIwHaRoFaVSG1Hz+Xuz2/ca42lNSIh66R53Ozh61BcGJZZWJgJMEzzJ2rvyOORa7XYIYRmLX3tPPNoMWADhhratUrSx8d16z5y3Bciy/arnDs+06mlgn54x1IDmbh+SluX+1l+7afuBJKUjfNwNQtTLtfu35xOH4qyFEd8GxoNjfNmFtUqXTBJEFjYw66SvDO2x3EgiFmTRsCZ4BdOy+w49NuVqzw8tgiL2YqAukoCotEYFi+6nZ3G4A5sVgrwTTBioG4ADRUCEUeEzw6qJG38+gUeUwaKgTivZAAdA1yTCYWayWAqQGGUijJOIjrgMoQCdps3BJiaauf1jWFkE5BOkXr2kKWtvrZuCVEJGiDlsF1HMR2UAoFGAYgfVEnLOkEYih03aEnnuHVDQaVFTGIR2DMiBdi8HCzTnWVwdVQmIZiHXEMJC30RZ0wIAZgn7nmdi2x0k2mV+FmbBrrXChyQRO4T+461gUcRWWNonKChoQ1dI+LHRHOXHO7ANsArP2X5cDmAXetOc1Uxw4qdn3gUlsn5HgFMx/IzQIlCfaQkA5Dd6fLC6/rzG7SsLps2X9ZDgCWDkh/kliV7s6sn25WVzXpBC8J4d8ymOfLWdX5ILlniyntnMz8X2o4ez3FYCpOfXMOi9eYSAB27Ukd3tkpHwHR0Z9inboht5aUsnD8FCO//gmDy+E0eriOlqbnKb1/CqVTaxlbPZ+f3Sv4lt1g3WtjIKS4eCjdv/pzZ8OQzQXAGQW6QzaDh7szPS0FMn+CXy9oWJQGt4GJZU8jk8aiykvR/NXoM0+yeN1F6Mmhq80KPb7NXh+I8SNZEzEKBEjdGabv6w63fWyf46vxSFU6PlX5vMthnKDle1BGIbFEG2bokvvJDufQs7szm0dgd0ZT5O95qIBCoHy6jzmPVBY8srF684oyX0UeQO/AjeS7PW9+eySQOPLrAKeAm1kz3Y2keyW2BngBX01uYdOT3snLQfgyEth/KRU9DQwAkREj/aX+AOdC7fDEM6chAAAAAElFTkSuQmCC" ],
									[
											"e40e",
											"1f612",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEDklEQVQ4ja2UW2xUVRSGv73Pmen0Mu0MHYfWNNhLpgWDSiRAq4RgAgkBSjCK4RKN2j4REp5ITDQmPhh5wsREjBojYjCEiEZaKkiMNwwFrJaLoaUKZSxQ2ulMp9Mp58yZc5YP04mIkvjgSv5kZ+2df/1r7bUW/M+m7nXREmLhmgd4ctk82uoiZh3ASCI/cjrOqWPX+Hxwkov/iXBOgOjLS9j9/IbIs8FFT5jGvMdR5fcDINkbuPEfyfR/k993JPHx62d5KWkxdk+1DZXMP92hh5yeVSKJbpFsv8hUr0jq+wKmegu+RLc4PavkdIceaqhk/p3CigcVLiF64jndu2jbmnrjoe1gZ8CbAZG7wirQZVASxL2wl/4Dx4ZX7/daUzZjgBizz4w3Vqh3NmxpXGE+vAXsUciNg5OGfOYuTIGbgnwSHWkmGhgKlY5O1h4f5osioY6FWLS3M/BWWdtjCsNPbiKO4Z8BZxqcDLizyGdApkFnyKVuYZS46JDBAjW88PCZ/JGkxS0TMNqb1NaqWJUeujTOwe6LTN3O0VJfRcfmJpTngjebtlaINvhg3+8MXEtTFfCzuX0usViVbm+yt+7pkwsmYC6Pma1/TELXz3G2d9ZTHVJkU2lU5hK4+b/qqBRKaZ5ZW0ZlTT3JCeGjQ8M8/Sgsj5mte/ocUwO+2oiO5vwBdjxVQXXZTRiN46ZSgAOmKvydKNBAqRDMpUkPXGGOeZMdmypw/AFqIzoK+EzA9FyhKeqCtjh6bIbvzmQZ/c2mpsbP7lfnoP2AgJ2Hg59Z9J+b4dZVm2VLy9m5PUzjfS6jrgCYJiDXk27CzWZioFi82GNtu8HRLh9X4nkoSxSaywOVV6xbr9m22WD/Pj+BcgfcNF5WuJ50xwExAaf3qnd+o+W0mSFFTYkDWZf1GxWUCNgO6EIN/XmI5BV4ihc7TchpyDq4t4Xeq94FwNGA3TUkPda46ylDg0+DocEWsF0Iw4ylsHIKqhX4pVDTaQELBI017npdQ9ID2AYgSYvpuZ40L33E16LCGgICpUClYv/bmjdfM+n+1EA8xYNtCrxiYB+SgHcP2N2fXJT3gXRxUuwzIzKyJuqtntvgq1RhDVXwwwnFr+c1L+xUtK1UnDypCQYVtU0GeD5kQnH+uHW945C763aeQcC9c6bDjSE29e0y4+7XFSKDQbEuV4gkS0VSgQISpWIPVIgMBMX9qkL6dpnxxhCbgHBxLxQVAtgpi7HDv3g/ld7MhxeU01Tm01rNGGAZMG1ASqPHhMw5x33vQ/vLzkPuKzemOQUkC431z32ogCBQ11LNknXNamVrs15QF1URgJExSfRe9i4dvSzfDk5wFhgBMkWyfyMsmgZCs6mUA/5Zfw7IAilgstCdf7c/Adq225DMvOrMAAAAAElFTkSuQmCC" ],
									[
											"e402",
											"1f60f",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAECklEQVQ4ja2UW2yUVRDHf+d8X/fWXbotZW2lQmmzXBJUIiItEoIRE4IWMYoBFGMEXwiJTyQmGt+M+MIDMZiYiIiYEBI0UrZWCUFNlHKpFkvksgrtWkov2922y5b99ruMD9uNBCXxwUn+ycnMOf+5nJmB/1nUvQwLoixeO5fnls+htaHWbAAYSDsDZ1Kc7uznyyvjXPxPhDUBYm8tY/er62u3RpY8YRpzHkdV3g+A5AdxUz+S6znlHDiW/uzdc7yZKTByz2jnzWDhmW06aXesEUkfF8n3iEx2iWR/KGGyq6RLHxe7Y42c2aaT82aw8M7AygdV7Sd24hXdteSltY3GgzvAyoE3BSJ3uVWgQ+CP4Pbuo+fzzr6nDnotWYsRQIzpa8Z7q9SH6zc3rTIf2gzWEBRHwZ4AJ3cXJsHNgpNB184nFkhGg0Pj9d/08VWZUMejLNm3PbA31LpCYfgojqUwfFNg3wI7B+40nBzILdA5itlhDL+LjhosUn2Lj551jmUKDJuA0dastlTFq3Ty0iiHj19k8naRBY1VbNvUjPJc8KbT1grRBh8f+IPL/RNUBXxsaruPeLxKtzVbW/Z0S68JmCvjZsuf49D+c4od2xuZGVXksxOo3CVwnb/rqBRKaV5cF2JGXSOZMeHTI3288AisjJste7ptUwMV9bU6VvQF2Pl8mJmhmzCUws1mARtMVfo7UaCBoBApTjBx+Ro15k12bgxj+wLU1+oYUGECpucKzTEXdIFE5xTfn80z9LtFXZ2P3e/UoH2AgOXA4S8K9FyYYvi6xfLHKnljRzVNs1yGXAEwTUBuZNy0m8/FQbF0qce6NoNEewXXUg6E0qXmElBFRdt6zdYtBgf2+whU2uBO4OWFGxl3FBATsLuue79uKNitZlRR57ch7/LMBgV+AcsGp1RDnx9qTAUFxWuvm2BpyNu4t4Wu614vYGvAak9KR2HU9ZShoUKDocESKLjTdVMQUTBXcfa8IvGtBuVCAQRNYdT12pPSQckFTjJL9/52O+GNC/hNCGmo1BA2IKzAUKTHFKcOa/a+b1L/gIZKE0ImMinsT9iJZJZuwCmPnq8mwIqTO81DDz8bnK1mC1Q4HDzk0X8NHAvEU8yqhtbVikeXAwUTGVRcOHb7xpMfOC9nCvwEFO+c6eqmKBu7d5kp92RY5EpEvL6wuP0hkcGgSCYoMhkUGQmJ/BYR90RYuneZqaYoG4Hq8l4ozzKAlS0wcvQX73zwplO9KEKzH601BrgachqGNV4Kcr22+9En1tfbj7hvD97iNJAp9cE/96ECIkDDgpkse3q+Wt0yXy9qiKlagIERSXdd9S4lrsp3V8Y4BwwAuTLZvxGWRQPR6VQqAd+0vgjkgSwwDnh3P/wLAvfXfFyvOnwAAAAASUVORK5CYII=" ],
									[
											"e108",
											"1f613",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEEUlEQVQ4jY2UW2xUVRSGv73PmVtnpkwvaaEUCBTKxSgmRmgtgUZRTApRH0pCfRJ400QebDRRYzAxvumTD14SjQYJeAtQi0i4RIotVAKWEigVK3Wm4HRooXM7Z86cs3yY1hTU6J98D2tl73+vvbL3gns154GtVLd2/i3/P6Xujgxf7TP7BmNLGxcVP2p5YvOC9Ia1C2murzbrAeKpYvzMKL3fXeebodsM/rdhZVPH7sPH9txXG6T3zZ3e29sy2ljYggrXASDZMdzR06QvnCh+cjD12Vv9vDJhkfyXWo1AXce+X7rHRE6Ni6x754qMjZ4VmeoTmfyhxFSfSPaCSKpLnO6NcmaHHl5czorZhRkzdmULHn2ppfP19ofm+ckXIemfQ2/XadpWJKBwq4SdBOsGiKAXbWDu3MnK9d61zV9ckr2WS262odHQ9sbBRzatCVYFIO3AzYLB8UsuL9zfD8X0LKb+OkBXLacmNBwL3bw978hvHABEA3pZjNWxykCsMgieQK4IARMwAXvsbqxEiewI5H7HXLSS7W3BbctirAa0BowtDapjk7mXExdTXEtDPAeD17Osnfoa8gnIx6dJgH0D7JslciNgFCmrj+gtDaoDMEzAbG4wmx5b1w8Duzh2vg1X+XlQjvLyhhOQLZbKBtCqtMUwQfygfICDUe6nucFs4pxjmoCvrsqoiVUE2dX0I9udHsRxMVyYH/NBxICMVzKMaMg45KYsyqIafAbYgN9PXZVRA45vulMeUiwQi/kY6Mmz50Aap1BEKYNNrWG2tocA2L8vz5GTWURcfH6TZ5+Ksr6lDMk7gAdgmoAkJtyUV8gs046mUGbz/C7N/NoAd7Iel39Ng8oCEF7o8epuk/KwydgfQiqZAdfBK3gkJtxxQEzA6RvxBp62nGYqFBubXTBcUB5VNcKSVYBd6mHbZgWWA7aiOqxhsQHZApIX+ka8i4CjAfvQsHRb466H1uAqKCoQBQgEIJdXWLaCACACniqtKyjQGmvc9Q4NSzdgG4BMWGRqPWlcs9q3XFVoCAqEgKji0/c07+426frSQDzFqmYFrgZTg+HDS8H7e+yuzwflQ+DOzE+xz8Yl/mSN93jtYl+5qtAwB04dVVwa0Dz3oqK5VdHTo4lGFfOWGuD5kFuKgSNWYsd+tzNfZAhwZ0+diiUx2s91mqPusYjIUFSsqxGRiZDIZLBEKiT2lYjIlai430fkXKc5uiRGO1AxMyBmKgSwJy2SX533fgrdKFasDNNQ5tNa5QywDMgYMKnRSSH9s+N+8LF9eOd+97WxDL3ARKnh987DUhwF6pdX8XBbo2ptatQr62tUNUA8Kam+q97lb6/KyaFb9ANxID1j9k+GM9JAbPoqYcA/nS8AWWASuD3zmmfrT/B95JKkT+8AAAAAAElFTkSuQmCC" ],
									[
											"e403",
											"1f60c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD+klEQVQ4ja2UXYiUZRTHf8/zvrO7M7Mjs66N7Lr4sZOuxsYuhLYmSJGCERp7IeimsaAXad1aUSIYVnYVRWQfUFHZRSSSmG4uUhjmmC2trVK6iOs6s+o6zbu7M7Pzzrwfp4t3B6USuujAHx6e5/B/zvmfD/ifTd3roS1O+7oFdD88n5Utc8wWgHTWTZ8d5UzfNQ5fmuDCfyKcXUfileXs790wZ2us8zHTmL8KFW0GQIpjeKOnyQ9+7356JPv5a+d4KWczfs9oF81i6dltetg5tkYke1SkOCgylRKxTgWYSgV32aPiHFsjZ7fp4UWzWHp3YNWDaqgl0f+MTnU+vW6h8eBOKOfBnwaRv32rQEegNoY39B6DB/tG1n7md1llxgExZtyMN1arAxs2t6422zdDaQycLHhT4EyBm78DPw+uBeUsurGNRHg4Hr450fTdCN9UCfXiOJ0HtoffCXesUBghMCyoWDjFCQymAyIvD34BZ9rCUHkwi1AuosOaB2qutx/62T2Ss7mlAWN9UvVE5kU1UcBMMzJ4kd17+7CsDDgZKKUDOBksK8PuvX2MDF4EMw1RITIvqtcnVQ9gmIC5Mml2mYkIp3+8RF9/joJdZNvWFhL118Cy7+ioFIn6OjZ11/D2xynq66KsWzubVfdHWJmc7GLAMU0g1NxoJFAGrS1C75YGkvMT4LhQKIGhwJ+pnQYKJdoXmrz16iKujDpEQgLKoLnRSIATMgETfKRcoSlqgOsDNtQAEfCzgtYBoS+Cvk+B64AHyXrA0IjtAT6AaQKSyXlZzyksNuOK97+2KVpCR7tm5LowNinseTEg3Pem0BxTLFygOD/kE21UPNtThzclZHLebUA04KSu+r+J7QAOvT0Qa/LpP+UxWfHY8VwFam2otdmxs8Kk69F/yiPW5NO7CfAcpOSQuuoPAY4CQosbeGJgX+3hWGeNptaBuAeGD3UCnoAz060hAk1LClwNEwZSDlEYrPgP7Sl3D1scNwDJ2RTm+rJkRUeoTcV1UFUJZMmNQyGvmC4qygVFOKSgosHRoELIbfjgYPnolxfkI2CyOno1s+t45OTz5hcdT4XnqWYB0wXl8/ILMHUrcJo1F17fP6OUayI3FOePlDKPv+tuydn8BFTunumG1jgbB3aZo97JepE/YiIjEZGbEZHxcICbEZErEZGLMfFO1MvALnO0Nc5GoKG6F6qzDFC2bMYP/er/Er7hNiyLkQxhaOUZQXolDRMa/wbkhxzvw0/Kx7d/5e0eK3AGyBGI9I99qIAY0NLWyPInl6hHu5boZS0JNQcgPS7Z1GX/928vyw+X/uQckAbyVbJ/I6yaBuIzqUQJ2pwZjYqABUxUu/lu+wsdatUcymBD7QAAAABJRU5ErkJggg==" ],
									[
											"e058",
											"1f61e",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD1UlEQVQ4ja2UT2xUVRTGf/e+96addmZoaTMN2CC0pQVTTRcW25AgRkgaEYIxmIDRaIobN66amMhGg9GVrtSoCw0GY1BEpVSQEEUhtJbGWmqkLabYtEja6bTMn/bNvPfucTEzsTYhceFJTnJz7r3f9517zznwP5u620ZLFa1d9/LEQxvorK+16wGmE/70wBRXzv7JqbFFRv8T4Npy4q+08+Zz+2qfibY9YlsbtqMq1wMg2VsEU5dJD3/vf/xN4pPXB3k56TJ7V7WbYmwZ6NYTXt8ukUSvSHZYJNUvsvBjwVP9hViiV7y+XTLQrSc2xdiyUlhpoarLiJ9/Vve3Pd210br/RcinIVgCkVW0CqwKCEUJrr3L8PGzN3cfMx0LOWYBsYrHrDd2qPf2HWzYYbcehOVbkJsFPwV+epWnID8P+Xl0TQvx8ERV+PbiunM3+RoQBejNVbRdPRIejD38qCbaDF7m34pW2krFTgTS46QuXjAPHl1un1hk2AasvY3qUEV9RKN8WJoEE5RuFwFKIKpIUCTxLLB8Kuojem+je+itIblmA3Zno91hxUKQvw3igMmB8UB8kOAfVUqBskDZoB3QZaA8rFiIzka7gyHPtgFnfY0VxwkVPsIYCAlUaFAaMqWXKQqLCEgOlpfBVaA1hEKsr7Hi4Dk2YINBgjzKsqBCSCcNlwfypLLCk3vKsZwCXuDDyc9cYpWK7dtCRGs0ZBXiBYABsG1AZpJBQvKZzaxRnPoqz+dn8tyzQdHSpvDDWSynkLKfV6TKAgavCse+FJ56PMT+vSFMRphJBnOA2IDXP2lG9rtep6UUZXWG145qmloN2AayHugCYFm54vALGgLFjVHNjT8MKA9ZFvonzTXA00Du9IT0uXOBwWge2w1NDQIpgWwA1bDkKty8grXAUgB3hKaNQtcuwNe4c4E5PSF9QM4CJOmSqTPSvO0Bp0VFNNgCYSCmOPaO5u1XbXq/sBCjuK9TQaABDb6DmYP3j+d6Px2VD4E7pU7J/Twt011xs7tukxNT1RrWwE/nFb+NaJ5/SdG5U3HpkiYaVaxrsiBwkKRi5Jw7030i6Fn2GQNKBYwCqhuqODDUY08FFyIiY1FxxyMiybDIQnnBE2HJXY+IXI9K8F1EhnrsqYYqDgDVpWovKQTILbjMnvzFXA3/5VdvraSxwtFaLVngWpCxYEGjZ4X0r17wwUe5bw+fCI7cynAFSJbaafU8VEAUqG+poX1Ps9rZ0ay31sdVLcD0rCT6x83vZ8blh7F5BoFpIL2iN+86sTVQVUylEggV43kgCywAi6VqXml/Ayx2vbFkDCohAAAAAElFTkSuQmCC" ],
									[
											"e407",
											"1f616",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEMklEQVQ4ja2Uf2jUdRjHX5/P53t3u93udtvcZWstveHmUss/Zm4IUmQoSlKBgYUiLQP9px8kCP1RSbMgkLRQ0v6wREXK/HUOQ9ShlbdsodMcc6nb3Knt5u3H7W63769Pf2yGhUJ/9IYHnuf5PLyfH3yeB/5niAc9VIeZuegxXpxbQX35JKMcoLff7m3p4eyxbg50DHLpPxEW5xF5bw6frFo6aUVw9jOGqpiHCJQBoDM3cXp+In3+lL3zcP+uxnOsT+Xoe2C1U0NMb2mQnVbTAq37Y1pnzms9HNd64PS4DMfHff0xbTUt0C0NsnNqiOn3FnZXEUU+IsdXyvjsVxdNUbPWgpMBKwuu88+0UoEnH1QA5+JWzu8+1vXcN27dwBh9gFYTYerj+WLb0uXR+cYTy8EziH2nCzObwlCjYA2DnQadIZdOwlgSGRhDhqJE8jrD/tuDD//QxaG7hHJamNnbXvdv8dfXC3w+Wo//zJatJ5hbW4rfmwErDU4adJrhoSE+/OggxWqIsin5yJDB46J75v5f7MOpHH8qwFg1Q7z9/AvF8079Ltn2xY/cuNHHmjdqiZTmYGQA7OFxMdP4QxYzaibz7f7fiB26gDKguiInui9lR87e4qQBGPWVRp3IN6idqZk6JUqhsimefBVGcpCxwdUT8xOAQdnkPNauKGfIMSgpMBFZD/WVRh2tlmEAnrISFUF5CekBggWw60SGno40rywpIlqTB2l3nDAoudaeZc/RBBXVQVY8G0BoQHkpK1ERsDwGYICLa5uAQgqHlS/5abss2fjpbebWFrD6tQIAdmwfoeXXEd5cF2FWjQ/6cziOQjgO4AIYBqATKaffNUemCUPgYiMdl8qwIORTFJZlIWCChvAjNqGLimjxELgajQRp4I5qEiknCWgJWPHrbpvOWUivhQyY3Lhm0viVScN6h5ffscCbBV+WZW9ZNKx3aNxu0nPVROSbSI+FHrWIX3cvApYExo506qZc0nGFkuCT2PmSjZ87lBY6NK5REAI88P5qRbTcYeNnDna+BEMihCSXdNwjnboJGFOATuUYecjVVU896akWZZKD39v80SY5uk9x67JB8o6gpVlxLe6hvV3Q3S3ouwkz6ry4Cfhy91hszyW9AxiSgAaSG5rdTW2ncgkGBRWVPmI7FdFqyQd7XdrPKBIdig3fuRQWSU7sUzxa5YOUoK05l9jQ7G4CkhNcf+90UTTMstZ1Ro+OF+gzX4f06JWA1qN+ffmYX1896dd6NE8PXQjos7tDWscLdOu7Rk80zDKg6H6XSwClJX4Wbl4sY+bePFufDmjdGtS6K6j19eC4fjqgzT159ubFMlbiZyFQer9rc68dBMqrS5izpEo8XVcla8ojYhJAb5/uj19x249e0c0ddzgH9ALpf7d6P0ggPNFKAPBO+E0gAwwAg3d/8734C4Y+4HFguZswAAAAAElFTkSuQmCC" ],
									[
											"e401",
											"1f625",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEKklEQVQ4ja2UfWiVdRTHP7/f89y73d0Xp3fNmst0S/eSyQo3NzRJnGCE9gIZEon5AhH9kxEFEZUYWUTgCyoUIkokhDVfJktJV0ud2krL8OXq2OTO1N2X3d17d+/uc5/n9Me2WoHQHx04cDjncL7fczh84X82dbdCVTGzljzAM3On0lReYpYDhCP58JkbnG7r5ZsrA1z8TwMnFVL6dj2bVi0redFft9A0ps5DecsAkPRN7BsnSZ4/kd99MLL3g3O8Fcty565spweoPrNGh6wjzSKRwyLp8yKDnSLxH0Z8sHMkFzks1pFmObNGh6YHqB5PbCxQEwsoPbZSd9a9sGSa8fArYKfBGgLH/iesNsBVBIYX+7ftnP+irWfxHqcxPswdQIzRNuPDBWrHshUVC8zZK8A1gB3tJTcUwzQyYA1CPgmSJpvsRw1H0N4sOlBBaWGo2HNr4L5vezgwNlDPKKZux1rPFk9Tk6KggK5jp9i8/TvmzrkHjzsNVhLsJEiSwUSC9ze2MMlIUDatCB0wqVW9s/afzR+MZbltAOaqh9RrS5+eNO/475ptmzu43nObV1+uZ3JJFlJxyCcgPwi5JB6/RW3Nvezd9xOHD1zAdCuqp2ZU78Wh1Ok/OG4CZlOl2aiKTOprhbraGQRLBDIhyFiQzYPljBzGpUGbTJngYuM7lUQjChcZVNZFU6XZSJdlasBVFjRKMdwEVJyghCESxhlI0XooSiblgMsAl0Em5dB6KIozkIL+MEEJEyAOhpuyoFE6CokJDk4+x8KPF4OVgyKb9rMptmyNcLQjAf4c+HMc/THBlq0R2s+lwGvjWDlsy8KxcoADYGpA+mJ2pPuWiwkrP+LLCxXgRKmoGaJhfiFVdRkw+8Hop2p2hobHCqmoHgInCjoBDOLkUvTF7H5AAHzrG9TO5tWbxBaR2a8fFzlpiFzQItcMkZASuYzIJUbia6O1DkPsdrfY33slt69I1jeonYBPA8Mt132nAkvX0mPBE8/Po6OnEhwFeRt8MJRVZC0FPkZytgK3Rrs1Wmmy/bZzKCRHgGEN5Lu9i+bUVARJpGFa0M22X54awQoY7NlmsG65i3XLXezfZUDAAI8GrwaPiTMo7Gq1WkNxuoC8CQjZm9diSYukuIgOwWR/HxQbdLQp+m4q3vwEHAsOthhM7xQebdSQNpGY4tf2TN+GdudT4K8bAkzwzn/vbPPn3fLI6s+s8FcBkSt+yV71icQ8IvHCEY94ZPiyT+SyX+yjPul6w7xRUcxzwMQxXRgvX/cDUyYWMPPdRXr5S8+6lvgfNA3l1+AZ7ciBxByS3Xl799dW24YTztZohp+ByBi7f+uhAvxAeVWQ+idnqscbZ+qa8lJVAhC+I5HOq86l1qvSfiXKOSAMJMevejfF1kDx6CpewP03R9JAHBgY++bx9ieZEPUxkeUIQwAAAABJRU5ErkJggg==" ],
									[
											"e40f",
											"1f630",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEX0lEQVQ4ja2UW2xUVRSGv30uM512pnRoO4wW6AXTi0BprUC5ioCAgo0QFY0aogkJxCcTjUQTNDwYo5EHJdFYEjCgL4hctEi4SKkJrcWKFFpsaaeFttDOpTNlOtPpOTNn+9CSNCQkPrge9/r3v9bK2vuD/znEwxKKo3Se4q7ZrLmXLrFlzJoJYMT6+pPhS41W+OQxa+yf6//JUOjZHtvsPZ96y7e/sWqRrlXPh7zsidxACJquQX2zmRxsrT1k3N69S5oh/8MMheYoLMms/PHnZ9ZVPLbjBYF3OhgGGKkJgU0Fmw0Gh+Gb45KzZ/7uunflxeeTYz0dgJxqKFQ9y5O/4ljTc5sWFLy2zsGYoRBPWFiWnFBOihVFkJ6m4LBZfH9mjFO/XO299fvm6pQZ8QNSndSqBeVvf71y9fKVm1enI4XCkD9ALDqKUCSmmSCZHMeyTKIjEeKJGLY0O0Vek+g4WZGweCQy2HjivqHidHkr1m7c8eX6VZlimjPJryea+G7vUZYsn41NT5EyR5GpOAoJjNEQn+06iBQmJSUuPFkJEgnnvJ6OhpOGMTqkAlpZyYJ3Nm2Yu6y7rYcvPrlIf0eY9z9cgccrScVDaHIETd5DSY3gdkNVRT6Hv73C8aOXme6MUjrHEre6e0eH/H2/aYBWVeiqLnLfpSQvm6cXV+CdkSIW95EyBFgJUubEVlRdxWGkke+VHNg/h8EhFYhixu9SVeiqvnoNTQP0uV7T86gziG4PIqREjgjsRorm5jaqqspIdzkAiMfHaGm4weJFcxGmSl6aRAqBqcA8r+kBdAXQPGqIHL2Pnft03OoA+e4A/e2NnK89x80/6ynMHaQwd5CbLfWcrz1HX3sjBe4AbnUAt3KHHL2PXDUEoCmATIz4g8NBP7nbPuDMdUhX2ykti1G+zMH8SpP0tDbS7W3MLzcpX+ag7PEYDrWdTK2LTNWHK+UjERkKAFIDzNbu4dYfGmqWnNufSeW7O3nd3EppkcLuz3MQahiSAQAWLNQor8pBxEIYoxY2VUUIFSMhafWFrwGmAozXdemX3Ju20WvCs1uX8kevG2QQkTEAMkBwOEJoOAIiMHkWxKZHsOsj2EUUORS2TneOnwLGNSDpy1jz5KtF2YzEoCDbxr4jNax4ai/HD0uOHZIkIhOvP306vLJdsL4GiAqEAdaAyYG6RN3NsGwBkhogSdzpGo6aRKVOKA4zXAOg6Fy8YFDghdwnJuFwGxoaFNZv0cCuIUOC1vqxgT311l4gcP8/A0zLWP5x89r9Pln5Vq3ZfyRTyi6XNHxOGe/JkNLvkNLvkLGuDGn6nFJ2umTqrFO2vKfdLsriJcB9nwtTaTMLyHPbKf5ojfLym1v0DZnFmopbAdtkbRMIWtzrTqYO/mSe3nPB+io0xl9A8EHaTMWZC5hZks3CjcViVXWxUjbTI3IA+v0y2NRp3ajrlPUdIS4D/UB06qgPI7YCZE2OksFEjwAGEAPCQASwHrz4L34b6ZSrEM1zAAAAAElFTkSuQmCC" ],
									[
											"e40b",
											"1f628",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAETklEQVQ4ja2USWyUZRjHf+/7fd9MZ2WGttPBFnQotiV0gTStBQRBomKIRMKSGGM8gF704oGg0ZhIPBBPXoyK+4JGAhE3FnEhwUBTwG4k2tIipVNpp51O25m28823vB5KE0Ik8eD/+Cy/PP/D84f/WeJODemrqZXRrdv06JrVnsDiCoDC9GDSzpw772a+/dqd/fPyfwIKozjmWbL/QLx+z1Mbmj16Sx2UF8/1htLQ2g1n2gr2cNf7nxWuv/qistKpOwGF7ktUL1h15LuHH1217LntgtIwzOYVljM3YGjgKxKMTsFbRxU/nmjvm2zf8Zg9+1cPoG4FCs2IxO5ed6x115Or79m+TtHfP4bhC+P1eHBcFwBNSsxCAWt2isrKEo6eFRw+dP7awNnHWxxrIgUo7SZQS9Q///bGzevXW31neOPlT/n93EUWRg1iFXHy+Wls20TToLu1lQ/f/IrP3zlNeTjLkhXLIpk0izLD574BlABkMBRfuWP3wQsR77Qc7R9l29MbWVi2gKlcnpmZAmLODQqB3+8hHCxifGSSY5/8SkllKRNmwD3ywbNNuexwhwboy6sbXnhwfdXaluY4929K4KosbiGLm0+jORPoahJdTaGrKaSbBXcaXc+x5oEllMc1lHlDDA0M5EZSg7/ogN6YCLXUlKXwFmax0gaamafrQhvVdbX4fX5s2wZA13XMyRm6f7tMfVMztlmE17aoKcvSmAi1dHaj64CxIm7FykNjSD2N3++n7VIbHR+fIvREC5u2PkIulwMgGAzy09lTdHzZStyXpnldM7MzMzghRW3cigGGDugxLU2JMYhmaHiQ1FV5GLgvRH1dmGKjj4DfAqDIa9BQHyZ9NURdlYcI/fh1FxeHUi09ZwJQ+cnUWMjV7tU0DRybmoRB1f5GDHcC2x4mHBLgQqGgaGooYuWqRmQ+hTk9RJGm45gO+YmRUUDpgNXVP961Ky9WexcIFA7SdjDyDlpYYAQU40mFkBBdJCAnkDmFY2l4pYbQNAp5RdfVTDdg6YB5stc8/noq84z3LkOiWyBtCLtMTcGBfQ5X2hVCQO0awb6XNLxB0LISJXWEbWCOWO7JXvM4YGqAGs+Ti7tOVXODrBZRwK8g4PLaPof8NahLwOISSPZCZ5/L+i0SlERIiTvm8u6h/PdfXFbvAZPzn2K2JVVyc0w9VJbwhMVCCZqgs0NRWi6JVEqK4pJgROIvkTSvNcA1UGlJ1ylzaPdhZ++sTQ/g3BoS0aURdl7aq193fg4qdSWkVDKo1I2AUmmfUuM+5Q4FlBoMKtUTUs7poLq0V7++NMJOIDqfC/MXApiZPKmj7e5F3w07utxPpQcphSPBlJCTiKxADSmynZZz8CPzxJ7Dzit/5zgPjN+eNrdeGgIqqotp2lIlNrRUyeUVMVECkEypsdZe948fetWZnjQXgCSQnYf9G3BeEojctBIAPDfrBWAayAATgHv74j+60dq+0NQK/AAAAABJRU5ErkJggg==" ],
									[
											"e406",
											"1f623",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAELklEQVQ4ja2US2zUVRTGf/fe/8x0Og+mLQzQ1EqngVIe2kWRNhiCERISIlETSMBAUMBENsiiiaIbgq/EhQlRCLDQQGCBEgVKAQliFKUFqlBAKA2PlhawHWbazqP/mf/jumiHYAKJC0/yJSfnnnznuzf3fPA/h3jaQU2EWYuf5bW5lTRWjDcqAHrjdm9bD2ePd/N95yBX/hNhaRHRD+bw2Zql41eF6l4yVOU8RKAcAJ25h9PzG6mLp+1vDsf3fnye9xIm/U9VWxVmetta2WW1LNQ63qx15qLWw61aJ38ZxXDraC3erK2WhbptreyqCjP9cWGFRJT4iJ5cLVvr3lg8Rc3eAE4GrCy4zr/HSgWeYlABnMvbubjv+J1Fe9yGZI5+QKuxNvXpfLFj6YrYfOO5FeAZxH54h3w2gaFGwBoGOwU6g5kagNwAMpBDhmNEi7oi/geDk0/c4VCBUE6NULdjnX+bv7FR4PPRfvJ3tm0/xdz6Cfi9GbBS4KRApxgeGmLLRz9QqoYon1KMDBvMEN2zDp6zDydM/laAsWam2PTKq6XzTl+V7PjyDHfv9vPO2/VEJ5iQToI9PIp8Cn/YYmbtJL49+AfNhy6hDKipNEX3lWz67H1+MgCjsdpoEMUG9bM0VVNijFM2pZNuQtqEjA2uHns/ARiUTypiw6oKhhyDsmAekfXQWG000G4ZBuApL1NRlJewThIKwt5TGXo6U6xcUkKstghS7ihhSHLrWpb9R/uorAmx6uUAQgPKS3mZioLlMQADXFw7DyikcFj9up+OvySffP6AufVB1r8VBAG7d6Vpu5BmY1OU2bU+iJs4jkI4DuACGAag+xJO3M2npwpD4GIjHZfqiCDsVYwrz0IgDxrGTbYJ+xSx0iFwNRoJ0sAd0fQlnAFAS8Bqve12aNNCei1kcZ7uW3m27s6zcpPD8vUWeLPgy7J8vcXKdx227szTfTOP8OeRHgs9YtF6270MWBLIHenSLeaA4wolwStJC8nmzZr6F22QkM0KTFOAhPp5Npvf16SFBCURQmIOOO6RLt0C5BSgEybpia6e9sLznhoRkUSfcfEFACXY85Xkiy0Gzd8ptCuYUSfwKUl0ogTXgzsAO/flmvdf0buBocKm5M716t7FUXfRxCpPWIQlhODXk4KrHZI3NwoaFwjOnJGEQ4LJMQV5D/qhoOOE2bf2gNM0YtMJPNpTAZTEIixrbzJ6nFNBrTtD2rwR1Drh1zpZNIq4X+euB7W+HtLOj0Hd3mT0xCIsA0oKvlBQCJBLmvQf/NO94L9vl9QGqC72SCmyCkwFaQVJiezXpC5Zzq6vc8fWHXA+vJfmLJAA9JP8UAAhoKKmjDlLpokFDdNkbUVUjAfo7dfx1hvutaM39M+dDzkP9AKpAtmTCB+ZFBAZu0oA8I7V80AGSAKDhd/8ePwDZrjX7mIQDh0AAAAASUVORK5CYII=" ],
									[
											"e413",
											"1f622",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEJklEQVQ4ja2Ub2iVZRjGf8/zvu+Z2zzrzG0ntnTmxprNzRbWdMzMYpIaCRJ+MNEE+xDRBy0CoU9azogYKZRICyMxysxQ13AZM1JxczCOTnJ/KnU705xn787O2TnnPef98/ThOJBQ6EMXXPA81/1wPTfcf+B/hnhYoDpA7er5rF9aTuPcYn0uQDjihHtGuHj6Jj8ORrn6nwznzCL4/rN8tHVd8WZ//Qu6Vt6EyC8DQCVu4Y5cIB4663x1MnJ4Ty87TYvxh2a7oICFPdvksN3RrFSkXalESKlYt1KTv2UZ685qkXZldzSrnm1yeEEBC+9PbOYgCnMIntkiu+s3rX5cq3sLnATYSVDuv77VwMgDPR+3/3NCR07fWPW1t2wyzTigtHvPtL0rxIF1GytW6HUbQTchcQsvNYEgBXYMnDh4CTwrglCT4JtG+isJzhoO5P4dLe28wYkZQ1kVoP7AG7n7c+sbBIWzuXC8i08+7aSyKkDxnAykY+DGQZtm6M877N51jAJ3gvJFhUjpUeMbrf3hknPStLijAfrWRWLH2jWBJjm/nHPt/Rw9cZU9HzZTVupA2oT0FDgxIE5xULK8aQH7PzvHbDfG/Cf9aMlxMXItNX3xNl0S0Bsr9WV6IAeio/RcuUlrSzXO7T5ef+0YA7194AyAM8BAb1ZzbvfR2lJNT/9NiI6iB3JorNSXAboEjLIiLYhuQCrO9s0BdM2kL2Qioh4DQ2kwNDA0BobSiKhHX8hE10y2bw5AMg66QVmRFgQMHdDBw3MySKGhOy4ISU2tj/K6PBY/7QPHAmDxEh99g3nU1Ppg2kK3PDw0sF3AA9B1QI2ZbsTLTFcpXQAO0vXYdGgjXS3fgxsFywOgokqy+wMdrCgqoVBCopSOyijGTPcuoCRgd1/3rijLRvhshC/D9al8Cja18t35hSCSUGBlKZPZ9nFToKVByyAMG5Wy6b7u9QO2BNKnhlWHddf1pCaROZI3O9/h+IYCWv7YC8WCpCWwMgJKBPgUGAJhSKRPIoXEuut6p4ZVB5DWAGVaTD/qqScanjKqx6WfX0q/pKEyj1jRY5zd9y2HP47TfkxDeYKaRgGezNZTGngROHgk3f7NVfUFMDUzKelLYRVeHfRWHRpZU1CyfAsVeZAQGke+H6V15yUaVwrOn5f4/YLSSg08AzUhuNJpjW076r6XchgEXP2eoW1aXH61zdmx4eXRg7G4XRhXBhNJWNkUZvFz2ZGvf16QiWgQE3gjitCZ1OiGNudd0+IyYD9olZUUzmJ9zSu7zOa2v9TSt9vU2M+PKPW7P8uQX3ld+WqqLcfZt1a2F+XyElDyoG1z/90PLKkI0PBihXhmVZ2cNy8oigHC4yrSPeRd+2lI/To4QS8QBuKAepjhDCQQAAqBfMB3T88ACWASiM508/34B06B4hB2i2OlAAAAAElFTkSuQmCC" ],
									[
											"e411",
											"1f62d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEIUlEQVQ4ja2UXWhUVxDHf/djd7ONu91kkxRjiLFRmmKqRhQTQ5MWohE0NUXwwdZqsQqBQvGtEOiHIvWh9UGk9kGkWFoUhKZRU7+oH2CTWCTRStVuIVE2NWY3u0l2N3vvPefe04dEKqLQhw784Jw5M/8zDMzA/2za8x5eiVC7bj5vr6qkoaLErACIJ2W8/wG9Z+/z470Jbv8nweICyjpXsn/7WyVbQ8veNI3KRrTCcgBU7m/cB9fIDF6S33Ynv9v3Gx+nLMaeW+2CMDX9O/SY6GlRKnlaqdygUlN9SqWvzjDVN+NLnlaip0X179BjC8LUPFnY44NWFKDswnt637J31lUZSz8EOwMyC0o99a0G5hwIhHBvHmLw+7PDa4559WmbMUAZs2HGF03a4Y1bqpuMhm0w9QAvO4KmciCmQGb+xcvgTY+ieWn0+a/xknE3EnyYnntumJ8eC+qLIiz75oPgwYKm17VfL8b46ssuqhdGiJZKyE+Cm5lBZsCfJxYbZe/nJwgbeeavKGexGqo9eV12pyweGYC5fbG2u21TtLF30KH75z/49JNmyosdsFIQyMH0BMgpCE5DboJoRNHYVMWRI1cpRFC9QGrDt3LZ3of8YgJmQ7VZrwJ+Bv96RHtrhEOfnSCZhGlNp/WNItrbIgB0HZvg3OU0LyiPkhJo37CIgXuPqK/201Bt1nNDmDrgK48aZZph0LE1wMDIPO6vOonYeJxdHZWYxX6wAAvMqJ9dHZWIjce5v+okAyPz6Hg3gGYYlEeNMsBnAiZ4KOmg5VIUVGwlVLWJ3PA4Syos6pZqkLMB2LAW3KSFzLcQqoriHx6EXD9KFAMegGkCaiTlJl0nu8j08ignQaEER45jqQSFAZfJOOgmhIrAcg18cpxCGUUTCfDyuE6WkZSbAJQJiL4h71a7JRoIgIuDY4OUDoVFLlcuaQyM70XaWZpf3s/KJS5SzsQo5UAAVF7QN+T9DggdsE/FVI+VcD18gO4ibdC8PJMZ6OpfQ9vOTtZs28eJKyuwJCg3j7TB01zQwUq43qmY6gFsE5CxNDeOnhJnPqqhDc1DCoErHdwgBIbPc3CTBgoiYXB94AoHKQToHkzA0TPiTCzNDUCagAISey57B1qXs9yJuPO8oEDaFsEw1C2BcFZHChBzPfxzQAoLzxU4GZe7lxjZc9k7ACQApc+OnkhZ3Gz7mt13rg/FR8dGydkeAc3H2p0+7IVBvMVBWt/3YUgfedtjdGyUO9eH4m2H2Z2yuAmIZ62y0lCBvr62bvX55s2dbrI7rNSfQaXi4RnuBVWyK6yaN3e6tXWrz4cK9PVA6bO2zZP3MFDx4pxAw5Ya0dhSy6tzS/USgIcJL3nxNnd+uOu7Npm1e4E4MDXbtmcKPjYDiMxSCPhn/Q6QAyZmcZ9O/Ad2QAX19qa2EQAAAABJRU5ErkJggg==" ],
									[
											"e412",
											"1f602",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAENUlEQVQ4ja2UW0xUVxSGv7PnIA4HxsGhg5DpiCCgVQimsYXQ2qrUa7xQk6ZQ7SW2D/RF07TVWl+aaLW+aVJtqzFNTVtCixVCxbYPGIMWaqyoVQsUFJiZchlmRsYBhnPm7D4MNMRo0oeu5E/2XnvnX2vvtf4F/7MpjzrIt7N4zVzKn3ZT4kpTXQAev+Fp7eXXcz380B7ij/9EOHsmzg+XcvD1jWnbUoqWqxZ3KYqWCYCM+Ij1XiTc1mR8We8/tf8yuwPjDD4y23k2FrRuF5362TIp/Q1SRtqkHGmRMnghjpGWuM/fIPWzZbJ1u+icZ2PB9MSmFkpqIs5fXhUtRa+sybIUvA3RMJijIOUDYRUQSZCYQuzGUdq+Pnf3ha/M4mCUQUBaJq9ZDixTjm2syF6mLq6AaD9MDIF+D4zwAxiBWBD0AGJ2Hk5rp93aH8r46S51U4Qi107RsTetR6xFTynYNAj7MCJBhBKJk8SmwQxjRAIIMwRJJkKVPDGjb3Htb0Z9YJwBAVg25CiVmjtZYFdormtix64zdHs9oAzAmBfGPJPwgjJAt9fDjl1naK5rArtAcyeLDTlKJWBRAbUkRy22pGtcbLhB4wU/+/YuItn0wXAUrBLuG/GPSVZhWCHXkci+vVkcPHQLZWKA0iUaJTmhYq7oqgokZDosTkzB9d4wK59LZefuOxD2o1gEa5fb2bLJDkDtd0Eam0LImMmo5uatLXau90QoLUwh02Fxgp6gAiqYyIkoVS/b+LQxnZMjO9GPv4c/FONmZxTUMQDs2Qr7V80hzW5h4QdVhP9K5ZMVJ5ATXsAEUFVAegMx/72wnnvgYjnZLx5kmcPP+boeXC5Y5IS/ewEJixwQ6IBrXsg0r1J75FvWfr6aqmAFBPqHAKkC+oUerf2d+i9K9uzdRKkLTpxupz/re7r8PcR8g5jGaLxhEzQSktJJmp/FrP4Q9T74eKubj2qqMQLvC6jWVSD6zXi5c3NlGYWpEByHwSuXCKfrFCxfwfz8QtJSBCYwFJyg4882brQ24bnWwuW7L5GRl0TlysfZc2lbIVRHVcAI9N9uLcjS1hkqVP8eITOxD9/xQ/hq4LQAU8SLLGKgmSBDUF6cTU1zH8Xz8rGqMOpp9wDGlPTS5rzROPTM+iV0Npzh3I53ufqzwf3bBraZMRLUuPx0XTASFaQWqTy7OYFdR1fRKiti3X1GdLBm61JM49a/WgaezJg9a+1nW0arNm6dkUGuhTtdku6bMcaGJQjQHArZBRbmuhVoj9FUG/W+dso40DdCC3B1qtTTB0WGw8qaw+tEQ/hkoiEvaVJ22aTsm0SXTcpmTYZPJBqH14kGh5XVwGMPmzbT9ymAK9/B0vV5yvPFeWKhy6mkAXgGpb+lw7z9Y4c83z7MZcADhONN9XDCKROAHUgFNGDGpH8CiABBIPTgEwH+AWpM3K3AorBWAAAAAElFTkSuQmCC" ],
									[
											"e410",
											"1f632",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAELUlEQVQ4ja2UWWzUVRSHv3v/y3Q6zNhxaLHDgECVJZDAgwg1YljCEhQqxEiEGAyYCBoexCAovlETEmIMMfoCkriAChGSLkg1lCYkpSxFWqmkTJGlK22nM+1MmeW/XB+GJjxA4oO/5CTnnnPy5XeTew/8zxJPaswoYs6qZ1m3YDLlkfF6BKBr0O66eI8LZ+5yqj3B9f8EfLqAkr0vsn/r2uK3fXOX6NqklyAQzjdHenA6GxltOWd/WzXww+eX2DOUof+JbqcGmHl1uxZV59cqNVijVK5FqfQVpeLn85G+kq8N1ih1fq26ul2LTg0w81FjY4kIeiipf1drMufMmHKypZRYbx/BUJAdH71FMFQIQDz2gK+++Il4LE6o9BnWz+0ld739ztLDzsJ4ln5AjQG1L5eI797/oGzTye5lzJ0VpmxaCOXaeIw0uLn8lDTJWl6E1Ln1T4yWGz2sn3iWb76+dfTDc2oz4AhAPl/EvCufFVwOLF0hKZ4Hyfvg18FRpHpHGVfkBSCZSOMv9YEmIGmDfwIMXGOk/nf3hcrM/GiCaxLQ1pSJjYURv0SzGej4ky3bjpHoiFL/ayP7DtSB2wduH5UH6mg41UiiI8qW944x0NEMmk1hxC/XlImNgKYBnp2LjE9nLwhMFpqLr8hh3mwv+/ddJJaMs++TMIz0QLqf5cv8/PhzlNPVUfZ8PJ1wWEFqCKGyJO+l1Yk296gEjHBIK8EwIZeEVB+dbf2UTvKhS5PejlT+ipqgtyOFrpmURnx0tvVDsg+ySTBNwiGtBDAkoIOLcnKAxf3uDFXNKXbvKqaiws+h6iEoyICZ4VDVEBUVfnbvKqaqOUVfTwawUFYOcAF0AQSPb9Bq120aVy4LBeguMgBYFngF+C2G2y10DXzTPJDUIKvAMGAElC1xRhWnjqUa3/zFeU0HrKbbbuvrGatcFAkUFqQdMBUUuJypMWlNVGJbKV65s5+XFwNZCQ9yuGhgGKi0oum2+xdgSSBbHVWnMwOOKzSJ9EgwJRSAnYITF1awYdteKt6p5PuGcsgBBQJ0iTQlUkgyA45bHVWngawO2NE4zUeqrdodU4w1cqIOhgIvkFVk2mvYu1qgHPD6HsIcCZoES8ftVhyptWqjcZoBW3v4U7KXulTXqhJ3+YSpRkAEJRggfZK7rQ5lHpjoh/BzMH+5Jw+UBiomaK3LdG897uxK27QDzhjQTdsM//G3G100zl04Ybz+lPBq4BFMma1zNyYpDGus22zi9UhI6bj34Npvmc43Dts7e1JcAB48bpUVh7ysPLha1gwf8dhOvU+pG36legL5aPMr56xPDR/22AdXy5qQl5VA8eO2zaNnPxCZEWL+q9PF4oXT5axIiRgP0NWvBptuujdqb6qG9hiXgS4gCagnAcckgSIgCPgA82E9B4wCcSAx9pof1b9m7tPyOLlZzgAAAABJRU5ErkJggg==" ],
									[
											"e107",
											"1f631",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEcElEQVQ4ja2UW2hUVxSGv7PPzJnMZGZymZjETEwmMYagaVFjrdqUSKzSWmtsSlsUsUWKvijFUqRChYIFKbTUUvpg6YtgCkIVtVirVeuliTFoEqKSaDSaZJKYi5PkzC0zZ87ZfYim9kHoQzf8sFhr8/GvveGH//kozx2ozjzS5r2uuCqqhbtyEYAVudUmY51/MXXvd2nGh/8bUBEOe+Yre1zle3ctXbrIu3RhFkV5KgB9wyYt7eO0tLTpsbv7vjUmGvcjrcRz7QrVme8s29tUu2NcHr8qZVdQys5eKTt6ptXZO907flXK2h0h6Szb2yRUZ/6zDPUfY6rbN//Tc3WbPnlp95ZMHMLg0ZhBSE8xEZnWuD6tDJfF6pfTiWkL5wwMy1Xxx00NSJn8F3CWv+rrmrrP67a85cMwJHo0CYpCIhHFMKZIpRKYpoFQbUTjBpYlqSxVCCXnzB7ru+aJ6oOnZ4B2Lb10xRu7D61fUyocQufP0w3cvHaMoWA3BQWFIONgxZFGjMbzDdy6doyBvrv4/XkUzBJMxDKreu9carBMY1wF8BcEdr69rmZVqV/h0vmjLK+ay8b365kKP6K35zZzCrxoSpSu9svMK/KyZfN7CGuSxstnWFA2CwdRcaezI6TroUs2gPJiX83igE7w/kVqqqupq1sPQEHhPH74bh/2cCsW4LRF2Lh5F5pdIVBSjuY4yaP7F1kcyKG82FfT39+NAJQF+cJfkh1EJcySZStnfmxwJEyeN0GxO0jAHSTPm2BwJDwzX7JsJaoVpiQ7yPx84QcUAajZYlzm2/oI+CZ4GNSRwEgImhtPUfvCPTLTg2R7gtRW3qO58RQjIZDAw6BOIGeCfLUPnxiXgGoD5PWu/tb0hLuiMjdJ++CX/DryGqloB6vLztB9fZhD3wwi7ILtnxWyqqKHKxc6UdNfJC11joW5HbiSGte7+lsBqQB4nErtj++4zubGo6paClXvenC7LUBjzwc6cy1ImjCSpfDFQS8YU0QiKq2/hEn1wIgz3dx2NLYmHJcXBEA4Lm/8cTvaXbvORokKzUci4EyQTIXJzVTIKRbMDgiy3SClDo4kzUciBATUrrVx9na0OxyXNwDEk/eNXR5QTkTS7BTVu/Cm4MFNCy3LQvNCWg5oPtC8oGRY3L9p4U1BUb2LiNPOlQHlBBB7FmiMhmXTwJAEj52KVzV62hTIsOHIExjKtFyzBbhtPGhXqKjWwG0nOCQZDcsmwHgWSMpkNKorMKni8dlJTQKjNjZss2MUCZgrqNtqhyGBqYMnxw6TKjFdIWUyOhMwTwuHDZ/LbkdGnSimRkgX4cP7k305hkX9VhsbPrSREbE4/FWqL6SLsGJqyJgTl2bHYcP3lGObiR1B9vCYSeGExEootPRYj7+/aG46cMZcv32FWAtwsMn6rX1Anty5Uv35zVHFIxyS4TETVZA9k1ozhUKOP0v5uNwvlmsqjrYH5qnhSX56skX6k2tRwMrL4KPFJeq6pEXyTtBqHBiXB6TkMcDfLLr0LDul7fgAAAAASUVORK5CYII=" ],
									[
											"e059",
											"1f620",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD+klEQVQ4ja2UXYiUVRjHf+e87zs7szszzrQ22rJs6uauilsLau0SbF8KVmhY7YWGEWkEQdBFgpB0ZdRFdCMUfUCiWCCJGH4W9kXhmG5tq6XrYm7LuOU6H7szO7Pzfj5dzA6IJXTRH/5wOOfwf/7Pc87zwP8MdauDzgTL197Jhvva6G2da7YCZLJe5vQYp47/wcHhSc7/J8HbwqReW8Vbz62fuznW/ZBptN2PamoBQMrj+GM/UBr82tv9eXbvG2fYnq8ycUu3C+MsOb1Fj7hHV4tkD4uUB0WKaZHCdzUW07W97GFxj66W01v0yMI4S240Vl+oZAOpL5/V6e5n1i4wul4CpwR+BURuCqvAaIRQDP/cuwzuOz66Zk/QU7CZAMSYvWa82afeW79xUZ+5fCPMjIM9AV4RvNJNLIKTAyeHbu4kFRlJRP6avOPEKIcAUYBenKD77I7ImfgDj2hiHeBPg1CjuqnMIrW8FGBEoXSJ4rcng5U7Z1aNTDJoAsa6drWpsTWq0R5Ur4DhQ0RDAJQ8CGbT1gpiJmhgJgDHAMOjsTWq17VXN70zIOdMwOxtN3uMeAjsa2Ba7PponLHfSjz1RBM9DzdBxasJRk3Sh8ocOFSmbVmMl7e2gOdixEP0tps9DLimCVgtzUYKKwROEZyAFzc3MnotzO69WTJZh6efTADw2f4CP130eOGV21kwX0P5OqAhFKKl2UiBa5mACQHiO4g20L5PKO4yvyFgatRm8i4DTBuASU+YGrVpaagQMjTBjCAYKM+nVh9MDcjVvJ8NnGlEivh6Chry/Ho5Rzjn0hYrw5wczMnRFi0TzrkMXc5BOA96ClSRwJnmat6/DogG3PSVYEiqLirkokIOuDZdK12W9iu6+mwwK2BW6OqzWdKvuHuFC7YNhoOyXGTGJX0lOAe4CrAWJ3l0YGfDwVh3SGO6oH0IB9AsEBHKv4OhIbwAqCjIKyhr8A3wLUq/OMGK1+0NIwWOGYDkq0zPC6Tj3nusTpXUEBZoAEKw523YtV1z5FOF78OyFQpcDZYGwyLIwvv77MOfnJcPgal6p9g/ZiSzNhWsmbfQiqukhjnw/VeK4Qua51/V9D6mOZXWxGKa+e0GBBaSUwydqF7dst/fNuMxDPg39nRyUYL+gW3mmH8yKjIcE3skKlKIiBTCNWYjYl+MilyIif9FVAa2mWOLEvQDyfpcqDsEsAtVJg78HJyN/OkllzbRHrG0VhUDqgZMG5DV6KxQGnL9Dz62j23d7+8Yn+YUkJ9t1H/MQwXEgNbOZlY93qEe7OnQS1tTai5AZkKy6UvBhSOX5JvhHGeADFCqi/2bYB0aSMym0lR7HgAcoAwUgMn6b74RfwPFb8rBf8Tc/wAAAABJRU5ErkJggg==" ],
									[
											"e416",
											"1f621",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEA0lEQVQ4ja2UTWxUVRTHf/e++96bmc60HRiaNkNaLIQ2gOmgoYEqagwkQiDGEBeGj4W6YmPUGDcmrli4cCHGsHEjmrBwoQQJKwMGQRCi5UsDrYKlU0mHzrQz89687+timESJJC48yT8n595zfrn3JOfA/2ziURc9BusHLV4atJlYYbESoBIwO+Nzfibgq6WYG/8JaEtWbMrwwYvFrv2l0phauXoNXfllADi1KrO/TTM5eSU6XnY+v+Tyrp9QeRRQdCtGXs5z4pWnxtY8sWM3mXSKJPTQUdhOUCbSTOG2PH46dYJj565Mf1ljdz3iJqABjA7MlvTtX86Z155eP7xp5y5ko0K0WCF26ySe05a7RFKvoiKPoQ1jFIPasuh+Zdf1Fsdijft3oPFcN0deH0o/8+S2bSS1OZJWA0IfQh8ReojQa8eBh/aa6EaVvsFVZGdv9d51o4HbPscBbQCyVzH2Rj8fTzy2TGQKvdCqQxggghYicsF3IXARUQsReIgoQIQthI7INhewHGfD902OewnzCjBG02Lv2qyWXcEC3LlC1oggbBEGIV4YA3HnI6RMA9MywUzjxIquYIG1WeRoWuy90NDXFaDWZdjcnxbYRoyqlTnyOzgx7Bs16O8x8MJ2Z1Im3FsK+OJqiy6jzqvD7ab1pwXrMmy+0EBJwByw6MvYAqkMpK3YMmiSzVkcvAjnqopUIUOqkOFcVXHwImRzFlsGTaStkMogYwsGLPoAUwJKSTAkCCXQSlIaMjlQsik34ehUAj0p6ElxdCqh3IQDJZvSkIlWEqEEhqT9tAdOL4TcjxMwDIFMGWBbnK0KtBuzdSQN+ba2jqTRbszZqgDbQqYMDEMQJ7AQUAG0AsJbLlcbkdiCAKEkIBgfzbD9BcXEeC/YFgAT43l+jQTjoxY0fYSSaAGNSHCrpa8BoQT8SUefnGvpJAxBIIilJK8MDu0pMFxM0XATXC9huJji0J4CeWUQS4lAEIYw19LJpKNPAr4BaCehaWjWbuwWI/mcQKQUwlYQCg5/vcDbn81x9HQN09eU+kzwo7bcgJlKzCe3k2/O1/kUWOpMij/tMbvaFNuHbLpzGQEZxbczPpd9eHPfAM9v7eX0Hy7LiShaGlH3mb8XcnImKX9UTt4JNTeBuANMQs3SpYaeGoDN/UL35Igp9pvsfDzNIAmrVMKOEZNCFCLvtSiXQ07cie++fyd+azHiB/jnLAP4Tsz8mUV9uebqfCFKVtuLgZTzHrrqE897+LcdFmc9bpSj+PBUdOrDu8l7tTas2tk2D+9DAeSAlUWbTeM58ezGHrluwKYA8KfP/Z+Xkl9+bOjvyj6XgFmg0YH9G7BjEugF8kAXYD04DwAHqAGLQPJw4V8dkb/CXlKKLgAAAABJRU5ErkJggg==" ],
									[
											"e408",
											"1f62a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEOklEQVQ4ja2UWWiUVxiGn3+ZTCazJDOJkziGuESz1Il6YTTBRGtRiNSKtr3Q2hbRtpQWob0TelMKpYJQpLS2FCy2pVUQl7qk2lhb94mKhsa6ZESjZjOZzGT2mfz/nNOLSagIQi964IXDdw7P9/Iezgf/81KedVBbgr9tOusWV9FcWaZXAvSFzL7Oh1w68YBDd8a48Z+AnkK8HzWyfdOasjecC5brWtUSFLsPAJkcIPfwAvGuP8w9R0I/fnqFbeEMw890O9NFXecWNWi0r5AydEzKZJeUsYCUkbN5xQL5WuiYNNpXyM4tanCmi7onjU1uFLcVb8ebamDBxrYZWsN7kI2DSIGUT7VVQC0Cq5Nc9y66fjrRu/IH0RTJMgxIbeKa9tlS5es1G2Yt1f0bIDsE4yNgRMGMP6UY5CJghFE9NXhtwRLb0NjUk738MglU55SwYNdbhV8UNTYrFBdBbACMGIhkHpJ7QiIx0SgCDoFqVajXHvgPXDaPhDM81gB901zlwzXrSpckNQ+7dp5n7+EbOByS6ZUC0mN5V2YsD9fTnAs84vMvL3LnSg8NdQ6ctqjS251KXBrktALYDq63dLSunbJk+94Ey5aVs6KlDJtMQyYBQvybo6KAqkKhg7Ri49T5EGfOPmbbegfnDo9ceHmfsVIHLBUezSusBWzb6qPMB6SGYBywKSCA9MTb2QBVgBnFVhDlpVVWmuf5EPEMFR7NC4ZFB3QpBV6nAQ74+bsYPrdGXb2FgSHB5e4s775mB+Cb75MsarDiq1C5fdOgPxJl46sukAZ3pQDQdUD2h3MhM5WYo1tVGpvG+Wq3QeIQ6DbJ61tUcGcB8C/O8e3uBGZaweGF9zdbwIxipgT94dwIIHXACNwXf63NGM1SKsypMti5AyIxgdsjwWpCPJ9hS6tCS5NKJKzgdqqQMpBpkGlJ4L7oBgwdyB4NyvaPR3JvO6cVqEgV0jncLgmWHDgUKMln+EvHbPZc+ACvbxpe7W+mF1yjdVoXvpE+cTQo24GsBshwhkS5kDWL5ltqFbcKNgl2yGQUjuyX/LoPOk9BsR7BX/2YUdc7eGrbiDpWc2ZgOcc7x/p/v3p7h5RidPKnZC/3yb42r1hZPtPiUkpVKIStm006D0tSAxC6Bxc7JKPhIaqrHxC3rcbpKaG4dCpiynxXePB+6cijnoOTQJE2iXbcFMFWh2gqL9WLFYeG1aXS+ILOsld0Glfp1C/UmbewgJbnevntuh+7pxpN17BY7YynU/5bgeOfTAIBspEMwweui6u2QdM9t4jq+gZdneXXqahSqfBpzJ6lM8MK2etG7uzJazfuxu2WTCqZG7zXnek6ve9UqD+4/+l5qABOoLK2lMYXa5Tnm2rU+kqvUgbQNyxDgR5x63iP/PPOKLeBDGACOWAMGHrWxFaBEsAN2IGCifo4kAQiEwAAHZCAAfAP3kjoWnhRsvMAAAAASUVORK5CYII=" ],
									[
											"e40c",
											"1f637",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD80lEQVQ4ja2Uf0zUdRjHX98f/Lj7Ah5wnKZ0QHEchi6GWSRlWthoOjazrbSslv5lNf/IytZWW4tZK12zpmtUazWZtTmKiKG5UUwR/EEsm6aXzR+AwB13B8d9v3f3vft++gNIoLH1R5/tvX32PM/n/TzvPZ/ngf/5SPM5vA6W1RWx8T439xc61UKA/kCyv+c6p9qv0XwpzO//iTAvE9ebK3nv+Xrn1uzKtarirkHSFgMgooOkrp8k0teR/LIl8HXDGXYHY4zMW21JDuU922Sf2VYrRKBViGifEOPdQoQ6JzHePWkLtAqzrVb0bJN9JTmUzyxs+iLlZuD66Vm5u/LpumJl+Q6IR8DSQYg5aSWQ7ZCRTer8AfoOtV9d95VVHYozAghlKkzZs1o6WL/5jtXqss1g3AQzAFYEzHFIRm5BTIAZhPgocn4ZLpvPYRsK33b0Kt9PE8oeB5UHt9v22+6+VyIzAzLCkBiDeBiEDokpUqJghkGOgk0HU0dOl7gr/cayI6eTLcEYwyqg1Jeyxe7OkskUJPw+jjRfoqvrGpI9kz1v1aDZJmVEI/DGOycReoxVq4rYtNFLul1gd2fJ9aXGlr1nOa8CqsepVStyEKyb7P+0n8BoiKeecVFekoVmXgIjCYCmqrz9qos/rkzww49XGBgJsmtnIYocxOPUqiGqSkBO40efnH3I2eFxp46QWuTCvkCF0WHQU5jJ2T1JUwG7AvmL0MMmytAI15VNdAYf9m3f+eI9KqDqxw8Q2N1CpvYS9l/WodvykDwNWOkJBLO7LCEhK2lIv36AFR8ntqaDoFFMtGE9gKoCosC8ELB9W+YZrGmk+IkwA71HqVr7+Hz/FYDesTtxV29g8MRhMjofoSBh+QEhA2bXFX7zahZFvdu4vLeCgLAhAN0w0PXZMAwDC/BLGhffr8B9+gW8mkXXX5wHTBmIt4bz2y5737XkmtcoWuJC7v0OQ0DMMIjFZsMwDGICpHPNFC12ojz4Or6lDVbrWH4bEFcAEdaNCSlklBVXPOZVV+wg6HDjdOUT13WSyeS/ICxBf8rBguXPMTRo8tnnTa3HL1xuBMZUQAD+pq5T+zakTlXZFrJErtiKub6WFHbm9ARkiC9IQ+35gsTFw/iHGWjqYR/gB8Q/sww4iu3UHnqAvVmFBbcPLaxFWAaSxC1SaXK0JcnG4uFjRAZGb2w5wStXdY4D4ZmE06TOvDSqdpXy8pMe6rRcFDUL5LTJAMuE5AREQ6S+8dH+4Z98HDTpBQLTaefuQwnIBgo9GisfLWDNCidLl2ThBBiYIHAuwMVjfn72RTkD9AORGRrm3dgy4AByAQ1In7IngCgQmpJozX34N3NH0Je3f6bMAAAAAElFTkSuQmCC" ],
									[
											"e11a",
											"1f47f",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAErklEQVQ4jaWSTWwU5xnHf+/7zseO1zvseoyBBUP4sHGAGIFrQMQJqQC7NBZSohxbQSv1UFXkkLRSy5lrD1VV0UNPrZB6iECK+EqIhFASEhVslICR+RLYmBq89q531zszO7Mzbw7gS9Rb/9JzefQ8P+kv/VS32vpPU9irA12/yf8RTxZ/2ymLH4od5tuTPXJg68Nk7PPp9O7f/LT2nxbxgsLstcm+55Ddb4u2dQBN7c8ENK43aZxLiO8bmF6bdPesl9t+t0UNDD9Ix+6Jdar38m5zZCRLByYOFf2sNtH8aiGbc7p37dxtbN7SQ0chD0C5ssijhw+49d14q1EPnm63h7yCWOvGBDQoMx5/9plR1fO3aro0ojBo0mA6mnAHfjLojo7+nGymnShM0HHystaK1Wzv287BQ4eM8+cvbrw/NoFp2WgSapSo6vlbKtFx4ArvV0IIMRXdpX/XGxwdPUpQauEvNImXElpBShykRPUYvxKSBNC/8w0Wa4vcmRnDUIpK+jx9ljz4o9KkFZ9qXmljoCu3Vo4cPkI410IHEtkykLFCxAoRS4gkOhIkgSZYbNK9fj1TD58y15xKpvSdv4faPyMBP9CNs0rbbCr0QdUirRmIwEIEJjI0kYHxckITEZiI4OUNVYtNhT6Utgl04yzgG4ByhTfaaRWVueRSnWxScDxMaRDpkKYIAfFKDo3SNpbIotMWlWABc8ml0yoqN/JGy3r2SwMwXOXt6bC7yKsCoqY4N/MPIhXwwY5jbFy5mVqrAoBrFXj84hH/unMaK3H4qfsBeVWgw+7CTbw95XTWkIDZJnNdruGRy+bIezn29QxRWNXOyW+Pc7N+le4tRbo3F7lZvcrJb49TWNXOvp4h8l6OXDaHa3i0yVwXYErAkEJhKxvHyeBkTQ70DHNs8AT1sMaZ26fJr2knX2znzO3T1MMaxwZPcKBnGCdr4jgZbGUjhQIwJKBjHc5LQ2PZJpmshbPC4nrpMgB7X3+TjqJLR9Fl7+tvAnC9dBlnhUUma2HZJtLQxDosAVoCcT1d+N7XdZQhsB2Tloo4ODhCX38vR4ffB1ugbc3R4ffp6+/l4OAILRVhOybKEPi6Tj1duA3EBtAsJ3MXyumL34SJL4XwaBGzum0tV0/dIptp4+HsIwwpObLzXYZ632Hufpn5hTpCSMLEp5y+SMvJ3AWgKYFWmDbGJ+s3Lkz7T2hGESIVxHELvxTx61O/YPexLfT/chMf/eUEUTklaraQqaAZRUz7T5is37gQpo1xoKVeCdastcoztsocLlhdbsHpwCt4fDrxb67NXOT3x//Ewf2HOf/dJ3hqJa9lein9t8LkzCTfPL/y7Pvq139ISe4BybKxAsg7qv3QW6uP/Hlow5HuHRu30bHR4bUNm7CxAUGIz+MnUyw+Cbj9eIKvpy49/fL5pY+DZOkLYBHQy8BlaKcprd3bCgMn9q87/LPNnVvVykIXbdkMAH4jpFSZ49H8veT6zJXLdytjf43TaByYB/QyhB9Bc8C6dnPF4Jr29QfWZDdsyzteJ8BisDA/25i6O7s0fW0prt4AZoD6Mux/AZcjgTxQALKA9WofAQ2g8qpi+uPHHwDu9/691S0IHQAAAABJRU5ErkJggg==" ],
									[
											"e10c",
											"1f47d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEOUlEQVQ4ja2UW2yTZRzGf9+3ntZt3aFja2lXGBE6QMUw5rqRDQcqwpwgYtThxbw2grdGEuQKLgwJEkAILiKoETktA81UPGAMgzCiEFzH2ISxrdvajh7W9vu+fgdvhkGzGS98k/fizf99fnnyT54H/ucjzDaw5uYuLSgtfbHQWRrIK3B4AVLJxHA8GulORiJn5Ezm5n8C5phMTteCBbsfqw20BQJPmp5YvBhnUTEA0dh9fu3tpbv7inrjcvfHY4OD72iqGpkVaLHZFi4OBDrXtrT4X1m3Hmehg6yqoao6ACaTiNmUQzSe4Iuvv6Krs7Ovt7u7RZGk/gcM08POHq2r72rZvLlyw+qnkCSJP4aTM6/DYubV9evIteX6cwSx67efL9ZoqhoFyHnwyVdVdaDhuXVNa+rrSU6lSKRSSIoy401JGdIZGa/LRSKrFocnxsvi4XDHX0Cr3b6k9plnD9XV1goF+flEYpNYbDYykkw6k0FWFORpmGaAaDITi8ex2myYLRaSkvT4UP+tk1o2GzYBlLhcW9y+eaIsy7y/8z0sOSayhsHLbW3Y7HYy6TQAuXY7sWSUk0ePImQVNAQ2tb2B2zdPLHG5toQGB98VAea4PfXlXg+fHDyIv6KC77/9Br/Pw/ZtWxmPRolNTRGbmmIsEmHH1rdZv2oVp788STaR4NPDh3F7Pcxxe1YCiIDoKCmaazNbCY8ME5qYYNeuXai6QHJykp/On6fI6aTI6eTHc51Iifuous7evXtJpdOE7t7FarXiKClyA6IJEA1NV202KyWlTn64cIHeYJBsNosjP5+bV6+yobUVgN+vXcOWl89H7e1gGIyPjlK5ZClWiwVD07OAKAJG6N7Q5bQsU9O4CkEQKCwsxOvx4K2oQNc1JFlGkmUMXcfr8eAqK6O4uBhRFKlpbECSFUL3hq4AhghoIwMDR24Hg1rN6jWsaGgkGY+TX1CAIstULvKTm5dHbl4elYv8KLJMgcNBMh6nuqGRFU1ruBUMaiMDA0cALQdAy2bvR0ZHhIXLlzesbGrCEGBsfJxyXwUvtG5BFEUMXce/bBnRcJipdJpldXU0t7YyFg5z5tCHu2Ph8ClAeTh65f7q6v2vv7X1JY/bjaGqqIqCxWZDEEUEQNU0soqC2WxGMJkYCYU4vu+DU309PW8C439LCiBFQ6FfQsMjC3xV/qri4iKuX7rEifZ2FFlmsC9Ix7HjOMtKKZ/rZWh0mM/2Hzjb13N1GzABGP8EGkAmMjp6cbA3aC5/ZFHtikAtUiLBdx0dDPXf5unmZmqbVnOjN8ixPXv2Ddy4vn3amTpj2zzoCaDM4XSubdy4aefzmzb67GYTgpBDSpE5d/rs0MWzp3ckotGuaWfaw+JZCxYoEUXR7Zo//7WF1TXNoNPf03N+7M6dz3VdDwGTM4n+DQhgBQqBvOl3CogD8myCPwEpIN+laW5o7wAAAABJRU5ErkJggg==" ],
									[
											"e32c",
											"1f49b",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADbElEQVQ4ja3SfUhddRzH8ffvnHvPVa8zTVemc6XsQWFprkiN2dwGEosGKxg9UMSgIEZ/RKw/o/4qYhC0FvSANf1LDIqgpmM0dGWz0dpDzXZ9mC7TXa96r/f5nnvP79sf916nQdDDPvDjnB/ne178+P6+cIujVm92beTJR+t5trrCrJlddGYGrtJ7corjq2vaq3l8bwPP1d5p1flDtn9glN4T1+gSQa+RX7iPtyc+2Cax8c/EXjwj0ckeme7ukDc76HUbWACvPMixyY9aJDrWJfbikMSufy5T3R1yuI1P1mDbKtjhe79RHMcnEh4Smf9CJNgvTvKizJ94Sl7fzccvt/HWXN8ecRLnRJb6xfH3ZWscn1zr3iXtG3gCwAR4vlm98ciLB5sL3TYSHUc5EUgtQOIPCmuaeGDD+PbdLQU7ytoOoZIzkApg6CiSCqBSc1hl1SQvn7693yc9LoDaKtdm07KR5DTKSa90VjlAZomS5mdABHH8KG3f/C4gqTAuD9y7qaAZYrgA4mkd18k5KHbAsUGplftSCtC5dwQk3ygBEdAunGSKUDwTArLg6KxzMR4Y61xXXoRIFCUqKykjB6wehhwkGhEBs4i4f4yfJu2zK+DwFF8FJ345XFatsQoqwPQARnatGawcSBZU2NjxSYITvzI0Jl/ePGGA4cFzqbPrt1xqLassxrTWgasEVBGoPA6gQWzQCSQTRtJhYosRzl/Qvh9n+Jp8pQi654wcmZ92k3TcaFMhKgEqBGoBVCC3FoAgomKIKaS0ReC6xfHT+l3bIbEyNgC/hxj1pnVdY4Onqai8BNNTDEYhyizMtsD0gGEhuWdGYGkmSl9vbODDQf1q/rpWQIDz03Jqs1d33r3JqvKUejHcFhgmyjDBMEEZiFIImnAgwvffhCZf60ntS6SJ5I01YEZjj/j0ye3rZX/lPd5ST3EJyihEmR5QFhhuRBlEQxEunVoIHnovsndumYnVxhoQIGazPHLF/ra1yjlQXlNQ5PZ6UYYrO4VKiIWC+AZnky+9s7Tv6g0Z+ev/f5uGu4yHvjtaEQ7+1ihp/8OSvrFTln33y4VPK9MtdcZj/xhanaYaY/fwsfJY4PJWCVypl5+77si0bzEP/Ccsn+aNRufgkdvsH46Wys6txtP/C8untVbt31NvHLwl2L/Nn+qJnlPdCODlAAAAAElFTkSuQmCC" ],
									[
											"e32a",
											"1f499",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADa0lEQVQ4ja3SW2hcRRzH8e/MOWc32VzWJtolTSMlGlGCaIM3ahIRJAhiakMSSsVSKkj7UK1W332p+CAIgm8qFn0wIt5AQWs02ja31lpJ05pYq0naJJtks5vdzV7Pmb8P2VxWK6L0D/MwMP8P//nNwHUuVbQL3rubqpan7PJQnbs8d4VIfw9LA8eKzlQ0dVDdvNcfrK3PJhfDRPp7iJ18B8QU06GuV+/f95182Dsjw6NL8nHfrLS/cErYdqgHZfsAqN335iMHv5cPjl+VwdEl+fJUWB4/fELY+vRbq4wFQOC25h2dR99+/2gLrq4gnPATKCun4+E6vNJbGn8ckxoCt+/YuffI868cugdXV7KQ9OMrKWPPozczlQw1/XL+3Hmy0xctAFW7++UD+5/YHs9WcnkG4mmIxGFiXmhs2MRvqTuaSra0NB/oupU/whbhmCKRhoUETC9CXSjA8TOxKjPf954N4ATrG1L5Mn6fE/Ku2pCsYjGh6W7bhghcWVBk3eKkYsuCT5VStvnu7UsXwAYwnpu6GhEqKiHngVIbnkspdGFjZIMkK8tSIJ4hl0vHoAC68Us/j02l2xrqK0jlFQKg17x1vACKAAYUQsCCyZk0mYWRwTWQ6MDnZ8diLyXlBjYFfTh+jbKLjLVaS8ODfA6W4jnGf40hkROfroOJ0f7s/MDgiK5+QFcEKat0KC9XBErAscEqTOsJuC6kMpBcFlJxFzexDAsj40SHv1gHEaMm333NqnnwI3QJaaNJZWxUHpQuXHs1Nm9lKc8DlcXWUbzJY6+LyabX/yFAauIi/qp668bGu6xSH74SjVOqsB2F5YDlgG2D7Qi2ErSXg1wcM/HZV2b8jSOFZDeAgESGv9HVd7bp4NYt2u+gHY12FMpWK5NaAiKIm8Nkk5jZM5fdoefacVOJVUMXJe6lk+7Qi50yd25C8gnE5EFLAStc2uTBW0ail6LuwOEOsouzG4miCQFwl5fM7MC3Vk1rtwoEA8paeRUFiOtiMilMZCqT632mXaIXhv7a/ncQIBsNm/Dpk1booW7sMj+iENdDMilMdNbN9h7sNHPDX1+r9dogIOm5KRM+O6Q3t3aJcRzJZDGxOS/X9+yTZvqHT/6p719L33Rfm2/n6Zxv10+ia9v2/G9oY6lQ6y5d+9j+64L91/oT/PmMOteoHwIAAAAASUVORK5CYII=" ],
									[
											"e32d",
											"1f49c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADlUlEQVQ4ja3TW2wUVRzH8e85M7vb7qVXpRELaIulDSHYakW0rTw1BiIRIoVIRKJJ0Qc1hvjik4kx+EBiopIQg0b0qYmJdxOR4KXYlnIpplCS3ii9sV0s3Sk7M7uzM3N82La0iDEafg8zZ5Lz/5xz/jkDdzhi8ceqYP2uyrzG54oiZSsMOzE+ZHW0jTidRxfPKQ/UbV8dbthzV/Teiln7+tRQqqNt2Dn5iUL5S+Ta8I53D2z5WZ397qoaPW+onh/i6tDe39WmwlfapNCDABuiew8dbPlVnfl2Qo2eM9SFE1Pqgz3tamPsxSPzjgZwt17VsO/Jdz5+6cNGQipG9nqIaCTKQ5tXUKpXro33qHuW6dWPte7c//rONx8m5BXgGCHCwQgbtq9EXCur6714/oLhTV7SAOpju97a3fp0rWYWYIyBk4J0Em5MKsqri4leq6mrLm5s2PT8alITGta0wLXAToKZgOLlYQbakyX95i+f6wBl0YoHtHQEY0KhsgIhQM21ODMjqX/qPhRgxwW+s7TzzqxC6PncX/JgLQnQAVzPtVJxhSwAz83NF9x8CARIbrY9txo+ICQ4vk/GsZMwBybswT8Sl+3mUGUMP53bngSEWHoV1Pxb5ca+UGghSEzYXDF6uxbA4XTnN+O9yTeC6SJiRUF0XaLJnCTmlVtQH3CzYM46jAwkGbTav1oAr2YudvTPdnbl95U+aoYKiUQC5IUFgXyQOghtTlLgu5BNQ9pUWJaLYZmMOb39I+nu7xdAhfK7jE8P1kQf/0KJPDxbks3o+EmQYu7oItdDpcBT4PkePhmygRk6/zz6nqsy9sI9BJjOXrkU1UoqVkXWrs8LBgnpkmBAoOsCXQNNA00HTVMgFR4OljfLWePrH3+afn9/bqlFIMDldPfxlXnrmpcFy5eHtAABKdGlQEqBFCBR+CqHmV6KQevM8GeTr211lHVjyZ8yH0+5Tr/ZcawqunFbUbC0KCB0AlJDCoEAfBQuWSzPZNwemPlobN/mmezE0GJjCQiQ8U2jP9V5ojra1BLVC8O61NGQICHruVi+RTwzlj480rp1PN136tb6v4EApjczNWiePlkTe6IlqEVCSgmyysN2La5l4u7hkZefGbS6j92u9rYggOEmxoasc6eqwk07pAgEMl6G6WzCOzL66u4+87cv/6nuX1MZfqT57arTzoE1PWpdrPnZ/w0tzppI07b1sS0v3BHsv+Yvlp+aZz3+U40AAAAASUVORK5CYII=" ],
									[
											"e328",
											"1f497",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADXElEQVQ4ja3SW2gcVRzH8e9/dmY32c2lSSpB6xYbm7QSqib0YmsSH5Q8KEZbTKn1gihW86AixVcRRVEQioIvatWiiBHxBhasUi+tuWxt1Nba1maTTZO02ZDLZpKd3Z2dmeNDNstujYjS/8vhwPl/zo//OXCZSwo3mwjvamXNA7V6VXjSmRvrYbi7l5EDhWeaWbWjhboHVwVq6mYyZryH4e6jxN5RKK9I7uT6l7/b8oK6+PFxNRcZUROfDqifOl5TT9DSraP5AR5i0xs/3PaKGv8ooub6Yip+8IQ6cuc+9Qib315yfAANrGx5cdue/a0fdFHuBAjEbcqCIcI7NnKtW92ojl+8cj1XbNt716NPb3zpXiqcAIEpm5A/yOrdW6kdleZfz5z4/QLmaR/ALml67u7H72+qMDUYSoBpw3QKNWJS1RjmumiwubVkXcvarlvxxeaRuAXzWZhKwYUFguFqEt+crf7eG3xfB6gzautDlqCGTSTrFg1Ym85wTecWUCDnk2AXj0olMpT64cbQmibmQAdwPNdS4wtQroHt5ijJo6Ll3s5ThdTiogueypCy0wnIgYPO5G+ps/H28voAYnngAWjLfYQCzENpQFAjdT7OyfRoXx7sJfZlYmD0mRWmH39VOZqh595LuyRVwT144GSxzQUS54Y5ooY+z4OnmOjpzUT7ak6V3lRJBUZJCAmVQtAAwwc+WUyt1OJIMllUMo1jJUlicpKxPyOMfJUHFcp7j/5Xb5aGT0qUQku76OksTHu5SEspZTEZLi4uGRSz4nBARfZlcFL5fwgwwszpaimra5TVN/gliCYBRPyI6CAGiA7iQ4mgBGxxMMXiCwa+fp3De1Xu1jwIECH27QYJt1/NyqsMAmgYCAaCBmgoNBRg47JAip+JDj2lPuywsOeXjCLQwbV7GDy0VdZur6FyhY4fHz4EHyAoIItDEotzjM0+pvbfPk4iWmgUgQBJMnO9DB5uk/U7KykL6uhouWMONhYWo8TTe9RbHX8w3n9p/99AgFmS8WMMHr1F1u0MYQQEcHGwsJhgyulSb94TIXpoud5lQYBJzNEBhvrbpL7TQIwMFpPMuE+qd+/7kTOf/VPfv9Zm6tqPybP2L/K8aqdx9/+GCquNhu13sOHhy4L91/oLxFdj/p99HO4AAAAASUVORK5CYII=" ],
									[
											"e32b",
											"1f49a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADf0lEQVQ4ja2TS2icZRSGn/P9888tEyepqTGBai1tsFipiRXEBl0UA1ooxMZWLBW8gHQp4l6xoGhBFN1UK142DV5RXBilZlFsU8E4Gk1SmzQ2iUlqMplkZjIz/+U7LiYJiVZE6bs5fHDOA9/7ngNXWbL2EWnioXiLHE5cG91UznoTpQvaHUzw7rqeRh5ItJhHEhvjWyoLlZml82G3P87bgF1Hju2QF/e80Krd372jZ0Z79aPv39Ou1+7V1G7TjSEKkGiTN/Ye260n+07omYu9+nnmA93/6h5N7pK3VjgOgFNP+z1Hbj/x5pMniadd8pqjrq6eva1dhBvztwzM/NQUuY67Oo/c99RzB18iWhujqIuk0rV03XGISwy3Df8wMmALDDoAyVbz7BOHH2+1qYBLxVEKYZFcZZbp0iQ7Nt3GzPVjbQ1tqfZH7z7CjPc72cplirbAfGWWOe8yjekmTg/1bihdCN+PACSbo9vChM9keYxA/VVnRWHRZtm/6yAqyqxOE/geuuK8QsEuYGNCemuyNYtHBMBauzRdnsKGPgEeIlWmIIhWKwiKRQFVXa7gEKHs+Xi+lwOqwNKUn7m4MNyRanSpyBKCYpZXwKzbg2qUqitVcCXBSHaE/Fjl7CrQG9XPfpn68Rmn2WNDbT0JE8FBcKT6LxFdtcBiUIHAQsUGZJcWGZgcpDxsP10FBn/wba6/fHZoc/+daSfKhniCa9wakpLElQhGnKplqvjqs2SXWAyKzJdLzM+VmR90zvvj+sUqEMUuntJjDe3uh5GNSmiKlKRAIIpjBLOckooSquKpEBrBQZBslIUe/xUNKa3uIUA4zyCwpW677KxNO6RihhrXIeYYohFD1DG4EYNrHIwYwsBQnLFMfmy/zH1ln65mvgYIULqgX7sN0lG3meZkypCIQMyBqAOuAUerPgYBFOeUiW/C0fHj4T71ya+7lDURevkB7YnfYDrTjVIXTwiugagsNyoEPuTnlPFz4fzQy/b+cJGRtYj1QEA9FnIZeyq51RyoaZBkLC4YA2rBDyGfVcYztpw5Gu7zprXvr/N/AwKEJWbmMno63iIHovUSwxF8Cws5ZeJnG/Q/H3SVftOeK81eEQgQFBify2hfdJs8SErcQgmmhjTMHA0OFX/VT/5p7l+VuFE6bn094u087mrNdnn4f4PWKn6TdCZulseuCuy/6k9EsZ/N1buZsgAAAABJRU5ErkJggg==" ],
									[
											"e022",
											"2764",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADCElEQVQ4ja2STWhcVRTHf2dm3sz0TVOpVKrFuCiMFKO2U9BIKAilRBSa4tBGCejCVYsrUfdCaenCD1y4s2IxSFJLEcGqjQiCSCy00pBpkrb5bBpmJEMnL8nL+5p3XMyb50wrQrF/uBwu95zfPed/LzxgSetmF7z+DLyxLZXqrAbB4jgMX4MzrTl5KO6GNx/JZHbWXLcyDsPj8IVC2EZ+EU6d7u7WybNntXzpkk6dP69DfX1ahOEkpAFegs/OHDigE0NDWh4d1ekLF/Trgwf1Ffi8yUkCPA773uvpOd0/OEguCNBKhc2myVPFIjvq9a6Vy5cfewJ63j506J2XT55kUxDA8jK5dJqnBwYwb93aOzY5OV6FiSTAfpEPXjt6tJCxLOyZGQLLwq9WcebnebSri+3T03sL2ey+548dw5+bw6tUCFdX8ZaX8ZeW2NLZyeLIyMN/huFXKYBOw8gbts3G7Czq+7GxCvjVKs8eOYKq4i8soJ7Xdl6v1TDSaZ7M5QqsrJAC8MPQdm/fJtPR0VbQjPVEogEI231XQFIpNlRxPa8GNICLQXC1NjXVm8vnUduGMLwH2gqJYyIBpsmdhQVuOs5oDCzBd5UrV943LQtz61ZShvEP7K6uSCRiaD0IsC2L8o0bXFX9NgbOwe9jrju6uVR64SEgm82SzuVImiZiGEgyCWGIqqKeR9118dfXcWwbC7gJ1yfg+xioEP4IH+4ROZdTJXQc6o6DVqttY0vzIWj84gCwRfhB9RMfNuJ/CFCGiS0iO/Miu7MiGCKkREhGKyGCRFFF8EVYE+FX+OkcvKuRrTEQ4Br8nBfp3Q47MlH7iWhJFJudrTXyZz5W7XNgNba4FejC2qeqh6/DvB0VNkeVCFanMdsi3PlItWhBuZXR1iGN5JUx+KUg0t8BZjK6tendOrAEznHVvln44+76e4AAFlRK8FtBpH8TZGg+APAXBCdUD5fg4r/V/qd2wf5BkfWLIjoiot+IBM9B/32DWtUFvV+KeIMi2g0D/wvW1B54tQfeeiCw+9XfRJFVW0dWtmgAAAAASUVORK5CYII=" ],
									[
											"e023",
											"1f494",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADf0lEQVQ4ja2TXWhcVRSFvz13ZpJJGCe1tQ1lYgitNibE2FiFJkgqrSIlTWsNSCF9KEWoVvS1QYoP6pM2FYNaUPyBijEmUrC1LW1IkcyDECQaUtJYTZrJZBJqM5NJ5t47P/duHzIt82ApFtfTOZyz1jpn773gf4bcXjwGB+rh4IMQTsD07/DNNfju30i1cKBRpHNtaWnV35YV/Q2+vgZ9dy7sgg+716zR4ePHdfryZb1+7pxe6urSfcHg5wKeInejTeSr/o4OnTxzRmORiF7t7dUvW1v1WfgAwNgCL3ZWVJzc09PD5pYW3NlZPJbF+ro66urrm2IXL4b/hB8Lxj1vHj78yvYjR/AuLaG3bhEMBnm0vZ0HJiebx2ZmfjV2Q/fzbW2PhGtrSUYiuMkkmkjgpFLEIxH85eXewbm5TzdC89Fw+NRTnZ24U1PI0hKk0+Rv3sRJJCivqiJ65Uq5txIeLsnnWR4ZQTMZXED9fvLz88wMDPAWPAFwEC407t2LJx7HNU2coia4iQSefJ6qQKDGq5DJxGJkvF7IZvH4fOD3Mzs4yCewX0H3wA/bmpqCobIyctEoqoqooqoogGGQtSxyjmN64zC+cuNGU8jnw3Ac1DSxolHMZJI0JAHC8FCZaeIsLOCurKCOAwVBRHD9flKxGLO2PS4NsP+YyMD6QIDSbBZPPo8LpIG/RHhNVQD6QKsbGijfsAE3l0NcF1cVJ5cjnUoxMz3Ne5bVLl4ofVtkdKvqliBQIqujmQXiwBAMn1J9ph52fARDocpKxDBwLYusaZKxbVLAKFx9B7Z68mD3q3aZIrgiKKuD5wdCQLBQfBdQwJ2fx4nFcBYXcWybLGCK0A/HHMgaAAswERLZtBkaSwBvgZwBXlWtBjghMrVOhIAInoJ5XoRlEc7CF5fgfShKwWnVo2MwagMOkAO6VF8AeF1kcB0QKBAUyAPm6ldHelXfuK1zR9CG5ROqL01BzFzdMw3jhZzXhQpl0IKhBVyHmR7VjuxqDwEwikNvQmIMfn5a5GWB0oyIfwzO+8BoFnnOVxBLA7Ow9K7q7nmY4F6oh52nRexukTmAMqg4L6LDIjokon0idh3suqdQMZ6EfZ+J6CZoBTgp8sdZEf1exNkGHXfjGXc7iMPEIsRqRHZOwE8lImtrYMfHqod+gW//0+uKUQ0tHvBuhMe3w6H7Frpf/AM4qIpZKz147wAAAABJRU5ErkJggg==" ],
									[
											"e327",
											"1f493",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADwklEQVQ4ja2Sf0zUdRjHX5/vffUKhPgx/BEeCP4oJ8y00EVpmVmZ1lyJxojlLMv8o/5w65/qj2hqtVnWXL+GmlmZKyqzhUxnIrqJBEiIoF16gnIc3XEcB3fefX88/YEYFf3afG/P9ry3Z6/teT8PXGOp4WYuWSXzyHk8Q0/J9Jo9nhrO76rn4hfDZwqYuHIek0vHOtOzoro/eEx+/vZgxLv5L+RSZm89fPsG8VbUS6jWI949dVJz7xuyioJ3h2aeZM6HRxZvls6KBgnWDUj7qy+J+0GXFFO45Q+wObiKjt75uljuXpFDHSIVbpEqj9jNfmkuKpcSZpWVMnvDT4+WizT5RQ71Sc9Gv4S354qcQSrTn5HZZC8DcAA8pd/x1pIXSicnXoqDJwR9BvwahYth0mZmM6vJedf81Lx5055dCK29hI83AM+T/FwTjAWXy0O4OjejOnppj65A5SaMz04ICeINoWQoWgFAD2jkrL4bBWgXIsQC/dQ3fM6kx46SMmpwQ2dBgHEu382qR1J0AbEM87Ld0YfgRFkaoAHW1Ys5tCudLTgdo5g1ZT2V7+SR4HqZcQtg/xOr+KWxryuO26cDnLvsOx057ZuZmDWRaE8Ay4wzJmE8YI3wGHFSdJMVuUv58aODDNTXM8G/EE190oJcyVChHIu8rqIboqn4jTrCRjOpkblgRCFiQ3RYxQSicTQTwgGDzhZIO5vBFvvAKx0E23SA43j2tcU63UmtmVPUoh9InNFOdEsJ12ca4BRQajBWW8CwIGrAQC9pRjID1gxOifvMCS58f/XKFrZ5jlB7oSNj+dSdX2pJK/vpei2T5HAeKhiFYBx6DAia0GdCxMQyDcRWxFG8yN6nzxM4BaApUA6Fo+u6TndK2cdBvRBIhrGHNxHI3ouJDYwC5QTlRNRoLKUTU9CnYnyqTuyswf311Yh1jTELJrGudRMhsRCR3ytwAKkqyJP2hLdFVKWI2ieW+kaiarf41PvymVrbkMDopOEnc9iC5emle1s13gwf+bfdRzIOaNoK7xUvJa+zlOlGDppS2FgYGPQToRlP51rZ8UCQAd8IrzAoDRbXlRMKHMF807nMDFIpQpWIqhRbfScx9ZUE1C6pUxvDNzHh1pEYjuFGwO1pY1pjLT3bz/nXl6pbHrGUoYONiUGECJfwxdbIBw8303HsX4EA3WGMs920dxuR3Sc53zJfTV2uYWkxLuPDb66TbUW1uPf/7Zp/loJ0pbhxyN9PfvFJVSaNqkzuYfqK/wz6Jz3EzDVLyF99TWD/V78Bw6/UoPubcy0AAAAASUVORK5CYII=" ],
									[
											"e329",
											"1f498",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD7UlEQVQ4ja3Sf2jUdRzH8efn+/3e92632256k/3QLU/dBipjJlZzkqmpiJVKRmm/iyIkKsgikCKlUMKFYEWFaZgFoav+0PInlkuWEWtminO7/XB3O9vN+7H7sd3d7vvuj5U0SgLr9ffn/eDF+/OG/zmq+rmmLz31NVWj6YTq3t/UdPWbtzeLlcvdsFi2/Ey793GR8nXNPqXpxn9tqOu21c8PdR8YyJYvnDoh30ou8vcseIqFexZTvcGJKu0ictpCcgAGmn0l1a8/oc9/b5k28wWnyOR2rh4fJ2rOFVuUshUU2Os3bWOjXN58QFLn+iXZ6peOtw7LTuPeHhu6w8RwvmOuvdzReESSrX5JnQ3Kpe2HpZFV3RpKv9ZQsp0nwcrclbPN2/Tak8vLVy9EPx9BD6Upnl3JtDkziwq/7q1fhHf9Q9tfqquYU4PWNYTx2wjFc7yUzqgs8h9vNS8QOgGg/pT3uR/rXvvui1MN/zC6pUADywIpthM5cQlygmdZDRJOo/0xk0PIlNlpenZH4OH4niljaxlTlcte4JCOCCouYClQ2tjgYJrimsqxV+0JlAiIgFgoDVQqjdvuMlUcJSAGgID0x0Jd2e5oqansSEahlAZoIAqRNJmRBIwKdpcLdIVYOTCF7GCaQCzkExCAa8v05PIqGkKT78hz5KOnFSoFpASSEBjoZdeFo8R6/UzNujHIQw2PoqLDRM50sjd2alcb/d+N22Ephd5DPHNxOuWmq8CN7nKB0wGmTmvwFLdUR6i771V+2HkQY8AO2RFGc2Ha6U/Us9sbZ3hwXMME6aim9Pxbmb7AkTHREhoqIjBo4czaqXMO8GlmiJYla9iaUGyY5qVxRjVHJ02IXBlNhmWk9wIymrnWEMCBzfmJ9nTLYmprC5QbAxOFDSwdpI+9vM+jd29k0j33U1WoU5SGeA46A1mCzcdaOfnISv2v4ChW9ifpaV6qate7VaFDw0BTOkrTgRImSD47FiyhNNxJSb7OjIoCrCHI03WSFVVlqZTDMw4EiJIKnaOvbbmqeyAPp6YrA4WGEgu3mDTO9TJ/3WxibT4uBtJ4ZxVRWQIpEwIU5f8NBPAT9vm40rNEzVpjwxj7OWWhSYgzHgt/QxU3lZXhUVfo64oS80zk7NVMJn1o29Z/BAE6CP4SJBxuUFUrNCBDmhFJcCj62Uctt6+qLXKa2ryGYnyBBD8f/D4Y//jBpZz/6ovrggC/0vdjlPjIXKbcmSTFZjnw8r7hk69k9ZLpiZtvqzPyoN3mZvDcsc+lefcH487memmj93SGjK2FS80f0vwGAO3fHkmJ6fIVFk+Mdfs62f/mFiLB4L9ZN5TfAXwYpRkL3TrTAAAAAElFTkSuQmCC" ],
									[
											"e32e",
											"2728",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAB70lEQVQ4jbWUTWsTURSGn+ROvqYjhjTVhNTSaszCL9qKGCMWpUosBTFRaA3iohEXQhUXgosspCJIQSgu3QkKIkLBP6DiQupGpAu14MpUpoUE2iSNHx2vq8I0OpOZhe/uvufch3vOPfeCSaoPjTYKCIJ2ca950R8j0w7YE2a3Y2C2j7F2wME4xzzgcQQcH2IirtFjBzycYFjx4rNMCAiCmW6yr66xWNWRX2aQ+RRFq37OXaEeVYm1KQSGehktzyKLaW5Z5YQUOhZmkE56DcCzHO/t4ge2kV58g7x0kBuOgIV9TNrFH5znaa2GfH2HT1Y5wrzQ63xd+0UdQPOzNbGFvmSEvYe6OVHKMX1hijNqF8T2Ex0Jc/FHBY8q0FQ/mvGb9Z8G3zcBN2BeD0L1o+2MsCefonh9jFL/VXapCRACvAHoHCSSVhkJr5DQG5SrTZbW1mlYltc6GpNHmFqZRxoGsqEjHxZ4EVLosGvRJmV2kG317p/lca2GfHmbj45BG7p7nEet3kCMo9/c3LJZn0vIcJCo2VN9aK7mMKAQOtlLfu4mlaqOXJjGyKWYML+at5dZ7Qyx3dXpTiU5V55FFgb+nst7wzzxCwKugADP83z4l386ybjdbyOsAorAN7/Mu1a/0mSpaTdvVupSibve9D/0B7w8geiHnHcfAAAAAElFTkSuQmCC" ],
									[
											"e32f",
											"1f31f",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAC30lEQVQ4jcXRW2hURxzH8e/MOetmN5dtIonZtJaaxUTiasRogtir+NRSQWsXn6wogqABBVG0oE+pJRUKfZFSfKhiU6sUKngpmkhrwUsVS9VIFU0Qgxd2dYm7Z8/uOWf+fZAEsTEtKvQH8zLz/39m/gz8H2maSFuyjvkvDez+oOzQN6nyMy8Fqy5j0uWeVH7wxIZgchXNLwwuSdI5PHRYnOF+WTPf+vyFwe864+c874H4fk56P0sO2poJz40119J255e1YowrIjnJ/NEl7yRYMl6PApgVVwvenx5aqSNRX2vRIUtbZRFtz2urntu+8uspdnQyiIcxRa70rEgf7xs6WXCM5wcmMKIkcFx9/Gpx3+9DckwB1ESo715afvTDLV2zKuOtqMBFaYtQuBxthRBTAgRUGBGDX3yECXyMNYFC9hZ9OzcOdH6bWXAvx6AFUPDJ/dzv7a15+Ftrcu4bTRW1CWxdQmkXZXIo5aIoosQBXCxLsCJRnPQlftz56el1uzPvPXC4A2CNzB4YvL7LpQP+jVN1s2eaOZHaRpR5hMIB9Rh6vIpgCdmBI+za3n1wy97hj/MlsiPOKAgggjl93RwOD1+Jd7Sn54Rjr4HSQAnwQQcolSN/9yC7dhzo2brHXeYbSk8a9lg/dT8j97zceYx7DaUTKF0HKIQ04t3ETWfoPe//NFbvP0AF6t1WtShUoRCVQ3EBMTJ6KsrGqtAsnKlSJ/5k/9P9+umN+hiNLS0kVdQhMAWKjiE75JO97VPIGwJTwK50eaudhZVhav71hdMbeDtca2zPM+Tv29y9WnR3fy9f+QHe6pReXz/DKg+94hN7VapaGnjz7ACHxhp9NF9+Ej71168z5OIPMbNtmep5fSLTRs4aqklsTek9F/bHgv7eFtm8KLRvXCxexdRjm6Pyxapob3OcjmfVJeqY3bU8euTopqjEq5j6TLC+ksS8Rj4a99Yn0jGFxQ0xmv5r/XPlbz7YK4Ih+dWHAAAAAElFTkSuQmCC" ],
									[
											"e334",
											"1f4a2",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAC1UlEQVQ4jbWUW0hUQRjH/zNzzp491z3u5q6ShqlrtBjdSJSCggILeoqo165EPQRJZNGFLkQUUVFPYRBURHR7MboQFYZRD0lEBRHdM0u8pVh0XGe+HspYa3Ufoj/Myzd/fjPf/xsG+N+a6/srbSH8XD4GsNpodG1O4PpwuPlueTnV5OUtHskzyfPmXk8me/fbdmeWg4bLBcY1WNa7ykgEbdFoT1M6fas1CF4rIioMhYpmGsac8r6+sS+7u7Hm27eaz0QP/jpxpmUt31FRcSM/FCoBgHzGZhwyzZ6HjkPPfZ+ejxnzc/k+PXJdOmnbqpjzBQBgCeFvLCs7vzAS2f4bGAZix22bmkpKaLxhTB+qT9G0DTsc58Np16Uzrkv7HKejWtd3aYAFAL4QhXdKS+mU65LPWMWwW1YIsei251FjYWH/nx0IwByCZOpEIvGiORKhGk2rzxp2g+P03I/FqNYw6rIaMjRD15fci8XokucRMmbBM033pbwJpbDYMDblAi4yjG2CCI+lbAFAWYGfpXwlAcQYS+hZWsxUAeclRISPUr7JrA8DEkCDAAaJgCxPKlOSiEkAxJgaERjnvJiI0KpUbxr4OhrwjZRtg0RIMFY0IrAqFJr3XSlcDoJjo8EAoHFg4EifUphqGDVZDWWaNrsxL48O2zYJIJwLCABbTbPjiu9TtWGsGrbBAe10QUH6qG1TAWPzh+rTPG/p3mSy5UIq9eViKtV7cMKEJ7N8//eH4DGWOmBZdC4eJ4fzfOBX8NN0fV1KiLprQbCsi6g5IkTR5kTi2qQgqEQQQEoJABCcA+Ew3ptm25729tpP6fRTl7GJtbp+tgO43jQwsOWvSYYZ8xri8V7e349WpfBMqZZ2pd4SQDHOx1ZyXlXMudBsG+u7upKdUr4cNZcVpnl1t2VRSoh6PkKWpZyv3mmatNm2X+cMerIQ2x3Gkrl8ISA6XdP25wT+q34Aj2L0bBISiw4AAAAASUVORK5CYII=" ],
									[
											"e337",
											"2755",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAABJklEQVQ4jc2RvU4CURCFv13Z7I1BltIOChtDY+h5Dip9HX0BH0F7jS29iTUxEJQfFSExZjUEWHbvjAXUd0220NOdnJkv8wP/XZ4rfGw0vg6r1YqI4Ps+szj+Pu52I1dPyRVOx+PFwWRSyVQpeR5T1UXehL4rHHheX8MQNQYNQwae1y8EnIgMM8AC2daP8oDOlV9EhpkqAujWPxcDWvuUsv2cBV6tLQaciYw2quztgO8iwzyg84YfIm8JIEC684WAsch8o4oF1qrEIvNCwBTWS5FVSZWlyCqFdR7QeUOA+yTpHcHJAHp5tX+j83r96qHZ/Lyo1a4Lw1pB0O5Ekd4Zo50o0lYQtPN6nE9ZqpIA+2FIAqxUnfW/0qkxN5flcnJmzG1h2L/QD8kyjdVpbmFwAAAAAElFTkSuQmCC" ],
									[
											"e336",
											"2754",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAABdUlEQVQ4jc2RPUtCURjHH+/x5b4c74u6FIqCiwgNSWMijQ4NDQUJzg0N0RAtUUtg1FpfQZoCo1UIgkICh4KGUDOoQMo75MvVK/c+fYDUm9whf+v5/3/nPM8BmHYcow7meH5+MxbbSnLc0gzDBHuI/UddLx9WKgc3qlqc+KYTUbxQAwF8FQSsCgJ+UIrvooif0Simvd6ViYVxQlL7gnC94HJlYoSkd3j+sub3Y11RsBQIvI3qjRx5GHc+X2uWYWgHEeLN5tAuM4lQJMRtIMKLYTRGZf4s3JDlXc7hcGuIcKppuUke8os4yyZqwSA+yTIeUVqyJQMAKIdCrQdFwbwkNRkAMi5rOXKG47ah26XfiLDXbi+bAIYtYdLpXCOmCQ3Er5ph3FrlnVaBuq5r4mAAzwBVq+z/cByJnN8nEmouHM7blqXc7vWiJOEVy2JRknDR5Vq16oz9lI5pQh8AeI8H+gDQQ7TcuSVZli2cUdrPsmzBtmwq+AHJfHwaZmkL5QAAAABJRU5ErkJggg==" ],
									[
											"e13c",
											"1f4a4",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAABx0lEQVQ4jeWSPWhTYRSGn/Pdn+bmNiZNmtBiQkRKpK3XtIo6BJcuIoioi7OLgyAd/MHJVTexOKiDIA6Ci4odHF0UQQV/qOAgFNsaY2MI1fzcJOZz6NBSizHUre/48b0P533PgU0n6dqRvJjHTQ0gFogJIj5ian7k5/h8IWN2DfRnXyJ+ElQT+fWd/twhlAl1u7dr1h+y+ofYdVczekdjD45sDKacGJmrmpGbGnfsxManS5+dZXhKEz18bfXz+h0a7g5iBz5gBGugfoKq0Fz6SvFJDoD4kQcEEmnKb55Tmp7sDGw3Fql8uoJul+hJbKdv32laS2UAeneeI7L7KPUvH8nfzq21dj6bxMFXWNEsC/csVGCA9Kk8zlaozr2nOj+DCoQRy6DlV1m8f+zvZxMee4QR3EPh8fIGDSdFs7QcTPV4uBkPsUHZ0KitMrpD04S8GaL7izipSwA4yfMMHtdYfRNrQq03hIAyVyKLcjGCWcLjzyi/9gBFfOItYhYovTiDGDFE2tTmb3VqaKXDkLdAo3AZ/9t17PhJQsNTKLuOmDFQQrtWofg0ArrVCQrBbQ8Jj7/r/PFfFRrVRPb6bMlqnNSN/wfeFPoNoRZ6gGqqEYgAAAAASUVORK5CYII=" ],
									[
											"e330",
											"1f4a8",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAETElEQVQ4ja2UW2xURRzGf+e2u+fs2W27y3ZLS8tN1EJpLKAFDQoI0RLhAYmJpCEYjQZNUIIkJjwQnjQxmhC8xphoiCYSsChouFYTEYXQ0kJb2kpbaEvb7X0v3e1ezhkfum00Ii/6TyaZzGS++Wa+7//B/1zSvTaduhkoW7n5zbJlj69TVFX8cuLj9s62xnOWlWkHwsAoEAUSgPUPAM3hNnMDpYuzYMHq3R82fX3+jjjTEBFnr0ZEzW9hUf3GwU5Nc8wD5LuRUKYnqma4S1e8tDMZHxmaiPT2LF21+d3tL76+8YEF+eR5nbh1DacmM2f+krzmq/WzQn032wAD0LIQAhByXqB0ybqth48+ve2b72fNrlgxNtjSLEmyUv7w2qeC+bkYuorDIaPrCpomYbg0yio3VAGFQE4W1DHNWHbqPl+g6JHK+ER49PrvH7yXSkbCQtiWP1Bgu10qkgRCTA3dqZJIpfAFC8PAWeAa0A2MAylAKLFwT3fL5Y8OdrUcOxKP9vdpTt1bunxD9aZnqzcVF/oNTZv6KiFAVWWGRiIIWTfmlq6ssizhCvW0XwXsGZVdRk6J4fHl+4Ili+c/uHxN5eqq9Q9VVBQX5ZuYuoqqyjMsFUWi9WY/ybSCL89D78A47+/bfrbxyvm3EGIYGJPWbtlbv3HLtoqiwgJyvQam4cBwKTg0GUWWQALLEqiKjKZK3OgI4XC4mB1wE45maOscYP+rVa/09bR+BiAHgkHHogXFLJrrpzDfINejoTsVVEVCmsIjY9kMjEwwmbRIW+A1nWiqjOlW8ftMKtZs3TajcjIZJ5GYJDGZIZMW2DYIIbAF2FkxDKeKjEVr1zCGy4XHrSEESBJoioxueApn7NfX3pj6ufY0xSULCOQHCczy488zMQ0NVZWQJAlbQI5HJzQaJ+AzsmuCTEYQicQIdXf0zRh7ZPDWqea6n76qv3jqYlPdxfG+0JhfKO4cl+5Bd2nIylR3WkICZLymg0xGMJkUDA7HuFJXT+3xTw/EoiMNkO1lSZJlIWwbQFE1b0FR6XMv7H5n//onn5jj9WgoikQyZRNPpEmnbRJJi5GRUdrbWzlx+NDhpvrTO0BMnS+Y+9jqTTvOXSgoWfVodPz2rVi4tysaDtUXzC/fsrR8WYmha1P3CoEsKTRebxUnj345Xnvyi+Yz337y9u2Ohn1/9aGajI+OhnovXTLcub6yytf2XPhh18uZVGxCSMrCRDKFbbuQpt5BNJHhesOV2JHPD+wFbgB3gAAwMZ04ymR8eKirpeZIZ8t3x9zewiLbSk3Gwr3dpu59ZuHiFfNMjxdJkogl0nTdukPtj8cu3/6jbhfQk42wiem2+1va2HY6PTbYdE1RXa7J+PBQZHygU3P6n5edphqJJujvD3Hp11r7fM2hnelUsutu0TUjyr+V6c1bVbKwfE8geN/9g30twx1tDcdTycSZLKswEAcy98L4z/UnT5jKeES0jvIAAAAASUVORK5CYII=" ],
									[
											"e331",
											"1f4a6",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADWUlEQVQ4jc2UXUxbZRjHf+e0BUphlHbU0sE20DlBAlyYBaLTbLIsUZfFxS8SYkz8ios6o8arJUSzqYkmdspiIle6GZe4i2WCc2zqxjCbIIiua8bHdMgYhdF2ZZTSc9rzeIEtbNSpdz53b57f+3vP+b8f8H8v5T+gCmp2Pmabk2z37ajmHGJjPrSpC/9OqJptOO95WrG6i8gvKTU5SkutrpVuZ1mJy1xc4pzWVWV2+GJ4pv2tdxn/+j0QufkHqZYCqt/udnsj8smQyIlJkZ+viozERAZnRJr7RTZ1iKz+MGTg3rQjNc20SGBDJJEei6EzeeLb6O9Bp1axvrq+JAe7BRDAALsFhiOQZ7cqgSl7peb/wnu9sPz5L1EUM7GxX1NKkKsEe7sunOqO+h331leXF5ptZojqMDANo1FQFQiEjGUzP+x9E0BN+czFVa6CFw/tw1HXtOjHBZgk8N2en5offOGdr4aNUxNCbwjOhsGkgpYwiPQc61sSWVZDa+/hUZFVzedncaxrzJBqLva1TeWvnQxuOTQr244mZfPhuHhePR2hYM3jS2jbQ/t9PVcM6ZwQqfk4IDjWPZFRasmvU0s277JUPvu5WrZtD9nODUDuEnJ548HBznFDfGGRvpBI7UeX4tyycTsoNx4tM1AIuAAnYFncTGdY6LJZs0zzqZkEXn9gRdaKV/btxequStNF9+8i744NQBiYBIKAnlFoLXI7Y0mFuAERHaY1qKopxlT7ckuKUXJcyyp2HuswVbzUislqzxDJgjAaTRinJ2AoAoMR+CUIjlwF653r61KMhH880tTg4OAR7zOe59r8LL/7yb8VXu463usLGXRNQvcV0AzQE6D91j+UprXQ+b6BKf3WApW23RuLG1raP1XKmrwZhbH+Vu+ZzoG5YAwSzAt9Z8fQet7fmaYNbWbknH9sOg4xHe6rLMDT+MZTWD3VKWThpmjhkXBfx9DFy9a1gbCefe77M+OXPtuxm7D/APNrAMKcrWaLp65+VWBO4Y9rELqWJHDyQBvx4HWvTnpvQFmNKacWxXQbkH9DX6Horu1VH4wmHzluyNZvDClsah/DnLdyAchcKvPXLtOTlI+94tGsNQ8/Jrqe1Af3tzA73gEkbyb8p8oF7H8tGALiqcafj5BcLbRshKsAAAAASUVORK5CYII=" ],
									[
											"e326",
											"1f3b6",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACEUlEQVQ4jbWTTWsTURiFn/uR3M7kdpLJRBgrFlERF+KvUIIEV3ZrcCv+gkoXLgJdu3ArFBTcVtzVlULFpYhULSoUXalRRGiGpPO6SFqCJmNb9MDAMPfcZ8595wz8ZxljzAowvw9vZIy5B1QLgd77r1rra/sA1qMoypRSF4pMularbVWr1W/Ayb8Aq0mSbFcqlffAkT3AbyaVZdmPfr//zjn3BDhX9PJer/dZRLrlcvkpU8ZkrbUbwJxS6oa19iUQTAE2rLVvgFBrvWyMWZuUEEABVRG5k+d5FzhekLIEBHme38zzPJ8G3HsuIi+A86ON02QBAV5NAg6UUjvADuBF5GMQBLeBsxNAP0e+PjAvIq/HgbH3/la9Xl8xxswB20ADeBgEgbPWXh8DHY2iaDmO47taaw8MgAh4tOfw3q8uLS1Ju92WMAwFOLV79CiKtpIkEa31IkCj0XjW6XRkYWFBnHPbQPxH9lKptJqmqXjvRSm1BsyMlgLn3IbW+mq5XN5USi065x6naSqVSkWUUvcnjA2AELg0usZrElhr3wJ1YN4Y8wE4AVwGLjL8IAfSLvA0gFLqwdg4JmpabXaVATnDWmhgE/hUtKEocgKkWusZoAecEZH10f3BZK1tt1qtL81mcycMwww4BtQoLjgw5debnZ3txHGcdLtdPRgMslGq7wxLfCi1tdbPlVLrwJXDQv6JfgGFhIcm7hIbUQAAAABJRU5ErkJggg==" ],
									[
											"e03e",
											"1f3b5",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACuUlEQVQ4ja2SzWtcVRiHn/sxd2ZuZ5qZmA4pk07RdNGAFGLJVkIRBTdC3VhcCYKiO7Eu3AmFuipdiAj+BVWzE3Rll27UbrSmQm1NmU6a27TJfN2597zvOS60MnGSDIjv9jzn4fd+wP9c3jQgiuK4Upmdmzk6f7xea7ZqtWZrtt565mi1+XS10mh1tpQvvnr52Sd8+G+B74fhudV33mvMnX6uUp0/EcdzzVJp9pjvFWNQAg/8wCcseFin9AaPhuP/J4RBEBWXz7z5UaEYlopRQBT5BL6HF4DnReAcAMZYRpnFofmhQgAvHPYqR2olh0OMkDmLqkVFyY0i4lDrKBdDnDVMFaZDg+R9jChGLMaoDIfdpNvd2uj1Nu/u7G6sD9P27RdfeP8TtXsdE0LnHCrqDQZ9frxx7VKS/PJ9f9C+k6YP2sb0u+PsudV3LxuhPjWhtdYzxrF+68tPs+xhZz8mCKJinotvde+h+PvBRgUjQhCUqvu9/9UKiChWp83QgYoi1v6z0QN8iCiierjwCeiM4jhYCGCtojJFCCAiGJVDEwKIUXRaQnCIKCpyaEJr88yqWJEpM7Q2H4moU5V9RXH5+MmFhdXzEBT9oFxXm9oDhXG8sBgVKjXPI1TViZZrM6eXX79w9dtGI27cXN8hSw0q2p0Q+n4hOnv2g89Wlp+/kDzshyZ3oVpVh9tzZEtLr324eOpIo3M/Jo4KmFGb/jC5P874AK3WK2+/ev6lN5onqqW4XAv9wEdFAufsnr47nZ9vXP8u4d5GxvbjLR4knd7t39cuTib0omO3fn2MR5NRmtPt7rKV3PzGmJ174/DdP9Y+TtPdpFo5uZKONu9sP/phbTTa/G2c8YAgCOL5U4tvff5UfWlllCX9ZPun6+3211eszTaBAaBABFSBGaAMWKAP7PzN5DDlcP9L/Qmq42vCXN7VYgAAAABJRU5ErkJggg==" ],
									[
											"e11d",
											"1f525",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAC5ElEQVQ4jb3RT2hUVxTH8e+5972ZeTPvZSbJ/E2cxj9JjJPaDGpMqGNjrIvaIf2ri0ZQWrDdSFtKoa5diOBG2qoroaWbbpqdq0I3hZZuxEXBmIZKsYgpg8WRTubfe9dFGTuUKcWA/lb3wD0fzuHA04oDfRvpU/+Bea8IH3dqD5JhiG0YLMBcAfZ36hM25/sg9bjTPko/DGVhFGCXxcvfjWEKihcABmB4w7AC/fkmfrp+BPOOx3kbIieFS//T808ElAIdAgdgOkx57nn2JmfgjUneGhByecWOIdje+aPB7gkegncj4O4UDu5WlAGObeaDZAncKSjsZ/hAP0fO+iyMWUwfdzgH8Bp80hOcgkMtqL+Z4dR8jlezNltenGUuNgFOHrw98N4sH7kW8YUtLJ6c5dRzNvMTmulu0Oo8LsBiXJM6PMNBO0OQXyaZKKKttI2OR4mOVBktmeySw7VnCqS1B8fv8uHpGxztCfrQLrqU0kVcdxJSk7wUGQLtOhgTx0rUcCdbbM+Rjgz/vVt5hfLFXxm/1eDnnkfZm2TeGRNizyaIz0RxtgnKFoxfRzkusXHBmwJnNEx4k0N/Eb2Q5u2eEwLszFEMpxRWIoZOeJh2gEEBAUYNIm4KK/oA0TbKbhLZWqc0Yg58ersHGBIimQEyOioE7SoQBpUD5SHigNhgBMx9jP87QgvL02QG2+meE2pBhyxsQgYRjSGO6CzYmxE1CGgIqhj/Dpi/wLTBAh9aPcFGwHrlHpVg3c+jXMTKI3ocsXeAzoEKQVCBZh8oH9NsEtTWuHWX1W7w0VECCL5d4WpjGfxaHbGSKGcb4kyhovsQp4SK7EaFJxBriGC9Qf2GzzerfNEN6u7iZo3reyqUswO1tHb+xJgmpt1EaRuhil+9Rvv+D7TWvqf24wpffsbXl3/jjAHTMYR/JaboO5bh/dcnWBzJMlJpshYflHjENqHV2/JL0DBSfUB1aZWvlv7gSjf2RPIQqGLC+kscOeMAAAAASUVORK5CYII=" ],
									[
											"e05a",
											"1f4a9",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADYElEQVQ4jc2SS2hcVRzGf/c5M5ncuZ3JzDSOSTOkSZo4NtViTY2KolS3jSi46EJsieKj0k0VBEHBIvjYFBXqg6KIzyIqtihREIpYLZgILaHGhLwTk3FqZm5yX+ceF6aL1jQU3XjgW33n/zv8z/fB//1o65mKgtbXXRg2NZrnq/7AlQDVdU1FSW60tY5dpdzBvm25qbiuNP8nYClnvBXXBAnFpyNfd3Xf1syIoZL5t0Atm0p0oulIRcNUIvJ2zCzljXfXA+qXM25tL7y4ozPbasgVZOARyggpI5Kmkl8PuGYoN23OvtfTavWrQdUIPI8gEqz4IYGQtGzaVJ9Qta6Z884PQlK7dFZZ65F7romHlgkykpimhmYmSNTVk89k8APB/PwsZ6cr09+Nh01XsrK+JPRy3+OvNGixGKc+eIm0AYm6BK4So7R7H23uCpMvP2nDn/8YvigUXVOtWzqynxx4/oh9cugcx45/y56nX8dzlpgeG+bOvc/w/uffcHLoN/YfeiOxs2h9pinUX/ZDezZnvn7sjqKcmJyQlp2WgBwdn5KP9GZkf09ajo5PSEDW22k5NT0l+29ulN0b9ROXW1nL6O7O2sIS1YVJHnr0CebmZsCrUnMcktYG4qpgz4P9NBaaWP59ktCpkLeMXubDNUMxbyjoX3Xmzdub267l4GtfYBg6R597mJlzg6iKJNfSxQPPvkkQhhzev5vxkbOcmQ8Gfpr2d10EVBT03o7GY9uK6bszqWQsdKtIvQ5PqNQWp9A0g8B38Wo16rIFlKCK7yyhJVOISPMGx8+fGJp175MQKgDXFxs+vq1UuDeuRkRRgPBcpGlx14HDNBfbcJYqoIK1IcfImZ/59IV9aDIgnc5CJFisVPl+pPzh8EJwvwaoNxatI7Yp477rIHyfKBK41UXKv56mpb2Drq3XkbFTjPw4wJevPkXoVEhnckgR4bnLqKpKGIato2X/kALo2wvmqe6W9Pa4oSIlBCIiCCM818F3l6lLplCRhE4VK2WRsGxkJAmkIBBQXQk5PfbH26OVaK8CKIbGli0N+jtX2fqOmivGyo4YdAI5FkUEdoySHVfbUwm1KWEaSRSQ8m/VPDG74Ihf5qrio/KKPApEF1JWgdhqjcSq5IU6rUq9pBVy9V6wKgnwFz/MbkP/6LPOAAAAAElFTkSuQmCC" ],
									[
											"e00e",
											"1f44d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADcklEQVQ4ja2US2hcVRjHf+fcO/fOJDOTd5tJm5qmJCS2oVWjaUFRUKEgpUrBGt24avGxEF25caVrcaGCO98IghHRZetCDSmKadAmNpPQB00yk2Qedx537uPc46KZ0IUmYP3grP7f+Z3vnP/3Hfifw9gtwTJl6vlHj3x25omH3pCh3309X57WoP/ziQe6ko9c/OhNvfLnlP7li7f1xFDmpZ3y5W7AZMLan25LI2xJ39AgR4f2P3VXQKF1HAFEETErRiJmpu8KqBB1KQwMwySq1ikWS+5O+3YFDvfvPdGabEXkC9z87VeyN3NX2cGUHYGZjtb7Xpk8+XK6LYUUglK5zK1ifWYnoPlvghDIc6cffn9k/FjMsGIYSFSgIsePFmKmkTANGVMqCv1Q1f8RaEhhpVvsjOsFTiNQxVPHR985O/n0iURHGmoNqhs5TL8q3zr/zIdjDxwZtYS0A7ehFxeyKx9PXXh3Opt7D0AAdLTah14/+/i3D44fHdzM5eqLy9ezzz53eqKjP4PhhxiBz7WZnykXNrh/8kUCU2IYEtOLaJTKTH36eXDugx+s7QqPD+87f2by1OGue/oQ1UbiyYbXFaUSyCAEt4GTW+XKpRmMdDfZ76do1Fy0EEQ6wq05LF5Z2NxihSbAwb6esdZUksjzkCaQshFo8BU6DMlfy9I7MMhjr75GoZintlkAFaLrHlHDpxJL9/Ljsmy6LNqSLZ2GIW/fX98xqToiDDxi8QSogNW5y4TlCnHTIhGLE7cToBUbuQ2v+XwmIC1T2gKBNCSECl11EbaN9gOU72FaMQprOdauLmDZNk6hgO/7BIFPpVznp9m/5pqtZALU3YZHqJBKENYbuBt5kj09RFqjlEIrhUbT3ttH78gISoWIMEKHPmtLS3x3ad4HoiZQr+Q380G1RjJuo7WgeGMZQ2paujOYlkW8rZ3uvgwXv/yEwZF7UZGi6lTxgoD1UoXppfWvAQW3/0Mdet6e4XbzpAhDSrduMD87x/wf89SdEo1KBa9SQUcBtbLDvtExDhwbp2PgEN39/TiOy4XLy1+V3GB2uw8FdA10Jl7Yk4ofjkmRLtU9Z8XxZpK2mezvSEzsTdkHU7bZqZQy1qt+seTrBSllxQ/CYLXs/r7ieN8AzjZwK9qAli3nFRBs6TZg3TFVTU1trTpQaUL+BudNlo0KuECvAAAAAElFTkSuQmCC" ],
									[
											"e421",
											"1f44e",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADj0lEQVQ4ja2SS2hcVRzGf+feO5mZzDPN5N20MU0fsZVqURAKUiPooovQtSi4cFGhiLhwV9y40YUuXWjFB7hTqFB0YaG12miJxpCYGJNJ85oh6eTO+77vOS6akVBICuq3OKvz/c73/58P/mcJACHQTg52jR/q63osaoiOUsk085vV6+l0MjU61PvccH/uZGcm1UPgG6tra1srpjMp4smq73ve0kpxcqlo3gDUP8DTh3Mvvn/5tS8Gjg0T0TX8RoPq5j2i2Szt2TRRXSciFYXZ32lLZcgcO45tWWC7LEzP8MZ7n40vbtWvAhgAZ44OXhh+dIRIph0tlCTibXT25JBRDXyFcAOsjQ1q63c5MDhEWFhD932ka6PXTAxBrjWyAdDTmRkwIgZ6GCJDidIgFBI8EE2XsNmkOD/NyNkxMqdO4DgOuhBEEKSHjvPsnfmX57/97UoLqEUNIy4ADYHSBEIBQkN4Acq1ceoVzGIRxSTN0iaB7yL9gND3KG+XcWq12M76lAEIx3M96YcQMdADCbYDySTK9vBth9LKMrFkkqGzz6Cl2pGBRAiJ8AK6Gzbn6t7jn/y0pAOBAWBWalXpeOiaRmBbeLZFTDcIA5/AtaltbaI0nXR3N7V6BafRQFMKEYZI2yWuiyigsXPIxdXNBXN9DYTCKpeobKyi5P0ZpFIkMlnWF/7g5kcfYuXzBFsl/HKFoNHAbdZZzK9sthqjA5SbTjncLp6rrN5NTtyebFyfmF462N3Rne3pQQCaAL9aoz13gKPPn6ft8CDJ/l6SnX1EEynWlvKxqz//+Q4Qip3fjmuCgUSbPuwGqu6FsjZ2ovfNd9969ZWDI4/gVspU11eY+3WSv6zIzOjokZE2oUccq6nmFvOlr36Y/XiqUHsbCFrAVtq2ncbrAnKXXjj99aWLLz2RSLQT2g2+/+aafP3zW+OWLwuaICqV8v1QVQET2G7tsKUQsAEHaCoofvnj3OXJ2xOBHwYooRGLxbR0VM/4oZx3Aznlh2oGWG7BHgQ+KO9ew7t15drEpxXTRGganbkO+jPxM4C16/Fgt2k/IEB1eat+03Z8Ej0DDD/5NEf6O0f3MzwMqAwNAyEQSGKpNNlsJsVORf4NEAWeUgojGiPwfJqWbf0nYN32zO1CgYZZYfbOL0wtFW4A8mG+PRXRRf/5U33fXRwbnX3qUPYDIeje7/6e0XdJB7qAONDgfkX2TPg3fgCxF9e8gccAAAAASUVORK5CYII=" ],
									[
											"e420",
											"1f44c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADXklEQVQ4jcWSXUxbZRzGn/ec09OeUlpKS1egwEbLKAyWMHVbNPUjcLG4L+LCxtXMMmMM6hIXsxgT74x3OheXOL3gwpjovEGTYRY1zJkM7DbHLMxJhuNwsBQoHf04B85Xz+uFuDCEEY2Jz83/5n1+ed7n/wf+Lz0ZrX6jK9byEccywn8CPHdif+5m32l6YFfjmYe9YzYCsYTw+7eHPrMrWaEUBk691P1ytbdk578GgoDZsbW6w+0SbNLoTdRtqWVPdHf0sgyxrxlgIx6lsH6R0rdDZc6YC4Y7EKpGpKU5cOvGiCGmc5f/MZAQEEUvpn4S04NRv9BZLtiEUFMzrCVl88X4rbMA6IZAn8ve+NT28CvPtT/2ZvezT7wVDfmeXsjKSTGd/63BTWL121qJq8zt7f928GtZM5MrvdxawJ7OWN/hY0eaBCcPlmVhgTQcl5W985NSns5OQ55JwldRid3Ndcf6hn6Nr5uQEDDlTr4x7C+JGZn50h8Hrszdvj5ccFmGJ1AVRDC8xR7YGiGcIIBoOtw8G+kfHPnYtKi6JvCROt+r7546+qW5qJC3P/3utf7hiTMDI+Lnl4YS4wXx7uZITWV5id9LLJ4H63TAZpqOq9dHpVR28dpfjAfOZr6wNBmsCnKHXzwa3rsr+jwAkVLckbLqJ6cv/nwwfnkwzVoAQy1QhkFphQ+ttf6DKxkPAmVtbEaUDMFdgiOH9jxT6rB5AagOG2O1R4M9LW2tPrps4giBoWqYnM1MrtuhUaSqnzP27WxrDVbUVvGNAc+BCifX1tPV/t4Lx7s6KhvCDEMoiAUwuoXElSHzwwvxk5ppSff3sGrBTMDFd5472f3F7j3tLGU5WKYJlmHBEgpYFkApQCnkewt4/2xv4oNvRmMA8msmBEAVvZiakqYCj9Zv2uH1eMCBghRNUNMENQwUDR2GLGNq/A56Lwydn86p/QCs9YAAoE7n1ZH0lLQtUi7UO3gWRV2DsbQILZ+DkslgIZXE8I0Ezl+beF0zLXHdDu/HpFDGZgvfz/6ebPIRNaLls8jNzWEumYQ4fhcD8US694exd2YK+lcA9JXe1R2uFA9gU43HfqimTHjcaefcBdW4l8qpwylZv2QU6QSAzGrTw4DAnxfiAeBc/k0RgApAWZ5/0x++ZmF+HKn+aAAAAABJRU5ErkJggg==" ],
									[
											"e00d",
											"1f44a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADiElEQVQ4jc2TS2hcVRzGf+fcO89kZjJJJpmYNE4iqYloqLGkaLQKTSl0YRdCXHThQnFjBRd2ZTdxoRs3Ioi4clPQblxItSJIFXQh1NZEGqslD2nMazKTed7HueceF5mEClGqKz/4dt/5nf85fH/4v8u6l9BTo/3nZ05OvlnIpZ7ZLlfXQtD5TOKI1sZXOqzfnRUHAfLp+GM9HW0P+n7gTI0Pnz33+svPpXJZtNKUl1YobWw1O/r7kz9fmyteeO+T6c2a99PfAkf7MjPvzr7ycX54UEjHob0ri92eQIQhCIEdsQGBNgbf01x4bfbSxW9vPr933gaQQtgThe4XJ8YKJ87OnD4zcnRcGBNg0UloDCYMd9PGEKoAYwwAiUScp4+Onbj03UJKaVPbBxa62qbfmT33wcgjYwjbgFYIYzBS/uUJQggoVxAdaQxgIRh5YLCrPx2fXi47nwJIgEPdmeMDw4NQLhHuVLGkxLYkVOvQdJFSIgHLsvAqFYznIaUEEZLL93I4n3p271IJ0NuZGo7YEYzWSMtufa5E1er4lQqWlAgBQgBSEjYcLCkhNKQ7sxwp9D4uWiwJkG1P5OzAoBwHAo10A3B8vGqVMAjA0+DuWkgLVauBF4LjE7EjjA71DbfH7MIeUNpCJ3WzRn1znbDpYFwfVEB1a4PQV+B5GNfFuB5aKepbWwjfwzQdZGjIZTOR3nT82P6EpVIlKC7eYnN5EeW5aO0Teg7lzXV0EGCCEKM1RmsCz6P4xypG+ehAo32PiG1TyKWfhNamVJpe0i+uHdvc2EoO9HQRtS3cnRK35+dJZdJEY1GU5xIqj52NNRZvLpDv70MrhV/ZYXVxiY2q41xfKX5kAVTd4Ncff9/5/MZqZUHWS09YjUrszsoSt5bWUG6DpA262cArbzN37QbF4ja5VJx6aZvb83OU6w2u/rL65XKxcfnumsWATNyWD/W2R45HLdldcYP17rbo+GSh89GhTOxQUurEne0qUkh60nFitkVHPk8smwtf/fDKyVJTfX3QLieA5F7pgaiA9PlTD392amp8qLMjRbPpoIVFz8AA8XQnb7z9/tWL3/92BqjaBwCdlvdlSXFfrrc7NzQxCRiijQZBEFD3Fd988ZW6fH3pLaC+2997k31/NvHS1OG+FzRGrW3XV5qeqnmBbqxV3R+KDXUFqP0bIECmZQnolgOg0fJ/1j8O8Sfy9qhjX5JLlwAAAABJRU5ErkJggg==" ],
									[
											"e010",
											"270a",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAD+klEQVQ4ja2Sy2+UVRjGf985323mm2k7Lb3SUtrSIlqDlIQoUSNewAtQMdFgTIgxoixc4IpENy5UYly4MvonQKLABgIujJqKgqFWQASnXNpC2uncpzP9Zr6rCx3TIiQsfJKTvG9yzi/P+z4H/mfJe7348GDHno1D3TsLpXK6UvMy9wSUQtF0KaN+EDrPbuh7b+8rT3/U32I9Glf8wc8OvvvF6Ks7tqwStW2BbTe8tXvrwc6YtunKTHrMC8JqnaHUi+Guxpf2vzH6SSLRGPvq8PFj+995bV/XI5tw5zNcPXUyXLdjuyKbE2TPnGWxuEDP1q2kLlxi99sf7LqcWjhW56j14oWRgQPPv7xzjYhHaPPK+yxdoikhetwibkUU6froUqIKgamrqEqAoUoMVbQvnVLUnZbtqqe4NaQQRAyDcLGKpWgE+QKF+TkKV5O4U7co3ryJHwToZgTfc6nUvOJSYN2hksoVy246TTwWo1LKk5ubBc+lmEmx4PjMXb9GpZinWMizODVFQ3s7hekpbg/o35G9mqN9d/gQzY0N/JlMks0W2Ow4PP76m6yPWQRBgK+E9ElB5veLJH8YYzJ5DVMVrXdKWXlsqGPv0Nr+nkrNY2BwDW3tbUxeSVJNp3AzKYo3buCm0xhmlEhPDytHRujqXc19jfKZU+cmj7p+mF3mUNN0ZcvoKBHLwi4VqRZyWDGLSxMXuDh+DkLQdY3hkY0Mb3sOpylObLCPp1pXNDzx7fj7xydm9iwDVmtOtVqpoMRjhIpERGP0r99AR1cnudQsdmmBUrHI+bNnaFjRSu+TW7BrVdRIhOHezgePT8ws32G+Yhccp0bEUCFqogYBoWVheC00hiBUFalKzIhJpZAjDAKQktCu4lTt+vr8OjCYLSxeL6fTNHV3g6khahoiNNCtOL7nEQYBkXgjzSFYbe24UiIE2Lk812azN/6T8nTB/mluZoaOgQFELE4oBUIRqLqBYcWRuoGqaQSeh7VqFZ4SYCo605OT/DqdOwL4y4DzZff0xMXLuaEH1jVHFYGQGkJKgtBHNU30qIWiqggpkbqBFJIwn+fsj2fKqbLz8+3fhiDEmc+VEuvbzc2J5gRC1VGEgBCEUBCq+ncfBKhCotg1xk+c4NOvx768VaodAbxlQMBPld3z+Uz2oV6LfstQUQgJPJfA8fCcKu5iBcX3sHNZfvnmJJ8f/X7s9HTpQBiSrkMUlksFOjd1xz9+cePqXff3rbQSzQnMaJQwDPFch1w2x/gf1xeOjk8f+m2u8iEwC7h3AwJoQGtEFWt7m8ztPU3mupa40SIURRYrtdJMoTqZzNmHbTe4BGSWwu4GrMv655hLwguAKrAAVO706C8/4rU5daDFfAAAAABJRU5ErkJggg==" ],
									[
											"e011",
											"270c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADO0lEQVQ4ja3US1BbVRzH8W/uvclNQhISKCGpgUADgVAYLM60Fq26YSwLq13Q+lg73ehMt7pw49gNM3bdlRsdN47jjIqvdtGpSrEPUIa0hkcogQRIKJeb970k1xULaRpkxrM8//l/zvx/Z86B/3mJ9YqyJBw5f7L7sxanfHIlk70BGAA+l/XF5gZLv1rS40D1P5/W5radu/3Np8atLz8xWp3yGQCHRQx+Nf6eMXHtA6PNbTu7v0eoBxb1Sq5aLHI0HCISaL4IEPI6L/Sffg7/M61YzaL/UOBOSV9IzC+WrU47A11tJwBLOOB93u5xoaQ2jO1CefVQoF4x0r/fmY1JJoETg+Eekwnn8d7OHrNs5eHc/LZa2o0dCgT0h0vJu/rWNn194eb2RnlkcKA7WN2tcD+6ENMqxub+Bmn/hlUSPc8e841t7WRXR071XRobOzuSnJqkpaeP0aGui5H+iKOsqkTjqXuAdiD4Uq//o4/HP7ysJeI02G2ERkeYunoVSZZ4951zrzba7KwvxEltZR8AlQNBvVL1BLxNaIKO+iiOFouRiC+TiM7RHu6y6dvrRBeTWkot/VoroyfAjJItR3+YoKAozE7/yXkMht98G7NNRhQFlu/cZmN1Vas1LtR4KRGf861OtzxQUFXKmk4+m8XV0ICuKLi9XoIvv0JbuNsiKRujd+eTX1cM1Lpg2Od+4/3LlwaHhk8TCrWzvrjIvd8mmZ+ZYWV6mmCwk4ZQJ5HekGdi4uby43z5j7ojK/nyZrmsYQSOYq8GGH7tdXoTcZT1FInFOGsP5giFQ1T1XWxmsenADNPZ4t9byTVaw8cwWWREhwuHL4Bod9AU6MDZ0UEVeJxYY0stzB8IZnLa/dmZWa27/7hFtFgRRBGLw4XsakQQJWTvEYyyzs0bt9LpvDa5v/+JDLWKsbOS3PQM+R2nmlpaEM0SJpOAaJYQBAkBgalvv+PK57+MZwr6j8BuXRDQ0zntr9jCcqdbVyNGIU8xt4OaSZNaXuL69z9Xrnxx/VosUxiHf98wgKkGuBdFq9sqnfG75Bf8jbaQyYSQUopLK0rpp5xWmQI2qfG5Pg3cqzkBO2DZSwTIA9mnNf0DiSZMcgC8mVEAAAAASUVORK5CYII=" ],
									[
											"e41e",
											"1f44b",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADl0lEQVQ4jdWTbUxbVRzGn3Nvb1va0rWz0iF0jHWUEGSYjG3KJpVuWHXslZkMlGSbGOKcTsc0cbo4s0g0ix80ZnEzMhNF58syO8LodAMKsjVTzCS4gSkSUBi06Upfsffe3uMHKYE1M2Z+8klOcv4nz/md57wB/2eRhwpNh7eWFhxjGaK4Y4hazi5KFns33d/rbjtGK4qXvHVHtGxdmu3Eod3RqrWFHzAEimydssb16RHa/lmjYNKrrHO9DCHcE+XFX+60r3DcFqiWs5ajz26evNp+gj6z+YFzAIyPl1pa+l1N9N0DO4Y4ltEkvRkaRUl78xF67uPD/LyF5hZRPjHS2NS6q6f1YmDPi3WPPrdt7Sfne4fe+eG7zsnyTfal1kLTq0mvRsnlatM1iPn8MQBcCrAwS1e7cZWlMZ6gnoPvf/1kp8Ppr9+3u+KpytJDJ0+1NYuhoHjw5boDWbo0GwAQAo6RKIRIBABICvAevcba8MKu/U1v77uUl23If+P4macvnm4Zr2+os20oX2H/0XnhxrLlBbLX6rd+rpQxmXExESYcC5BZFgCATXaGfSG3b8izxG5dWVK1o9Kugmh0OHscRjnMlbXbzaZcU3qaUklysjLVqujNMsNCbca6h8uKx38biZ92XT0KIDEvqkmvWh/6U4hnauSr92wra7BWVS4KBILhvguuG49Vb8nTGgyEBsMQeB4iz4PqF4AFgevs+WBtY3MGAH5ewr1b1nS/sn/n81OB4M22np+/CXoGVWseXGW+r8JqUMg4QqLTkEQREEXIlAqwC9LB8DyGBzzxM9/3zyacBV4fHh9QxCPLa6o3rtte9cj6QCjijXsn2Jx8i0ZGCMALoJQCEgVRKiDJORBexGDfNf6s+3oqMCYkJq78+kdrV6d7jISncuwbbEWW1SUawhKwzMz9JRKgABiOBeQcpEgMXa7Lvo7+0fdSgDNnEA5MCwOXro04XB2X/QshFC3NN6tkCjkIQ0AkAFIChBKwMhmCYxP46KtvOzze0BcApFuBmBmMUSDsj/L9rt7BHn58dGVRQZ5BpdOCsAyIBBBKIYQjcHd1Sx86e1+aFqXBlGdzixIAooJEfT8NTXR4+vpyl92Vbtao1SCgCPn9uOLqll4/6XxzLBQ/BSCenEhuA5yrNAB3L9Ypqm335tQsNuqNA79Pjnb+MnbcGxVaAHjnmv8NMLkTHQAt/v63PICpmfafxACQ/VOQvwCziGw65GpPPwAAAABJRU5ErkJggg==" ],
									[
											"e012",
											"270b",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAC/UlEQVQ4jb2UXWhcRRiGn/k5O2f3nN1NI3tMiKZN05KtUFqToiDRWvCnLRRq0SiUUv9Aq2BBUQgieGN6Z3qhYkAQLyyIIL1UgsUYSovSC6tSl5AoLVnaWBObJvt7zhlvEijbnJIrv7v55nufeYfhHfi/qyPnPvjW0KPnC765fz3zKmmjv6fw2sHB7SM5o4Jjbx97+uK5n8uD23uON+t1cf1m7bcknbztBCmMliL98EBx6NU3Xnis797gPt9Ps6072Hn8zZeeGih2D93JoW5tDBa73t3R2/VQNm2QElJaulpJgvZc4HkeUojEW63p8J6gfdtzz+zfHbRlswKsUcoIqfCMzkgpqDejJiDWDTTGcRE2NsYxSknhOsooJRBxrBEgElFrA4XjaFcrKX3XZKRW1jg6paVEC6uwFmstgF030Mu4GZNypO+5rtZabPBSeSfl4DvqLhvH1GrN5dXhzYXs4/sGtox05NwHVnutjyJyWd/P5POyZ+vGgsn57H72UJclZu/LR++uK4dGGFYB0d2e2fPp6DvfFXo3i+FXhoNvL17+aW2g7+b93k14lYKWUUgq3wZLFQQCWW+Q0bINcF48tOfD4q5+8fF7Jy5N/jH7UaJDhU0RhxCFSAS2UkVUq4QWokadA7u2PLF1U+f4kdef3/H5yOj06DdnjzQiW0oCUqtUm8JKotWGkoAkjhpIJXny6OENB4LCI79PnmPs9OSJFVg1ETj39/xNHUVEWkEYgZDEwqJ8D5v30MZlvjTF+yNjX5cX66eBpVv1ra8cX5qZna5cKeOqFEgFUYzMpJFtORwrYPYan33yxV8/lK4OAwuthlqB0YWZua8uTEwgFpdxYoXGoqRGLtUIy3OcHx/n1MSvJ2NLGYhbgbflcrkRXZmauVzopNKfJsI2G9T/neefP6f58cxE/MGpM2NT1ysngcVWLaydSQF0BJ5zsNiR3d/X2d4nJapUXij9Mnvjy4Vq+D1wjYS0JCVTAHkgC5iVdW3F1Y0EzbpLcYePuLX+AwZA9JxVqi5RAAAAAElFTkSuQmCC" ],
									[
											"e422",
											"1f450",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADd0lEQVQ4je2TXUxbZRzGn/O+p989bWkpS+vSUjoakK1QcB8wx6ZbW7eEMcQFWbLwoXKhSXVGJXHZsrhp4i68MCYGExMTEiOZihtkcSMGlhiYwja+NlJZwgpFpkDHbHcKp6fn9QYTLqbXmvi7ff75PTf/B/iffx2UEk5r1WsKC/KEg8+UF75xO/b7pY0HakoEBqZwHIiKEkOWMWljfrR62+ecLJkVhWWkrJKiGkosH5x4cdxpMdgbGg7VpRIJ51Tst14A0KqI7d2Xakbm4/djOUat77XG0DfXx6a/lBWWBoAX9vo7Xn25vlWVWTPVhHad/mFosoPk24Xw/ExstKmtcX/05tidtyPH24IB7zkAMOvU3tLtpV6FMQNjzFi2o2yLSafyAkAw4D33VuR4W/Tm+J2mtsb98ZnYaL5dCBFnrqXy4JFw1ZULPZP7DodLpn8anj3T3nrS77a3JB6txVlahLgmJ8U1OcnSIlZEad7vym0+0956cnp4eHZfbbik70LP5KEj4SpnrqWSailcRc5cf6Cq3DXa/+NcYG/lZp7J5HDtgRp5Ie55+tndTw5c+3lEr+FzGo4+F1YWF9xn3z/RrmES5yjwGIb7rsVK9+xyR8emFq4OjnXzOYLe69xkc8zfjS1t3V3hyIii4vZvg7yYIO+ditSvCgZ47KZixqA48p/A2VORekJ58N58xMYnlK1VFY7ZX+4lnJtsDqug99K55dTIavJhabh6exmXlRRXIKDF8gNkxTSg04A3GaFLLG4uyXcUFe4sNyCTARPT4OQsTB43XYndk406g+mTzp6+K6MzbxIAye7Bqde7egcm8nxFOkWRARUFIRQc4UHBwWzUmEw6jUDBgSM8CKGAikJRZOT5inRdvQMT3YNTEQBJCkBhgDh+N37LZaC1/p3leqh5cFkFPCXIPErjo0+/Gpic+XXuwJ4dBWqeAjwPWARQXoVvv/h66cPO75ukLIsCyND1/8xmFLYydCt6O1dOBYuLfXq1ICDzRxJXv7ssfXzp+jvT91eGfQJ5vmCLh6qsOZBSIro+61w+3XHxlaSUHQKQftxyzEY1CdU95ek/3xJcaq4uvmHTq44BsAKw2vSqY83VxTfOtwSX6io8/UY1CQEwbxRwj5Ea1wVaABKABwAe/lUIIAeAGsAqgASA1D+OewP83xRy69l/lD8BRg9Qi0Nvqu4AAAAASUVORK5CYII=" ],
									[
											"e22e",
											"1f446",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACWklEQVQ4jb3TTUhUURTA8f97976ZeeM4k46jyfhRDKRZCdEHERUhgS2EFhZBiwpatXITRRuJVlHLNkEEUSQStDaQAgtc9GWomYrkaKaTjs1kzrfv3Ra2miYbQ7rLe8/53XM598D/XIebaq93nm394ZSirNgcfa3DcyeOXj7e3uapC3hbNgI0fB637ik1MR0iuBGgLoQmhKbjkNK7ESBKaeg6GFIv2RDQsu0VTUhsy87+M9iyp7HzbucF1Rz0nc9k099chuDgjq1HGmv8pz0uIyh1zbUWqOVv3O44qdrOtDP8uIuKnc3JLXt3u2OjEywlM8Sii8TiMXpevO3tfT95LfI91Z+fL/Ir/hpfTrfubzrmkxqbtzcYusdNaamH8go/1VUBgsFq9u1qCMmlhVMvx+Zu/O3J9rux6fuDbwZszXQjnA5spbAdAuVYvVtKQXmgnFBtlbdAQQWbEr/V9ezK3MwXNE1HATnLRqHAdCJ0A2k4EVICyGLA9HA48nByehbLttHEKmopBYYOPjdISTpbuPF/+jZL3X2DT8ZfDaBLF0poWICFAqckvWLzeiQ8AKhiwVTfRLTj5p3unvmRcSQCHQ1baegWRKfDPB+aegCsFAsCzD8diVx8dK/7g5HMYSiQORt9OY3KZqnZ5DoA2OsBc0A0UOWvkGVelOlAK3GgvG78dfWEgpX1hZLWHD0gm4jHfQuTU5DIoVIWuUSKyMwsnxfi84Xyf5uUvCW8TtFyKFR5dVttoN50OczlZCY1FJ4b7f+0eClrqY/rBQE8QBlg/oq3gQSwCGTyg38CvevR0CNj5N4AAAAASUVORK5CYII=" ],
									[
											"e22f",
											"1f447",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACXElEQVQ4ja2TS0hUURjHf+fOjOaoM2U25tiM5hSGr1KwzBYa0aKiRQjtJCFauGzhwmoT1CpaBEURtWxRmygIc2OE4KqIWlSCPZDMxzTSOK87995zThuFGu6IA/3gbD6+/4/vvOA/I4oUjd6mbbe7YuG+YFVF0LSd3Nf5X7PTs0s34hl7qmThgYbg5ZuXLlxr7enGMDxoQ5NNZnj26AkXH0y4ZtbxuhW3B/wt4UiEsio/EgeEQW0wyK5oZD3jFBMabsWFRPJH/Ps3SGYgnUeYFjKZYnk5vgx4NprQVbiYsl7h9UDQj1PmwRaQ8wmOD54KDR/ZM1mysKc5NFzfHEMbGgQoNI6SBCL1jIwM9Z3tapguSdjf3nS6utIPWRuvAK8AoTW2laexYx8n+/YfpsiFugl9NQF/taEVMpNB5yUeBALQUoGGSDRMf8fu65sVGuls3rSsPEo6CDMPWuDzGBiA1pK60A5GBgfGNivU777MzywtLOFYNloLhGVjWBKfYaBsBzuVpL2rkxO9bbcKw25PQM0lMp8W5uZiW7TT+DuZJJvOIVfTlG0NsPJz0Zp989aIHuwVFTJ76PnUh6tukxbiB6JAW2W591hLuGb03NHO8ZnXD/Xk/TGrdWfgyr2xIXlmoPtxkaFcEUA5UAWEGmurz7+fuKtf3hnVwF4gBtQVhly/3hoayK+tdLnPg2MrpFQIiGtYBVRhyPUdumE5KqXRKDRCCNtNVpLQdmRKKY1WGqW1LNa3aaFpy0Qum8M0rQ37NjrDf0ikzY8vno6vfP4+P02R7ZaKB2jA5Wb/5g/LY/RVybFZpQAAAABJRU5ErkJggg==" ],
									[
											"e231",
											"1f449",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACVElEQVQ4je2TTUiUQRzGfzPvfqVgZmxqK26lGRpGeIgOJQhduvZBQqeSoKKDl04VXSPoEnWJ6mhkh4gizEP0bURCkdV6kG1NXVt3y9326333nZkOqUS4FnWsBwbm45nfDM/8B/7rb2X9rrFjQ2NP757OBxrpi8aTD//4xI71oUPne/cmX944a8aG+sylUz1mKb+n3EJXS/DKvu3tB9eua6R2dT1yNsGrocf2heuPTgIS0IvtE4tN7mytu3b8aHd3c8cmpBSgNU7R1hPR8fzo2MeUlJ6KqsqKGksaYbuqNJPKZPsHnl588n7itACo8lutPTs2D1bXrHDSs18T+w/s3lrX1oxxFWiNAKQxuEWHfLZA0S4hLInlC6C0JpctcP/2PU5cviM8AJ0ttecOH+tpWBkOoTKZdW5lAGU7CGOQgBQCy3H5Mj7F1f67z4cjsbeOq92SqwqOqwp5uzQTS6QHge/AllCwuXpVDUoqhN+LUAqBwSNAIkCDUZp0Ls/Ai8itkViiD3DnctRz/RxgPIAn4PdWGARSK3A1xivxCLCEAEdjijbGdcl8niWZzr0GJgFV7pVFrugUhdZY+EA5WMu8aAuM7ULORikHp1BkMj6dz9uliXKweaAZicZHP7yLNNWFGkhNxBA+H8HwGvyWBEug7RKpZJLBoTdDmYIzVg62UDZeS7RuawqeCQWX18emUp8m04Xhrvbwri1t4Y1+r186bolIND7T92z0yHS6cLNcDS4AAT9QAwR+CDsw1yRggDyQALK/vOFP4/mvJecimfe4LJHdP6xvNwgMtBOWTJYAAAAASUVORK5CYII=" ],
									[
											"e230",
											"1f448",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACXklEQVQ4je2TzUtUURjGf+fce2fujNqA82HlVJqGHxBEQjApCC7CKJKCgmqZUNA/UFBRi5a1KoRWLSJCqIUtchFE4MpCI02J1JpIxxp1ZmS+7njvPS0cF0FNUrvogRcOvPA7z/s+58B//a20Ss2ejtZrF47FhlayxWRiOTO+GaCo1Lx39Zzq7Oogn15l/PWb/J3HL8+/nUs8+FOHMj47l91rrnVHAn69vi5kxJojJ7oag9dzuezOT8v5oV867GqL3jjV23kxHNxS7dU1QympHOXYuVx+qXl3NFDfsMPvMb0SIbCtEjMTU9waGHz0bHrx9E+BN/uPqu7eHvzVJrqQSAlSahiawPR50E0PrhAoACFQSvHtQ5yH9wdfhUO10cxKyrw7PNa5ajnTAhBeXWuPhmp6qjx6xGPoVYYmfVIodaC9YV//mb5YuCGK49FxlULBOlgptJyFNE2Wvixw+crt4aeT84d1QFm2MzO7mF4ADECWneuJTOHIyb5DsZDjIl0QYh3mABKB5jdRhsaWYC17oqEmJufRy6Nb5fohlGQmN5pZTqGKFsJ2EF4PwpCw4dJVCOUiBZheww/oskLKbt6yP6fTKaxCAadUgoIFjkJKiY5AlGyEA67tkCuWioDQKwBxXJV9PjI+1tbatD8YrEUAKutStB1SiUUoWdRE6viaSDD5MfEeUBUfNiC3BnzHzx5sGWhp3Bb26AbWmuWOTsXfvZiIP6kP+Dp2bQ/WzScziZHZ5KU1R03/DghQA0QAH+thuUCxXBLQy+cVwNoMENZ/1MZ6FGCXwZQvUZvk/Iv6Dgsc7KcBjcZTAAAAAElFTkSuQmCC" ],
									[
											"e427",
											"1f64c",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEQUlEQVQ4jbVTTWxUVRg9975737x582beG6YDM21toVMFqhRJhaZAQcAQiAQjNS4AExZGXSgaDCbYhJ0SorKxiWFhjAETcaNiiMbEhaBgVX5KHZEfHYEWphTazvT19f3e6wKiNFJ3ntX3Jec7+c73A/zfIFzV70REX7x2p9W1/SvCYwbhMcPq2v6lvnjtToCQqdx/QKckyXR9evOuXl5bWApIKX3X43WF5ZBCQArB6wqd0nc9QEpeW1ia3ryrlybT9XdrKFOSbN1Cpb6wgtfULvAu9X0alv/8VbqTTnhzsA+EMOGMT0z2HX0fVBGJlZvekYxqYfnyz2J89Mp0jjmALI3FZ4NQBQABoN22SO7EICBUoZo+B0D2Ts2/O0xprNA8M/nEspaGl0vXbh6BlJGQ8AGEd/FDAGAUOodgG5Y09zARGW4QVbxQjP4tmFCVhu7nnvzpwabaeWseW7ZkjhXbUKnarDzmnLiXjdbG7Evb1re/vW79ysWzTL2won3Bqz+cOX8oiGSFzs2Z2zZ2zN/X0d5q5bNW0jLiwarVS+fFNTU/3Vzimpp/dHXHPNOIB/mslepob7U2dszfNzdnbqP5bLqta93yNQqFx0AYCAhXCA0jIaYTDCMhuEIoCAiDZIzCe+rxzjX5rNXGKCUxzilROSeKAoWEIYluL+M/EQUBIQBRFKpwzglTKKGUxlhC15KZtJlMmYZsbGpIm7karTpqE88Pq9OJeX5YVRM6SaUNgzPKUqYRC6yUltC1JLMMPTPzofk0EVeRzuUSioygqlXIKJIAUJPUWm03KAOAofHczXH3rIwiWTMrRzI1KWVm3X2JCBEU04RlfJ1hnFJD1XUwCMDxIBwH3JlAV+eCLQtHnJaVnW1bDh48fAAAtm7d+My3x05+1DxDX8SdCYgRgOg6mK5C1XVwSg02btsTCCMITkAJIKWElpmBZ7tfaTlzrLel+839PRfLlQMAMLb/UOWN159/8eHOdpBqFdJ1QQggCIAgwrhtT9DS4HDJHR5BTNWgUAaWSSOezaDcX8SO3T17+66O7nECUXQCUey7Orpnx+6eveX+IuLZDFgmDYUyxFQN7vAISoPDJaXqeHYDDzfNndMYIyKSCCMydO4c3uo5ePbo+euvSWAQgAcgAOCMTvq/29cHVi2qr5mV0A3IIJB+xSaff/zZ+CffFbsVP5K3hoZu5JrE2CPVKxfJjXO/4PSpfvHeN8UXJkNxClNfT0pg4upwZeABPvl0NPgHGbr0G7l0ug/vfnHigytj7ocMgB1SNpBra4fJBBRNw7WzFz0/+vECAP8eV+P7kbxgzG728q33xyPXhRZShIdPDgCwGQCpqTymz25Eui4Lyjj45RsUBN60V03gcdOkVlsbRBggGByGpvIYAMkAwA8i7/vjp6vWDBMgFP3Fki3kFKtTICTCU8XSrcA4bkAKjI1U4AeRBwB/AcAstxlNh1uTAAAAAElFTkSuQmCC" ],
									[
											"e41d",
											"1f64f",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEo0lEQVQ4jX2UXWyTVRjH/+e8X3u7rlv3tltb1o11W7Z12QcTmcAwwPhSQgIiqAneoImJJAajCWjUaCSCMTHxwgu9UCNR440JMRqjhIgQ2DBgwIGwho194WBdu3bd2/Z9z4cXCHGB+dyd5+T5Pfmf538eBf8TlIISAiIlJCEgmko0AJAScrEastiFaRCzJqzVdi1teJO5tKiqRDUM4Tl5KfHK+JQ7tlidel9CISrjkrkMbmu90bmlt+eJhmC5CQIMT2cLfwwPHwbcMa+HegEgZ4vcAlX/PZSV0rJ4o94WrlIjjEvmOEQNR8IqyWdA7AxCkZCSTouCWULMVd1mbyyqNega0RcFqgpRayNa3c5NZbuqLLV6dEzawboGTTdM6IaJYF2Dpkg9/OQW31PxRqMtmxNZx5XOosB0lqcHLub7FYUoh/YHD6tUK9dKDNxKzWSTs6l5zTDQ0+Ht27CqdNP3J3LHbky6I5SCGjox7jIU4M40Q0E1bFUoVjLNp89cyJ+urFCs9cutvW3dm+vG//x9tugUitGO5d78zCn13U8mn09neGpFp/lIvMFoYxxsdo7PSgmp3pUaCaqRni5zZV1EWzoy4Q6fOpfvb62KhaxgFYKmNwhCYFVVwc4u9W1Ymdy2sdezNpni02cu2KcZk2zBlBmXbGTCHS44slBfo8UaavXG7Y9Wv7Vmzfoms9SERiUFANNjom99X9vwN391Hvp4+u3JW2xiPi/m77ONEBCpDE+lMjx1OVEc9PsU/9PrajYHwiFQTYHrMhACUE1BIBzCEqt6RXfb3EOVFa518zabnEnzpF0Q9j3JlIKGAmq4s6Wka+Uyc3VzTG/5+3p1u6eiDOAcUgpAAuAcnooy6IrfEw1rtQ93mD1DI861gYv5s5cTxUGXSfeesX1e6vN6qHdwqHjp6LHMFy9uLfvZ4y+H5BySC4ASSM7h8ZcjFPAHX/hg5ojPS33VATVk54XNheQLJE9MsfGxm7lRuyDsSG3TgZbm5lrD1AAuwQUHEXca66aG2miTtX1rx3cnT11+LnHDGXqgD3O2yNkFYdc2tb+3/PHXj9THogT/7gDGOVzOQQBQSVAfixIRfXlHS0fnRxVlSsUDgVTRAzWtfV+3P/bOa6VWHKauABKgBOBcQEoBIgEJDlNXUGrFUdn9xrPldWs/pYoeWAA0fDW7Y6v3DcQ3HnimpDyGHDeQmnVgqASEEGQLLp+zXUEoYKgU6VkHOWHAKG9E87qDu2Kr9w0YvprdAKB6o71HQ91791ihZjCtBEVOYEsD/QmBrrVzyGRdfHVu7CfHlc6WzNQOq1LF2YTAvNDhYS6Y7ofVujMGf/u3Uxc+26ZUxne9XxJeYQml9N4LUHBcnSYI3DiBYz/048vj5/ePzeTOe2x3jz2axOejywDdB8flsIvAvKtAKqWQzDZVKZiU7jxcQpBlOlhRwlCLYAUXLx2vRPLqb1ecYv4XAPjwx8SVQGtbvHIJg0qSKLIS2AwQ3IFwc5CCSbWQvDoouFOkig5QBbMAqHRB3CwK2XE5d3voIHDnr85NX3tVNX89UkhdJ1LzQRANQgKQDIK7cNLDiX8AXt8QMUwe4RkAAAAASUVORK5CYII=" ],
									[
											"e00f",
											"261d",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACdUlEQVQ4jc2Ty0tUURzHv+ec+56Zm5cZTVNzuk6gqYjWwjZKtWiwpKBNiyI3BbUNWkTb/gOhoF3QJghcFKUmPgqiyUdEGqkzEuPojDrjc95z57YwCewOjrjptzs/ft/P+T2B/93YQYIVnh19eL1jQEKuyb+8+e7Qv9e6bFcDw8/MnnuXFyiBaBVDDwLkGVUpAbL5fBYAd2ggAahpmsiDmDvPQwA5RiVJ4HgQgDHGCmkt0xY4ahcYlaudjta2Zs/F1chK9OaNK93ppZAgCwJEjuMIIQymWRzw8Z2uwYZTHp0m40pTV6cS/jCKGq8X0bEvYIYBQeAZKZChlZM01On1Z73nXWV2URESCcT8c9icGMfy9BS2wxFoql1mBFKxJXMz4+MpDSmHr68fHTBxvK0NnN0Ou67j148pKHlqk3lWnjZyob1iq8XmLrW4H4jElHlGEQ4uwHGkBNl4Au6WFjhPt0IwsnTo40RwaSM5WgyQ3b524X7nrW65oqoSa6EgRl+/waehEcTn/ahtPQOtsRHb84Gywcm5J8WUjOhqLJkiBpiqoan9HDTVgeDsLDLJOLZWlsFKXeBhiNiZQX4/oPn9Z2AhvbJaSSQZglqC8oZmOGtOgJNtUN1uZMIRDH6eHoHFcltN2RiYDPT6x3xg6Qw4UYTiKoWm18Gpn4RDlPC1/z18/shLAEYxPTSjiYx/LRRq9mi8rkgSiJlHLpVAaj0G39s+PHra2xOIJZ8DSO8VW94jAI4SVNeX2e6211V4PcdcVdlszvg2H5kdnom8WNzKvAIQthIWAgI7/dUAqAD4P74UgA0A6wD+vbt9gLtG8bc1uUKgXfsNtRnSTyCEbv0AAAAASUVORK5CYII=" ],
									[
											"e41f",
											"1f44f",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAEzElEQVQ4jZ3Sf0zUZRwH8PfzfL933/sJnCJy/BBELA4JUZSGIErkJbLSSEOTam3mH/6o/nCZzVazzT9cm1ttrmJr/VNuzWXRbLksRQVR9EAROPO84+COH8cdcNxP7p7v9+kPwrmytfXenr+ez17Ps/c+AABCQCuXqBpNWpJJAJKbSot1KpKC/5sys7iptTmVWwvVbwLAl1uNjtdWSccfNysQiGYjLVyoo9kAsNQkrFQJkB7eF5iEMl+Ejw1NK+5Ss7Cxc4j9JFBiaLUnTgGEKRzsUXCBjppPNhhsnqA8MDit9J7cYrxlyRCqO9zJMxxQxO0l0vtqFQyfXI7t6xxmP6zIMryYkplfqnH/kfFGQ8U3KkliLWfbdkcTzA8Agagy2tIVOzIWVkYti4TaSIKHzvbPfi7PP2yUSI5Rok8c2lnXfbBpU6u1JPtE19nPeMt7zYOHX1p3aeDKaX78wMtdOrW4aP6XIiVpAKS8NGGtSkA2AINAoQIAISFjJiHzeN5CQ/XhI+80ZvBQCeIRWF9tTk+Egvqhvv7Jhl3bLSVmYxMLTS8Znwrbjx3YdRPJ2TSba+JbyyKh/MNnDN/f98vXAzHuFQCgqij7baNBp59y9NM6a21+wDNE5XAYq+s364M+H/e5HoSrGraYK4qWVorTI6uaXm8qramtWt92oe36yHS8byysDHlDij2a5NMCAGxcWfDB4aOHmuw9d8YltUpTvWOn1tltgzwTJJaaDRr/6FhszOkKLq9YYzDrxfzIqFdZVl5OyizLXmjv6L7Z44m0RpPcDwACADzw+nsLUujGxu3bnrp76bys12lJybNWwdPXCzYzg4KnK3SxUIiJlNCc0pUii4QJZYznlFikNUX5O37+tf27aIL5HoI7N5R+EYsn/QFHv7rGWr94cGCAa1UiKaisIuOO+6Czs8gsXqEVNZIIcKRkZUPU6QghBJLeSDrbro64J4JXAIACwOjElGf37h3bvKHZ0d9+b/Ou3dwgDtvvkSmXE8vWVUOdkgIoDAIlIJxDYQygAsA59HodKlcXb3642ADg9AVvTHpcyw/u32PtvmUbmh5xq6qf36oduTcAndEIbUYGIMsgwD+PKADxeNqPF659xRQeEf6CE3ZPoD3s85bs27+3crC/L8Imfdri9bWEyTJEtQSAPxaklCI+MyOcbr3YMsvkqXlQARDrc/uuipGpdc179xR6+20kOhVArqUUcpIBsgzIfG4SAAgBIQAhBCIoofFI0S2769w8CAAy54jedni6MjVKfd22xlR752XIkRDSzblzvckMUGRAVgAOgFCAAGqNRJ4sWl447nKYHwUBgDGFBzt7Hd2LNaSu5rl6Y3/HRSQiIaRn54KDgCsc4AqIwgHOARAQlQAWT6Djaufw30EASM4yZaK95941Gg2Wb7BaFw/29mDC7YTJlAZRpZ7rSGYgfK5HllTQc+Nm9MTXrQceBwJAIiEr/s4B9/k7t++Kqaa09EGnU+i12SgNB4TkTACSTg+VVg8mK3Ddd+Ctjz59d3AidI78CzgfNYAFBEhVi9RkkMT8VyryPrZkmQotq8qwICsP3hGffPTU6WM2p+8UAP9/gfMRAagA6NQizV2SpmmQOcQVOQvLbw8HzgxPRn8B4AOAPwEf+iIQTcI5GwAAAABJRU5ErkJggg==" ],
									[
											"e14c",
											"1f4aa",
											"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAADWklEQVQ4ja2SXWhcRRiGnzkze3b37CabuEkajNFum6QWaWmjpVGsoqbYVkuNINV6IViLaMELe9e7FgQRxYJWVFBBL71SUe8K2hDRVmmj/SFqQVMMyW62u92cs3t+5owXDTEhP82FLwzMfN/Mw/e+DPzPkss12rLJ3v2D/W/uvn/LC/mM2hD6ga7Vg2JsiFYCiqWKji3zbx15+sze5/YXit+fIkQwcc3TB499vKnkhZdWAlpLFXs6mnfu2DNYyDQ5TP00THNK0ZZLS0vQvBJsWaCU0lFKopRNz85dmHSWb0+dHfO1CW8GVEsVU8lELpXJ4F0dZ+TH0dJHX458MXxl+u0oNr/fDLikjh/cNXJt4jvzw8nDOp9WzwO3AsnVvF00YXerM7D7iUe3J0KfSxf+qFUaehj4Z7XDLMrwkbt7X+ra0GfpSpmJyVIlxhRXC1sEzNiybWjfQ3udlhx+pUy1Vm8YQ33+HSWtZEJZ6eWACyxv6s4/dWf/1lZLR4SVMkEYakDf6N3y+L7B7a/09hUKKpGQ5VK5em708s/fjFx4b6Li/bIksH/jHXtya9oROiT0Zmj4gQbEwPr2QydPHP2wq68HJSXCGOJQM+S6W549/+uBQ0ffffHPqeufLbAswF6/rntjtikL2hAFAeWZRnFNNjn4zvGXP1jX24MThdh1D1X3sH2XbALuuXdb+utPjn16W6sztAAoLZG7vTOfV5ZAGIFlKRyJPHLg4dd7Nm8WsuER+3W076HdGpFXQ3szaLdG59oCrx1+8v0Fli1BuslJpnAbGL9BuqOTZx67b9tdDz7gRNUSYeBj4gijIzCAMFjKxtgxKmHT2dXhAHIeUDgJYSzt1tCeSyKTYeuOASd0qzSqJYyOwZgb8SiJTNhgG4QQNKZdJi9eFAuAKWV1NdtWIqxOEnoeceATuDUiz8PEejZoAQgsyyLS14kCn2qlyujlv8M3vjp3AojngLYU7eO/jQpTvEoYaYQBSwpsKRDCwqCJA02jEVBz6xTLM5z9a3r89JXp4bHp+uduGJ8GIvGfZTrW5pKvtqRUwYviihTYzUnV1pJWbbmkyklLKC/QbtELJydq/tiUF51xA30+NpSBKlCb/S1zEkArkJ53lvMWQAxEgA/Ugcbsfk7/AqxFaQLvkEYxAAAAAElFTkSuQmCC" ] ] ];
						}
					});

			return new emoji();
		});
},
'sys/mobile/js/mui/form/editor/EditorUtil':function(){
define([ "dojo/_base/declare", "dojo/_base/lang", "mui/form/editor/EditorPopupMixin" ], function(
		declare, lang, EditorPopupMixin) {

	return new declare("mui.form.EditorUtil", EditorPopupMixin, {

		// 弹出框
		popup: function(url, options, callback) {
			var config = {_url : url,afterHideMask : callback};
			config = lang.mixin(config,options ? options : {});
			var editor = new EditorPopupMixin(config);
			editor.onEditorClick.call(editor);
		},

		// 自适应
		resize: function() {

		}
	})();
});
},
'sys/mobile/js/mui/calendar/CalendarListScrollableView':function(){
define([ "dojo/_base/declare", "dojox/mobile/ScrollableView", "dojo/topic" ],
		function(declare, ScrollableView, topic) {
			var claz = declare("mui.calendar.CalendarListScrollableView",
					[ ScrollableView ], {
						scrollBar : false,
						weight : 0,
						type : '/mui/calendar/listScrollableTop',

						buildRendering : function() {
							this.inherited(arguments);
							this.subscribe('/mui/calendar/bottomStatus',
									'statusChange');
						},

						disableTouchScroll : true,

						adjustDestination : function(to) {
							if (to.y >= 0)
								this.defer(function() {
									topic.publish(this.type, this, to);
								}, 1000);
							else
								topic.publish(this.type, this, to);
							return true;
						},
						statusChange : function(obj, evt) {
							this.disableTouchScroll = evt.status;
						}
					});
			return claz;
		});
},
'sys/mobile/js/mui/list/MixContentItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/MixContentItemMixin"
	], function(declare, _TemplateItemListMixin, MixContentItemMixin) {
	//图文混编
	return declare("mui.list.MixContentItemListMixin", [_TemplateItemListMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: MixContentItemMixin
	});
});
},
'sys/mobile/js/mui/address/AddressItemMixin':function(){
define(	["dojo/_base/declare" , "dojo/dom-class", "mui/iconUtils" , "mui/category/CategoryItemMixin" , "mui/util"],
		function(declare, domClass, iconUtils, CategoryItemMixin, util) {
			var item = declare("mui.address.AddressItemMixin", [CategoryItemMixin ], {

				buildRendering:function(){
					this.inherited(arguments);
				},
				
				//获取分组标题信息
				getTitle:function(){
					if( this.label=='2' ){
						return "组织";
					}
					if(this.label=='4'){
						return "岗位";
					}
					return this.label;
				},
				
				//是否显示往下一级
				showMore : function(){
					if((this.type | window.ORG_TYPE_ORGORDEPT) ==  window.ORG_TYPE_ORGORDEPT){
						return true;
					}
					return false;
				},
				
				//是否显示选择框
				showSelect:function(){
					var pWeiget = this.getParent();
					if(pWeiget && ((pWeiget.selType & this.type) ==  this.type)){
						return true;
					}
					return false;
				},
				
				//是否选中
				isSelected:function(){
					var pWeiget = this.getParent();
					if(pWeiget && pWeiget.curIds && (pWeiget.curIds.indexOf(this.fdId)>-1)){
						return true;
					}
					return false;
				},
				
				buildIcon:function(iconNode){
					
					if(this.icon){
						iconUtils.setIcon(util.formatUrl(this.icon), null,
								this._headerIcon, null, iconNode);
					}else{
						if((this.type | window.ORG_TYPE_ORGORDEPT) ==  window.ORG_TYPE_ORGORDEPT){
							this.icon = "mui mui-group muiAddressDept"; 
						}
						if((this.type | window.ORG_TYPE_POST) ==  window.ORG_TYPE_POST){
							this.icon = "mui mui-post muiAddressPost"; 
						}
						iconUtils.setIcon(this.icon, null,
								this._headerIcon, null, iconNode);
					}
				}
			});
			return item;
		});
},
'sys/mobile/js/mui/panel/AccordionPanel':function(){
define(
		"mui/panel/AccordionPanel",
		[ "dojo/dom-construct", 'dojo/_base/declare', "dojo/dom-class",
				"dojo/dom-style", "dojo/topic", "dojo/_base/lang",
				"dijit/_WidgetBase", "dijit/_Contained", "dijit/_Container",
				"mui/panel/_TogglePanelMixin", "mui/panel/_FixedPanelMixin",
				"mui/panel/_SlidePanelMixin", "mui/panel/Content" ],
		function(domConstruct, declare, domClass, domStyle, topic, lang,
				WidgetBase, Contained, Container, _TogglePanelMixin,
				_FixedPanelMixin, _SlidePanelMixin, Content) {
			return declare(
					'mui.panel.AccordionPanel',
					[ WidgetBase, Contained, Container, _FixedPanelMixin,
							_SlidePanelMixin ],
					{

						baseClass : 'muiAccordionPanel',

						startup : function() {
							if (this._started)
								return;
							this.buildContent();
							this.inherited(arguments);
						},

						// 所有标题位置
						titleList : [],

						contentList : [],

						containDom : function(dom) {
							var children = this.getChildren();
							for (var i = 0; i < children.length; i++) {
								if (children[i].domNode == dom)
									return children[i];
							}
							return null;
						},

						// 构建内容
						buildContent : function() {
							var childrenNodes = [];
							for (var j = 0; j < this.domNode.childNodes.length; j++) {
								childrenNodes.push(this.domNode.childNodes[j]);
							}

							for (var i = 0; i < childrenNodes.length; i++) {
								var c = this.containDom(childrenNodes[i]);
								if (c) {
									if (c instanceof Content) {
										var container = domConstruct
												.create(
														'div',
														{
															className : 'muiAccordionPanelContainer'
														}, this.domNode);
										var title = domConstruct
												.create(
														'div',
														{
															className : 'muiAccordionPanelTitle'
														}, container);

										this.titleList.push(title);

										var __content = c;
										if (__content.initContent)
											__content.initContent();
										this.contentList.push({
											show : __content.expand,
											claz : __content
										});
										// 非延迟则显示内容
										var icon = __content.icon ? '<span class="mui '
												+ __content.icon + '"></span>'
												: '', titleMsg = __content.title;
										if (titleMsg)
											title.innerHTML = icon + '<div>'
													+ titleMsg + '</div>';
										domConstruct.place(__content.domNode,
												container);
									}
								} else
									domConstruct.place(childrenNodes[i],
											this.domNode);

							}
						}

					});
		});
},
'sys/mobile/js/mui/form/Template':function(){
define(["dojo/_base/declare", "dijit/_WidgetBase","dijit/_Contained", "dijit/_Container"], 
		function(declare, WidgetBase, Contained, Container) {
		//	标示不参与页面解析的dojo组件部分
		var templ = declare("mui.form.Template", [WidgetBase, Contained, Container], {
			stopParser:true
		});
		return templ;
});
},
'sys/mobile/js/mui/property/filter/FilterDatetime':function(){
define([ "dojo/_base/declare", "mui/property/filter/FilterBase",
		"dojo/dom-construct", "dojo/_base/array", "dojo/topic",
		"dojo/text!./datetime/tmpl.jsp", "dojo/html", "dojo/_base/lang" ],
		function(declare, FilterBase, domConstruct, array, topic, tmpl, html,
				lang) {
			var claz = declare("mui.property.FilterDatetime", [ FilterBase ], {

				types : [ 'Date', 'Time', 'DateTime' ],

				buildRendering : function() {
					this.inherited(arguments);
					var _types = array.filter(this.types, function(item) {
						return item.toLowerCase() == this.type;
					}, this);
					if (_types.length == 0)
						return;
					var self = this;
					var dhs = new html._ContentSetter({
						parseContent : true,
						cleanContent : true,
						node : this.contentNode,
						onBegin : function() {
							this.content = lang.replace(this.content, {
								type : _types[0],
								name : self.name
							});
							this.inherited("onBegin", arguments);
						}
					});
					dhs.set(tmpl);
					dhs.parseDeferred.then(lang.hitch(this, function(
							parseResults) {
						// 开始时间和结束时间
						self.startWidget = parseResults[0];
						self.endWidget = parseResults[1];
					}));
					dhs.tearDown();
				},

				startup : function() {
					this.inherited(arguments);
					this.subscribe('/mui/form/datetime/change', 'addValue');
				},

				addValue : function(obj) {
					if (obj == this.startWidget)
						this.values[0] = obj.value;
					if (obj == this.endWidget)
						this.values[1] = obj.value;
					this.setValue();
				}

			});
			return claz;
		});
},
'sys/mobile/js/mui/calendar/_HeaderExternalViewMixin':function(){
define([ "dojo/_base/declare", "dojo/date", "dojo/topic", "dojo/dom-style",
		"dojox/mobile/TransitionEvent", "mui/util" ], function(declare,
		dateClaz, topic, domStyle, TransitionEvent, util) {
	var claz = declare("mui.calendar._HeaderExternalViewMixin", null, {

		startup : function() {
			this.inherited(arguments);
			this.connect(this.rightNode, 'click', 'onRightClick');
			this.connect(this.leftNode, 'click', 'onLeftClick');
		},

		onTransition : function(opts) {
			new TransitionEvent(this.domNode, opts).dispatch();
		},

		opts : {
			transition : 'scaleOut'
		},

		onLeftClick : function(evt) {
			if (this.left.href) {
				location.href = util.formatUrl(this.left.href);
				return false;
			} else if (this.left.moveTo) {
				this.opts.moveTo = this.left.moveTo;
				this.onTransition(this.opts);
			}
		},

		onRightClick : function(evt) {
			if (this.right.href) {
				location.href = util.formatUrl(this.right.href);
				return false;
			} else if (this.right.moveTo) {
				this.opts.moveTo = this.right.moveTo;
				this.onTransition(this.opts);
			}
		}
	});
	return claz;
});
},
'sys/mobile/js/mui/list/CardItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/CardItemMixin"
	], function(declare, _TemplateItemListMixin, CardItemMixin) {
	
	return declare("mui.list.CardItemListMixin", [_TemplateItemListMixin], {
		itemTemplateString : null,
		itemRenderer: CardItemMixin
	});
});
},
'sys/mobile/js/mui/list/_ViewPullReloadMixin':function(){
define([
	"dojo/_base/declare", 
	"dojo/_base/lang", 
	'dojo/topic', 
	'dojo/dom-construct',
	'dojo/query',
	"dojox/mobile/viewRegistry",
	"dojo/when",
	"mui/i18n/i18n!sys-mobile", 
	], function(declare, lang, topic, domCtr, query, viewRegistry, when, Msg) {
	
	var resetHtml = '<span><i class="mui mui-down"></i>' + Msg['mui.list.pull.reload'] +'</span>';
	var readyHtml = '<span><i class="mui mui-rotate-180 mui-down mui-top"></i>' + Msg['mui.list.pull.release'] +'</span>';
	var pullHtml = '<span><i class="mui mui-loading mui-spin"></i>' + Msg['mui.list.pull.loading'] +'</span>';
	
	return declare("mui.list._ViewPullReloadMixin", null, {

		pull: false,
		
		_pullItem: null,
		
		_pullDom: null,
		
		_createPullDom: function() {
			if (!this._pullDom) {
				this._pullDom = domCtr.toDom('<div class="listPullItem"></div>');
				domCtr.place(this._pullDom, this.containerNode, 'first');
				this._resetForLoad();
			}
		},
		
		_readyForLoad: function() {
			var pullDom = this._pullDom;
			if (pullDom.innerHTML == readyHtml) {
				return;
			}
			pullDom.innerHTML = readyHtml;
		},
		
		_pullForLoad: function() {
			var pullDom = this._pullDom;
			pullDom.innerHTML = pullHtml;
		},
		
		_resetForLoad: function() {
			var pullDom = this._pullDom;
			pullDom.innerHTML = resetHtml;
		},
		
		_setPullAttr: function(pull) {
			var pullDom = this._pullDom;
			if (pull) {
				this._pullForLoad();
			} else {
				this._resetForLoad();
			}
			this._set("pull", pull);
		},
		
		_buildPullHandle: function() {
			var self = this;
			return {
					work: function() {}, 
					done: function() {
						self.pullDone();
					}, 
					error: function() {
						self.pullDone();
					}
			};
		},
		
		pullDone: function() {
			this.set('pull', false);
			// 必须异步，否则会有问题
			this.defer(function() {
				this.slideTo({y:0}, 0.3, "ease-out");
			}, 0);
		},
		
		onAfterScroll: function(evt) {
			var h = this._pullDom.offsetHeight;
			if(evt.beforeTopHeight > h) {
				this._readyForLoad();
			} else {
				this._resetForLoad();
			}
			return this.inherited(arguments);
		},
		
		adjustDestination: function(to, pos, dim) {
			var h = this._pullDom.offsetHeight;
			if (pos.y > h) {
				this.slideTo({y:h}, 0.3, "ease-out");
				var handle = this._buildPullHandle();
				this.onPull(this, handle);
				return false;
			}
			return this.inherited(arguments);
		},
		
		reload: function() {
			var handle = this._buildPullHandle();
			this.onReload(this, handle);
		},
		
		onReload: function(widget, handle) {
			topic.publish('/mui/list/onReload', this, handle);
		},
		
		onPull: function(widget, handle) {
			this.set("pull", true);
			topic.publish("/mui/list/onPull", this, handle);
		},
		
		startup : function(){
			if(this._started){ return; }
			
			this.inherited(arguments);
			
			this._createPullDom();
			this.set("pull", false);
		}
	});
});
},
'sys/mobile/js/mui/device/kk5/attachment':function(){
/*
 * 附件上传类
 */
define( [ "dojo/_base/declare","dojo/topic", "dojo/request", "mui/device/_attachment","mui/device/kk5api"],
		function(declare, topic , request, attachment) {
			return declare("mui.device.kk5.attachment", [ attachment ], {
				
				_uploadFile : function(file, userKey) {
					var self = this;
					if(this.uploadStream == true){
						d = {'userkey':userKey,'data':file.href,'extParam':this.extParam};
						var promise = request.post(this.uploadurl, {
							data : d,
							handleAs : 'json'
						});
						promise.then(function(data) {
							if (data.status == '1') {
								file.status = 2;
								file.filekey = data.filekey;
								self.uploadSuccess(file,data);
							} else {
								file.status = 0;
								self.uploadError(file , {
										rtn : data
									});
							}
						}, function(data) {
							file.status = 0;
							self.uploadError(file , {
									rtn : data
								});
						},function(response){
							file.status = 1;
							self.uploadProcess(response.loaded , file);
						});
					}else{
						window.kk5Api.uploadFile(file,this.uploadurl,userKey,function(fileInfo){
							file.status = 2;
							file.filekey = fileInfo.filekey;
							self.uploadSuccess(file,fileInfo);
						},null,function(errorInfo){
							file.status = 0;
							self.uploadError(file,errorInfo);
						});
					}
				
				}
			});
		});

},
'sys/mobile/js/mui/form/editor/plugins/image/_EditorUploadMixin':function(){
define(
		[ "dojo/_base/declare", "dojo/topic", "dojo/_base/lang", "mui/util" ],
		function(declare, topic, lang, util) {
			return declare(
					"mui.form.editor._EditorUploadMixin",
					null,
					{

						fdKey : '',

						fdMulti : false,

						// 事件前缀
						eventPrefix : "editorUpload_",

						// 上传附件信息
						uploadurl : util
								.formatUrl(
										"/resource/fckeditor/editor/filemanager/upload/simpleuploader?Type=Image",
										true),

						downloadUrl : util
								.formatUrl('/resource/fckeditor/editor/filemanager/download'),

						constructor : function(options) {
							this.init(options);
						},

						init : function(options) {
							// 设置属性
							this.fdMulti = options.fdMulti;
							this.UPLOAD_EVENT_START = this.eventPrefix
									+ "start";
							this.UPLOAD_EVENT_SUCCESS = this.eventPrefix
									+ "success";
							this.UPLOAD_EVENT_FAIL = this.eventPrefix + "fail";
							this.UPLOAD_EVENT_PROCESS = this.eventPrefix
									+ "process";

							if (options.fdModelName)
								this.uploadurl += "&fdModelName="
										+ options.fdModelName;
							if (options.fdModelId)
								this.uploadurl += "&fdModelId="
										+ options.fdModelId;
						},

						// 生成唯一标示
						guid : (function() {
							var counter = 0;
							return function(prefix) {
								var guid = (+new Date().getTime()).toString(32), i = 0;
								for (; i < 5; i++) {
									guid += Math.floor(Math.random() * 65535)
											.toString(32);
								}
								return (prefix || 'mobile_') + guid
										+ (counter++).toString(32);
							};
						})(),

						FILE_EXT_PIC : "Picture Files|*.gif;*.jpg;*.jpeg;*.bmp;*.png;*.tif|All Files (*.*)|*.*",

						// 开始上传附件
						startUploadFile : function(file) {
							var ext = file.name.substring(file.name
									.lastIndexOf("."));
							if (this.FILE_EXT_PIC.indexOf(ext) < 0
									&& file.type.indexOf('image') < 0)
								return;

							if (file._fdId == null || file._fdId == '') {
								file._fdId = this.guid();
							}
							file.status = 1;
							// 渲染开始展示
							this.uploadStart(file, {});
							// 上传文件
							this._uploadFile(file);
						},

						_uploadFile : function(file, userKey) {
							// 子类各自实现
						},

						uploadStart : function(file, context) {
							topic.publish(this.UPLOAD_EVENT_START, this, lang
									.mixin(context, {
										file : file
									}));
						},

						uploadSuccess : function(file, context) {
							topic.publish(this.UPLOAD_EVENT_SUCCESS, this, lang
									.mixin(context, {
										file : file
									}));
						},

						uploadError : function(file, context) {
							topic.publish(this.UPLOAD_EVENT_FAIL, this, lang
									.mixin(context, {
										file : file
									}));
						},

						uploadProcess : function(loaded, file) {
							topic.publish(this.UPLOAD_EVENT_PROCESS, this, {
								file : file,
								loaded : loaded
							});
						},

						destroy : function() {
							this.inherited(arguments);
						}
					});
		});

},
'sys/mobile/js/mui/calendar/CalendarBottomOpt':function(){
define(['dojo/_base/declare','dijit/_WidgetBase','dijit/_Contained','dojo/dom-construct'],
		function(declare,WidgetBase,Contained,domConstruct){
	
	return declare('mui.calendar.CalendarBottomOpt',[WidgetBase,Contained],{
		
		startup:function(){
			var parent=this.getParent();
			if(parent){
				domConstruct.place(this.srcNodeRef, parent.eventNode,"last");
			}
		}
		
	});
	
});
},
'sys/mobile/js/mui/picslide/ImagePreview':function(){
define( [ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-class","dojo/dom-style",
		"dojo/_base/array", "dojo/_base/lang", "dojo/topic","dojo/window",
		"mui/picslide/PicSlide" ], function(declare, domConstruct, domClass,domStyle,
		array, lang, topic, win,PicSlide) {
	return declare("mui.picslide.ImagePreview", null, {

		picPlayEvtName : "/mui/image/play",

		picClick : "/mui/picitem/click",

		viewChangedEvt : "/mui/picslide/changeview",
		
		constructor : function() {
			this.inherited(arguments);
			topic.subscribe(this.picClick, lang.hitch(this, function(srcObj,argu) {
				this._imagePlayClose(argu);
			}));
		},

		// 当图片数组长度发生变化时重回
		reDraw : function(options) {
			if (options != null) {
				this.imgs = [].concat(options.srcList);
				if (this.imgSlide != null)
					this.imgSlide.destroy();
				this.buildPicSlide(options);
			}
		},
		
		// 构建
		buildPicSlide : function(options) {
			this.imgs = [].concat(options.srcList);
			var items = [];
			array.forEach(this.imgs, function(tmpImg) {
				items.push({
					icon : tmpImg
				});
			});
			var tmpStyle = {
				width : win.getBox().w + 'px',
				height : win.getBox().h + 'px'
			};
			this.imgSlide = new PicSlide(lang.mixin({
				items : items
			}, tmpStyle));
			if (!this.topDiv) {
				this.topDiv = domConstruct.create("div", {
					className : 'muiRtfPicSlider'
				}, document.body);
				domStyle.set(this.topDiv, tmpStyle);
			}
			this.topDiv.appendChild(this.imgSlide.domNode);
			if (this.imgSlide._started != true) {
				this.imgSlide.startup();
			}
		},
 
		// 播放
		play : function(options) {
			if (options == null)
				return;
			if (this.imgs
					&& this.imgs.toString() != options.srcList
							.toString()) {
				this.reDraw(options)
			} else {
				if (this.topDiv == null)
					this.buildPicSlide(options);
			}
			setTimeout(lang.hitch(this, function() {
				domClass.add(this.topDiv, "muiRtfPicShow");
				topic.publish(this.viewChangedEvt, this, {
					'curIndex' : array.indexOf(this.imgs, options.curSrc)
				});
			}), 350);
		},

		_imagePlayClose : function(evts) {
			domClass.remove(this.topDiv, "muiRtfPicShow");
		}
	});

});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryHeader':function(){
define( [ "dojo/_base/declare", "mui/category/CategoryHeader"], function(declare,CategoryHeader) {
		var header = declare("mui.simplecategory.SimpleCategoryHeader", [ CategoryHeader], {
				
				modelName : null ,
				
				title:"分类选择",
				
				//获取详细信息地址
				detailUrl : '/sys/category/mobile/sysSimpleCategory.do?method=detailList&cateId=!{curId}&modelName=!{modelName}'
			});
			return header;
});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryList':function(){
define( [ "dojo/_base/declare","mui/category/CategoryList","dojo/_base/lang"], function(declare,
		CategoryList, lang) {
	return declare("mui.simplecategory.SimpleCategoryList", [ CategoryList ], {
		
		modelName:null,
		
		authCateIds : null,
		
		//数据请求URL
		dataUrl : '/sys/category/mobile/sysSimpleCategory.do?method=cateList&categoryId=!{parentId}&getTemplate=!{selType}&modelName=!{modelName}&authType=!{authType}',
		
		buildQuery:function(){
			var params = this.inherited(arguments);
			return lang.mixin(params , {
				authCateIds : this.authCateIds
			});
		}
			
	});
});
},
'sys/mobile/js/mui/list/item/MixContentItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
	"./_ListLinkItemMixin"
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util , _ListLinkItemMixin) {
	var item = declare("mui.list.item.MixContentItemMixin", [ItemBase , _ListLinkItemMixin], {
		
		tag:"li",
		
		//简要信息
		summary:null,
		
		//创建时间
		created:null,
		
		//创建者
		creator:null,
		
		//状态信息
		status:null,
		
		thumbs:null,
		
		buildRendering:function(){
			this.domNode = this.containerNode = this.srcNodeRef
				       || domConstruct.create(this.tag, {className : 'muiMixContentItem'});
			this.inherited(arguments);
			if (!this.templateString){
				this.contentNode = domConstruct.create(
						'div', {className : 'muiListItem'}, this.domNode);
				this.buildInternalRender();
			}
		},

		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		buildInternalRender : function() {
			if(this.lock){
				var _lock = domConstruct.toDom("<div class='icoLock'><i class='mui mui-todo_lock'></i></div>");
				domConstruct.place(_lock, this.contentNode);
			}
			var top = domConstruct.create("div",{className:"muiMixContentTop"},this.contentNode);
			this.buildTopRender(top);
			var center = domConstruct.create("a",{className:"muiMixContentMiddle"},this.contentNode);
			this.buildCenterRender(center);
			var bottom = domConstruct.create("div",{className:"muiMixContentBottom"},this.contentNode);
			this.buildBottomRender(bottom);
			if(this.href){
				this.makeLinkNode(center);
			}
		},
		
		buildTopRender:function(top){
			if(this.icon){
				var imgDivNode = domConstruct.create("div",{className:"muiMixContentIcon"}, top);
				this.imgNode = domConstruct.create("img", {src:this.icon }, imgDivNode);
			}
			var topCreate = domConstruct.create("div",{className:"muiMixContentCreate"},top);
			if(this.creator){
				this.CreatorNode=domConstruct.create("div",{className:"muiMixContentCreator",
					innerHTML:"<span>" + this.creator + "</span>"},topCreate);
			}
			if(this.created){
				this.CreatedNode=domConstruct.create("div",{className:"muiMixContentCreated muiListSummary",
					innerHTML:'<i class="mui mui-time"></i><span>' + this.created + "</span>"},topCreate);
			}
		},
		
		buildCenterRender:function(center){
			if(this.label){
				var title = this.label;
				if(this.status){
					title = this.status + title;
				}
				domConstruct.create("h4",{className:"muiMixContentTitle", innerHTML:title},center);
			}
			if(this.summary){
				domConstruct.create("p",{className:"muiMixContentSummary muiListSummary",innerHTML:this.summary},center);
			}
			var thum = domConstruct.create("p",{className:"muiMixThumb"},center);
			if(this.thumbs){
				var thumbDom = domConstruct.create("div",{className:"muiListThumb"},thum);
				var tmpThumbs = this.thumbs.split("|");
				for ( var i = 0; i < tmpThumbs.length; i++) {
					domConstruct.create('p', {
						style : 'background-image: url(' + tmpThumbs[i]
								+ ')'
					}, thumbDom);
				}
			}
		},
		
		buildBottomRender:function(bottom){
		},
		
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		},
		
		hrefTarget: '_self',
		
		_selClass: "mblListItemSelected",
		
		_setSelectedAttr: function(selected){
			this.inherited(arguments);
			domClass.toggle(this.domNode, this._selClass, selected);
		}
	});
	return item;
});
},
'sys/mobile/js/mui/list/item/ProcessItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"./_ListLinkItemMixin"
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util, _ListLinkItemMixin) {
	var item = declare("mui.list.item.ProcessItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		
		baseClass:"muiProcessItem",
		
		//流程简要信息
		summary:"",
		
		//创建时间
		created:"",
		
		//创建者
		creator:"",
		
		//创建人图像
		icon:"",
		
		//状态
		status:"",
		
		buildRendering:function(){
			this.inherited(arguments);
			this.contentNode = domConstruct.create(
					this.tag, {
						className : 'muiListItem'
					}, this.containerNode);
			this.buildInternalRender();
		},
		buildInternalRender : function() {
			var rightArea = domConstruct.create("div",{className:"muiProcessRight"},this.contentNode);
			domConstruct.create("img", { className: "muiProcessImg",src:this.icon}, rightArea);
			domConstruct.create("a", { className: "muiProcessCreator muiAuthor",innerHTML:this.creator}, rightArea);
			domConstruct.create("span", { className: "muiProcessCreated muiListSummary", 
				innerHTML:this.created}, rightArea);
			
			var leftArea = domConstruct.create("a",{className:"muiProcessLeft"},this.contentNode);
			var title = domConstruct.create("h3",{className:"muiProcessTitle muiSubject"},leftArea);
			if(this.status){
				title.appendChild(domConstruct.toDom(this.status));
			}
			if(this.label){
				title.appendChild(domConstruct.toDom(this.label));
			}
			if(this.summary){
				var summary = domConstruct.create("p",{className:"muiProcessSummary muiListSummary",innerHTML:this.summary},leftArea);
				domConstruct.create("i",{className:"muiProcessSign mui mui-flowlist"},summary,"first");
			}
			if(this.href){
				this.makeLinkNode(leftArea);
			}
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		}
	});
	return item;
});
},
'sys/mobile/js/mui/form/validate/dom-value':function(){
define([ "dojo/dom"], function(dom) {
	return {
		get: function(element) {
			var method = element.tagName.toLowerCase();
			return this[method](element);
		},
	
		input:function(element){
			switch (element.type.toLowerCase()) {
				case 'submit':
				case 'hidden':
				case 'password':
				case 'text':
					return this.textarea(element);
				case 'checkbox':
				case 'radio':
					return this.groupSelector(element);
			}
			return null;
		},
		
		groupSelector: function(element) {
			// 若没有name属性，则认为只有一个checkbox或radio。
			if (!element.name) return this.inputSelector(element);
			// 由于一组checkbox或radio是由相同的name组成，故...
			var values = [], type = element.type.toLowerCase;
			var cbElements = document.getElementsByName(element.name);
			for (var i = cbElements.length - 1; i >= 0; i--)
				if (cbElements[i].type.toLowerCase == type && cbElements[i].checked)
					values.push(cbElements[i].value);
			return [element.name, values.join(';')];
		},
	
		inputSelector: function(element) {
			if (element.checked)
				return [element.name, element.value];
		},
	
		textarea: function(element) {
			return [element.name, element.value];
		},
	
		select: function(element) {
			return this[element.type == 'select-one' ? 'selectOne' : 'selectMany'](element);
		},
	
		selectOne: function(element) {
			var value = '', opt, index = element.selectedIndex;
			if (index >= 0) {
				opt = element.options[index];
				value = (opt.value == null) ? opt.text : opt.value;
			}
			return [element.name, value];
		},
	
		selectMany: function(element) {
			var value = [];
			for (var i = 0; i < element.length; i++) {
				var opt = element.options[i];
				if (opt.selected)
					value.push((opt.value == null) ? opt.text : opt.value);
			}
			return [element.name, value];
		}
	};
});
},
'sys/mobile/js/mui/header/HeaderItem':function(){
define( [ "dojo/_base/declare", "dojox/mobile/_ItemBase","dojo/dom-style"], 
		function(declare,_ItemBase, domStyle) {

	return declare("mui.header.HeaderItem", [ _ItemBase ], {

		icon : null,

		baseClass : 'muiHeaderItem',
		
		label: null,
		
		referListId:null,
		
		buildRendering : function() {
			if(this.icon){
				this.baseClass = this.baseClass + " " + this.icon;
			}
			this.inherited(arguments);
		},
		
		postCreate : function() {
			this.inherited(arguments);
			this.subscribe("/mui/list/loaded","refreshLabel");
		},
		
		refreshLabel:function(evts){
			if(evts && evts.id==this.referListId && this.label){
				if(evts.totalSize)
					this.domNode.innerHTML = this.label + "("+ evts.totalSize +")";
			}
		},
		
		startup:function(){
			this.inherited(arguments);
			if (this.domNode.parentNode) {
				var h = this.domNode.parentNode.style.height;
				var styleVar =  {
						'height':h,
						'line-height' : h
					};
				domStyle.set(this.domNode, styleVar);
			}
		},
		
		_setLabelAttr:function(label){
			if(this.label){
				this.domNode.innerHTML = this.label;
			}
		}
		
	});
});

},
'sys/mobile/js/mui/form/Label':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"dojo/dom-construct", "dijit/_WidgetBase" ], function(declare, query,
		domClass, domConstruct, _WidgetBase) {
	var claz = declare("mui.form.Label", [ _WidgetBase ], {

		value : null,

		baseClass : 'muiField',

		buildRendering : function() {
			this.inherited(arguments);
			if (this.value)
				this.labelNode = domConstruct.create('div', {
					className : 'muiFieldLabel',
					innerHTML : this.value
				}, this.domNode);
		}
	});

	return claz;
})

},
'sys/mobile/js/mui/datetime/TimePicker':function(){
define([ "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/array", "dojo/date/locale", "dojo/date/stamp",
         "dojox/mobile/SpinWheelTimePicker", "dojox/mobile/SpinWheelSlot"], function(
		declare, lang, array, datelocale, datestamp, SpinWheelTimePicker, SpinWheelSlot) {
	
	var _format = {
		format:function(d){
			return datelocale.format(d, {timePattern:this.disPattern, selector:"time"});
		},
		toTimeStr:function(str){
			var tmpD = datelocale.parse(str, {timePattern:this.disPattern, selector:"time"});
			return datelocale.format(tmpD, {timePattern:this.valPattern, selector:"time"});
		},
		toDisTimeStr:function(str){
			var tmpD = datelocale.parse(str, {timePattern:this.valPattern, selector:"time"});
			return datelocale.format(tmpD, {timePattern:this.disPattern, selector:"time"});
		}
	};
	var hourMixin = lang.mixin({
		//显示时格式
		disPattern:"HH时",
		//对应时间值格式
		valPattern:"HH",
		initLabels: function(){
			if(this.labelFrom !== this.labelTo){
				this.labels = [];
				var d = new Date(2000, 0, 1, this.labelFrom, 0);
				for(var i = this.labelFrom; i <= this.labelTo; i++){
					d.setHours(i);
					this.labels.push(this.format(d));
				}
			}
		}
	}, _format);;

	var minuteMixin = lang.mixin({
		disPattern:"mm分",
		valPattern:"mm",
		initLabels: function(){
			if(this.labelFrom !== this.labelTo){
				this.labels = [];
				var d = new Date(2000, 0, 1, 0, this.labelFrom);
				for(var i = this.labelFrom; i <= this.labelTo; i++){
					d.setMinutes(i);
					this.labels.push(this.format(d));
				}
			}
		}
	}, _format);
	
	var claz = declare("mui.datetime.TimePicker", [ SpinWheelTimePicker ], {
		pattern:"HH:mm",
		
		slotClasses:[
		             declare(SpinWheelSlot, hourMixin),
		        	 declare(SpinWheelSlot, minuteMixin)
		        	 ],
		        	 
		slotProps:[
	 			{labelFrom:0, labelTo:23, style:{width:"50px", textAlign:"right"}},
	 			{labelFrom:0, labelTo:59, zeroPad:2, style:{width:"50px", textAlign:"right"}}
	 			],
		
		_setValueAttr : function(value) {
			if (!value){
				var now = new Date();
				value = datelocale.format(now, {timePattern:this.pattern, selector:"time"});
			}
			var values = value.trim().split(':');
			if (values.length > 1){
				var tmpVals = [];
				var _self = this;
				array.forEach(values,function(val,idx){
					tmpVals.push(_self.slots[idx].toDisTimeStr(val));
				});
				this.values = tmpVals;
			}
		},

		_getValueAttr : function() {
			var values = this.get('values');
			if (values.length > 1){
				var tmpVals = [];
				var _self = this;
				array.forEach(values,function(val,idx){
					tmpVals.push(_self.slots[idx].toTimeStr(val));
				});
				return tmpVals[0] + ':' + tmpVals[1];
			}
		}

	});
	return claz;
});
},
'sys/mobile/js/mui/simplecategory/SimpleCategoryItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/simplecategory/SimpleCategoryItemMixin"
	], function(declare, _TemplateItemMixin, SimpleCategoryItemMixin) {
	
	return declare("mui.simplecategory.SimpleCategoryItemListMixin", [_TemplateItemMixin], {
		
		itemRenderer : SimpleCategoryItemMixin
		
	});
});
},
'sys/mobile/js/mui/form/RadioGroup':function(){
define(
		[ "dojo/_base/declare", "mui/form/_GroupBase", "dojo/dom-construct",
				"dojo/parser", "dojo/_base/array" ],
		function(declare, _GroupBase, domConstruct, parser, array) {
			var _field = declare(
					"mui.form.RadioGroup",
					[ _GroupBase ],
					{

						tmpl : '<input type="radio" data-dojo-type="mui/form/Radio" data-dojo-props="checked:!{checked},showStatus:\'!{showStatus}\',name:\'!{name}\',text:\'!{text}\',value:\'!{value}\'">',

						valueField : null,

						opt : false,

						name : null,

						value : '',

						text : '',
						// 是否只显示有值内容，view状态有效
						concentrate : false,

						_buildValue : function() {
							this.inherited(arguments);
						},

						isConcentrate : function(props) {
							return this.concentrate
									&& this.value_s.indexOf(props.value) < 0
									&& this.showStatus == 'view';
						},

						createListItem : function(props) {
							if (this.isConcentrate(props))
								return null;
							var tmpl = this.tmpl.replace('!{showStatus}',
									this.showStatus).replace('!{name}',
									this.name.replace('.', '_') + '_group')
									.replace('!{value}', props.value).replace(
											'!{text}', props.text).replace(
											'!{checked}',
											props.checked ? true : false);
							return domConstruct.toDom(tmpl);
						},

						addChild : function(item) {
							this.inherited(arguments);
							domConstruct.place(item, this.valueNode, 'last');
						},

						generateList : function(items) {
							this.value_s = this.value.split(';');
							this.inherited(arguments);
							return parser.parse(this.valueNode);
						},

						addValue : function(value) {
							this.set('value', value);
						}
					});
			return _field;
		});
},
'sys/mobile/js/mui/form/CheckBoxGroup':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct", "dojo/parser",
				"mui/form/_GroupBase" ],
		function(declare, domConstruct, parser, _GroupBase) {
			var _field = declare(
					"mui.form.CheckBoxGroup",
					[ _GroupBase ],
					{

						tmpl : '<input type="checkbox" data-dojo-type="mui/form/CheckBox" data-dojo-props="showStatus:\'!{showStatus}\',checked:!{checked},name:\'!{name}\',text:\'!{text}\',value:\'!{value}\'">',

						valueField : null,

						opt : false,

						name : null,

						value : '',

						text : '',

						values : [],
						// 是否只显示有值内容，view状态有效
						concentrate : false,

						_buildValue : function() {
							this.inherited(arguments);
						},

						isConcentrate : function(props) {
							return this.concentrate
									&& this.value_s.indexOf(props.value) < 0
									&& this.showStatus == 'view';
						},

						createListItem : function(props) {
							if (this.isConcentrate(props))
								return null;
							var tmpl = this.tmpl.replace('!{showStatus}',
									this.showStatus).replace('!{name}',
									this.name.replace('.', '_') + '_single')
									.replace('!{value}', props.value).replace(
											'!{text}', props.text).replace(
											'!{checked}',
											props.checked ? true : false);
							return domConstruct.toDom(tmpl);
						},

						addChild : function(item) {
							this.inherited(arguments);
							domConstruct.place(item, this.valueNode, 'last');
						},

						generateList : function(items) {
							if (!this.value)
								this.value_s = [];
							else
								this.value_s = this.value.split(';');
							this.inherited(arguments);
							parser.parse(this.valueNode);
						},

						addValue : function(value) {
							if (this.value_s.indexOf(value) >= 0)
								return;
							this.value_s.push(value);
							this.set('value', this.value_s.join(';'));
						},

						removeValue : function(value) {
							var index = this.value_s.indexOf(value);
							if (index < 0)
								return;
							this.value_s.splice(index, 1);
							this.set('value', this.value_s.join(';'));
						}
					});
			return _field;
		});
},
'sys/mobile/js/mui/form/_InputBase':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "mui/form/_FormBase",
		"dojo/dom-class", "dojo/_base/lang", "mui/util", "dojo/_base/window", "dijit/registry" ], function(declare,
		domConstruct, _FormBase, domClass, lang, util, win, registry) {
	var _field = declare("mui.form._InputBase", [ _FormBase ], {
		
		placeholder:'',

		buildRendering : function() {
			this.inherited(arguments);
			this._buildValue();
		},

		buildOptIcon : function(optContainer) {
			domConstruct.create("i", {
				className : 'mui mui-insert mui-rotate-45'
			}, optContainer);
		},

		_buildValue : function() {
			var setBuildName = 'build' + util.capitalize(this.showStatus);
			this[setBuildName] ? this[setBuildName]() : '';

			var setMethdName = this.showStatus + 'ValueSet';
			this.showStatusSet = this[setMethdName] ? this[setMethdName]
					: new Function();
		},

		_setValueAttr : function(value) {
			this.inherited(arguments);
			this.showStatusSet(value);
		},
		
		_onFocus:function(evt){
			var textNode = evt.target;
			var _self = this;
			var tmpEvt = this.connect(win.body(), "click", function(evts){
				if(evts.target != textNode){
					setTimeout(function(){
						textNode.blur();
						_self.set("value",textNode.value);
						_self.disconnect(tmpEvt);
					},10);
				}
			});
		}
	});
	return _field;
});
},
'sys/mobile/js/mui/list/_ViewScrollEventPublisherMixin':function(){
define( [ "dojo/_base/declare", 'dojo/topic', 'dojo/_base/lang', 'dojox/mobile/common' ], function(
		declare, topic, lang, common) {

	return declare("mui.list._ViewScrollEventPublisherMixin", null, {

		/** **** 对外发布事件 ***** */

		// 列表滚动事件
		adjust : '/mui/list/adjustDestination',
		// 列表最终滚动事件
		runSlide : '/mui/list/_runSlideAnimation',
		// 列表滚动完成事件
		afScroll : '/mui/list/afterScroll',
		// 列表滚动隐藏上下导航栏
		hideTopBottomTopic : '/mui/list/hideTopBottom',

		/** **** 对外发布事件 //***** */

		/** **** 对外监听事件 ***** */

		// 列表置顶
		toTop : '/mui/list/toTop',
		
		scrollResizeEvent : '/mui/list/resize',
				
		/** **** 对外监听事件 //***** */

		startup : function() {
			if (this._started) {
				return;
			}
			this.inherited(arguments);
			this.subscribe(this.toTop, 'handleToTopTopic');
			this.subscribe("/mui/list/onReload",function(){
				topic.publish(this.adjust, this, {y : 0});
			});
			this.subscribe(this.scrollResizeEvent, 'scrollResize');
		},
		
		scrollResize : function(){
			if(this.resize){
				this.resize();
			}
		},
		
		handleToTopTopic: function(srcObj, evt) {
			var postion = {y : 0};
			if(evt != null){
				postion = lang.mixin(postion,evt);
			}
			this._fireHideTopBottomTopic(false);
			if(postion.y && postion.y!=0){
				var scrollH = this.domNode.offsetHeight;
				var listH = this.containerNode.offsetHeight;
				var navAreaH = listH + postion.y;
				var yTop = 0;
				if(navAreaH < scrollH){
					if(listH<scrollH){
						yTop = 0;
					}else{
						yTop = 0 - (listH - scrollH);
					}
					postion.y = yTop;
				}
			}
			var time = 0.5;
			if(typeof(postion.time) != "undefined" && postion.time >= 0 ) {
				time = postion.time;
			}
			this.slideTo(postion , time, 'linear');
			window.setTimeout(lang.hitch(this, function() {
				topic.publish(this.adjust, this, postion);
			}), 520);
		},

		adjustDestination : function(to, pos, dim) {
			topic.publish(this.adjust, this , to, pos, dim );
			return this.inherited(arguments);
		},

		// 最终滚动
		_runSlideAnimation : function(from, to, duration, easing, node, idx) {
			topic.publish(this.runSlide, this, {
				from : from,
				to : to
			});
			this.inherited(arguments);
		},

		onAfterScroll : function(evt) {
			topic.publish(this.afScroll,  this, evt );
			return this.inherited(arguments);
		},
		
		onFilter : function() {
			this._runSlideAnimation(this.getPos(), {
				y : 0
			}, 0, "ease-out", this.containerNode, 2);
		},

		hideTopBottom : false,

		_preHideValue : false,

		_fireHideTopBottomTopic : function(hide) {
			if (this._preHideValue === hide) {
				return;
			}
			this._preHideValue = hide;
			topic.publish(this.hideTopBottomTopic,  this, hide );
			common.resizeAll();
		},

		onTouchMove : function(e) {
			this.inherited(arguments);
			if (this.hideTopBottom) {
				var len = this._posY.length;
				if (len < 2) {
					return;
				}
				var pre = this._posY[len - 2];
				var cur = this._posY[len - 1];
				var dy = pre - cur;
				if ((dy > 0 && dy < 5) || (dy < 0 && dy > -10)) {
					return;
				}
				var hide = dy > 0;
				this._fireHideTopBottomTopic(hide);
			}
		}
	});
});
},
'sys/mobile/js/mui/address/AddressMixin':function(){
define( [ "dojo/_base/declare","dojo/_base/lang", "dojo/query", "dojo/dom-construct", "mui/form/_CategoryBase"],
		function(declare, lang, query, domConstruct, _CategoryBase) {
			window.ORG_TYPE_ORG = 0x1; // 机构
			window.ORG_TYPE_DEPT = 0x2; // 部门
			window.ORG_TYPE_POST = 0x4; // 岗位
			window.ORG_TYPE_PERSON = 0x8; // 个人
			window.ORG_TYPE_GROUP = 0x10; // 群组
			window.ORG_TYPE_ROLE = 0x20;
			window.ORG_TYPE_ORGORDEPT = window.ORG_TYPE_ORG | window.ORG_TYPE_DEPT; // 机构或部门
			window.ORG_TYPE_POSTORPERSON = window.ORG_TYPE_POST | window.ORG_TYPE_PERSON; // 岗位或个人
			window.ORG_TYPE_ALLORG = window.ORG_TYPE_ORGORDEPT | window.ORG_TYPE_POSTORPERSON; // 所有组织架构类型
			window.ORG_TYPE_ALL = window.ORG_TYPE_ALLORG | window.ORG_TYPE_GROUP; // 所有组织架构类型+群组
			window.ORG_FLAG_AVAILABLEYES = 0x100; // 有效标记
			window.ORG_FLAG_AVAILABLENO = 0x200; // 无效标记
			window.ORG_FLAG_AVAILABLEALL = window.ORG_FLAG_AVAILABLEYES | window.ORG_FLAG_AVAILABLENO; // 包含有效和无效标记
			window.ORG_FLAG_BUSINESSYES = 0x400; // 业务标记
			window.ORG_FLAG_BUSINESSNO = 0x800; // 非业务标记
			window.ORG_FLAG_BUSINESSALL = window.ORG_FLAG_BUSINESSYES | window.ORG_FLAG_BUSINESSNO; // 包含业务和非业务标记
			
			var addressMixin = declare("mui.address.AddressMixin", null, {
				type : window.ORG_TYPE_ALL,

				isMul : false,

				templURL : "mui/address/address_sgl.jsp" ,

				buildRendering : function() {
					this.inherited(arguments);
				},

				buildOptIcon : function(optContainer) {
					domConstruct.create("i", {
						className : 'mui mui-address'
					}, optContainer);
				},
				
				_setIsMulAttr:function(mul){
					this._set('isMul' , mul);
					if(this.isMul){
						this.templURL =  "mui/address/address_mul.jsp";
					}else{
						this.templURL =  "mui/address/address_sgl.jsp";
					}
				}
			});
			var exports = {
					address : function(mulSelect, idField, nameField, selectType,
							action) {
						var addressObj = new _CategoryBase();
						addressObj.isMul = mulSelect == true ? true : false;
						addressObj.templURL = (mulSelect == true ? "mui/address/address_mul.jsp"
								: "mui/address/address_sgl.jsp");
						addressObj.key = idField;
						var idObj = query("[name='" + idField + "']")[0];
						var nameObj = query("[name='" + nameField + "']")[0];
						addressObj.curIds = idObj.value;
						addressObj.curNames = nameObj.value;
						if (selectType != null) {
							addressObj.type = selectType;
						} else {
							addressObj.type = window.ORG_TYPE_ALL;
						}
						addressObj.afterSelect = function(obj) {
							idObj.value = obj.curIds;
							nameObj.value = obj.curNames;
							if (action) {
								action(obj);
							}
						};
						addressObj.eventBind();
						addressObj._selectCate();
					}
				};
		return lang.mixin(addressMixin, exports);
	});
},
'sys/mobile/js/mui/form/Textarea':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"mui/form/_InputBase", "dojo/dom-construct", "dojo/dom-style",
		"dojo/topic" ], function(declare, query, domClass, _InputBase,
		domConstruct, domStyle, topic) {
	var claz = declare("mui.form.Textarea", [ _InputBase ], {
		edit : true,

		type : 'textarea',

		name : null,

		inputClass : 'muiFormTextarea',

		buildOptIcon : function(optContainer) {
			domConstruct.create("i", {
				className : 'mui mui-insert mui-rotate-45'
			}, optContainer);
		},

		_onInput : function(evt) {
			var target = evt.target;
			this.resizeHeight(target);
		},

		_onChange : function(srcObj , evt) {
			if(srcObj==this){
				this.resizeHeight(this.textareaNode);
				topic.publish('/mui/list/resize', this);
			}
		},

		resizeHeight : function(obj) {
			var scrollHeight = obj.scrollHeight;
			if (scrollHeight <= 0)
				return;
			domStyle.set(obj, {
				height : scrollHeight + 'px'
			});
		},

		// 构建编辑视图
		buildEdit : function() {
			this.textareaNode = domConstruct.create('textarea', {
				name : this.name,
				className : this.inputClass,
				placeholder : this.placeholder
			}, this.valueNode);
			this.connect(this.textareaNode, 'input', '_onInput');
			this.connect(this.textareaNode, 'focus','_onFocus');
			this.subscribe("/mui/form/valueChanged","_onChange");
		},

		buildReadOnly : function() {
			this.textareaNode = domConstruct.create('textarea', {
				name : this.name,
				className : this.inputClass,
				readonly : 'readonly'
			}, this.valueNode);
		},

		_getValueAttr : function() {
			if (this.textareaNode)
				return this.textareaNode.value;
		},

		buildHidden : function() {
			this.textareaNode = domConstruct.create('textarea', {
				name : this.name,
				className : this.inputClass,
				style : 'display:none'
			}, this.valueNode);
		},

		viewValueSet : function(value) {
			this.valueNode.innerHTML = value;
		},

		editValueSet : function(value) {
			this.textareaNode.value = value;
			this.resizeHeight(this.textareaNode);
		},

		readOnlyValueSet : function(value) {
			this.editValueSet(value);
		},

		hiddenSet : function(value) {
			this.editValueSet(value);
		}
	});

	return claz;
});
},
'sys/mobile/js/mui/search/SearchButtonBar':function(){
define( [ "dojo/_base/declare", "mui/header/HeaderItem", "mui/folder/_Folder",
		"mui/search/SearchBarDialogMixin" ], function(declare, HeaderItem, Folder,
		SearchBarDialogMixin) {

	return declare("mui.search.SearchButtonBar",
			[ HeaderItem, Folder, SearchBarDialogMixin ], {

				icon : "mui mui-search",

				baseClass : "muiSearchButton"

			});
});

},
'sys/mobile/js/mui/search/SearchBarDialogMixin':function(){
define( [ "dojo/_base/declare","dojo/dom-style", "dojo/dom-construct", "dojo/dom-class", "dojo/topic",
          "mui/search/SearchBar", "mui/util", "dojo/touch", "dojox/mobile/_css3"  ],
        function(declare, domStyle, domConstruct, domClass, topic, SearchBar, util, touch, css3) {
	return declare("mui.search.SearchBarDialogMixin", null , {
			//模块标识
			modelName : "",
			
			searchCancelEvt : "/mui/search/cancel",

			searchShowEvt : "/mui/searchbar/show",
			
			show:function(evt){
				var created = false; 
				if (!this.searchNodeDiv) {
					var vars = {
						modelName : this.modelName
					};
					this.searchNodeDiv = domConstruct.create("div", {
						className : 'muiSearchBarDiv'
					}, document.body);
					var tmpH = domStyle.get(this.domNode,"height");
					if(!isNaN(this.referOffesetTop)){
						tmpH = this.referOffesetTop;
					}
					domStyle.set(this.searchNodeDiv,
							css3.name('transform'),
					'translate3d(100%, 0, 0)');
					domStyle.set(this.searchNodeDiv,{
						"height": tmpH + 'px'
					});
					this._searchBar = new SearchBar(vars);
					this.searchNodeDiv.appendChild(this._searchBar.domNode);
					created = true;
				}
				domStyle.set(this.searchNodeDiv, "display", "block");
				this.defer(function(){
					domStyle.set(this.searchNodeDiv, css3.name('transform'),'translate3d(0, 0, 0)');
					util.disableTouch(this.searchNodeDiv, touch.move);
					if(created){
						this._searchBar.startup();
					}
					topic.publish(this.searchShowEvt , this);
				},10);
				if(!this.bindedEvent){
					this.subscribe(this.searchCancelEvt, "hideSearchBar");
					this.subscribe("/mui/search/submit", "hideSearchBar");
					this.bindedEvent = true;
				}
			},
			
			hideSearchBar : function(srcObj) {
				domStyle.set(this.searchNodeDiv,css3.name('transform'),'translate3d(100%, 0, 0)');
				this.defer(function() {
						domStyle.set(this.searchNodeDiv, {
							display : 'none'
						});
					}, 410);
			}
	});
});
},
'sys/mobile/js/mui/list/ComplexRItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/ComplexRItemMixin"
	], function(declare, _TemplateItemListMixin, ComplexRItemMixin) {
	
	return declare("mui.list.ComplexRItemListMixin", [_TemplateItemListMixin], {
		
		itemRenderer: ComplexRItemMixin
	});
});
},
'sys/mobile/js/mui/list/item/ComplexRItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"./_ListLinkItemMixin"
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util, _ListLinkItemMixin) {
	var item = declare("mui.list.item.ComplexRItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		//简要信息
		summary:"",
		//创建时间
		created:"",
		//创建者
		creator:"",
		// 状态
		status:"",
		
		buildRendering:function(){
			this._templated = !!this.templateString;
			if (!this._templated) {
				this.domNode = this.containerNode = this.srcNodeRef
						|| domConstruct.create(this.tag, {
									className : 'muiComplexrItem'
								});
				this.contentNode = domConstruct.create(
										'div', {
											className : 'muiListItem'
										}, this.domNode);
			}
			this.inherited(arguments);
			if (!this._templated)
				this.buildInternalRender();
		},
		buildInternalRender : function() {
			var top = domConstruct.create("a",{className:"muiComplexrTop"},this.contentNode);
			var bottom = domConstruct.create("div",{className:"muiComplexrBottom muiListInfo"},this.contentNode);
			if(this.icon){
				var imgDivNode = domConstruct.create("div",{className:"muiComplexrIcon"},top);
				this.imgNode = domConstruct.create("img", { className: "muiComplexrImg",src:this.icon}, imgDivNode);
			}
			if(this.label){
				this.labelNode = domConstruct.create("h4",{className:"muiComplexrTitle muiSubject",innerHTML:this.label},top);
			}
			if(this.summary){
				this.summaryNode = domConstruct.create("p",{className:"muiComplexrSummary muiListSummary",innerHTML:this.summary},top);
			}
			if(this.href){
				this.makeLinkNode(top);
			}
			if(this.creator){
				this.createdNode = domConstruct.create("div",{className:"muiComplexrCreator muiAuthor",innerHTML:this.creator},bottom);
			}
			if(this.created){
				this.createdNode = domConstruct.create("div",{className:"muiComplexrCreated",
					innerHTML:'<i class="mui mui-todo_date"></i>' + this.created},bottom);
			}
			if(this.count){
				this.countNode = domConstruct.create("div",{className:"mui mui-eyes mui-2x muiComplexrRead",innerHTML: "&nbsp;<span class='muiNumber'>"+(this.count?this.count:0)+'</span>'},bottom);
			}
			this.statusNode = domConstruct.create("div",{className:'muiComplexrStatus'},bottom);
			if(this.status){
				this.statusNode.innerHTML = this.status;
			}
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		}
	});
	return item;
});
},
'sys/mobile/js/mui/device/adapter':function(){
/*******************************************************************************
 * 功能：外部设备接入适配器
 * 
 ******************************************************************************/
define( [ "mui/device/device", "dojo/_base/lang", "mui/device/weixinapi",
		"mui/device/kkapi", "mui/device/kk5api", "mui/device/webapi" ], function(device, lang,
		weixinapi, kkapi, kk5api, webapi) {
	var defaultApi = lang.clone(webapi);
	var deviceType = device.getClientType();
	if (deviceType == 6) {						//微信
		return lang.mixin(defaultApi, weixinapi);
	}
	if (deviceType == 7 || deviceType == 8) {	//kk
		return lang.mixin(defaultApi, kkapi);
	}
	if(deviceType == 9 || deviceType == 10){  //kk5
		return lang.mixin(defaultApi, kk5api);
	}
	return defaultApi;
});
},
'sys/mobile/js/mui/picslide/PicSlide':function(){
define(
		[ "dojo/_base/array", "dojo/_base/lang","dojo/_base/declare", "dojo/dom-class",
				"dojo/dom-style", "dojo/dom-construct", "dojo/topic",
				"dojo/store/JsonRest", "dijit/_WidgetBase", "dijit/_Contained",
				"dijit/_Container", "dojox/mobile/_StoreListMixin",
				"dojox/mobile/SwapView", "mui/picslide/PicItem", "mui/util" ],
		function(array,lang, declare, domClass, domStyle, domConstruct, topic,
				JsonRest, WidgetBase, Contained, Container, StoreListMixin,
				SwapView, PicItem, util) {
			var picslide = declare(
					"mui.picslide.PicSlide",
					[ WidgetBase, Container, Contained, StoreListMixin ],{

						width : "inherit",

						height : "inherit",
						//图片数据请求URL，为空，标识无需通过数据请求构造图片播放
						url : "",
						//图片数据信息
						items : [],
						//图片是否拉伸
						picTensile : false,

						picResizeEvt : "/mui/picitem/resize",

						viewChanged : "/dojox/mobile/viewChanged",

						changeView : "/mui/picslide/changeview",

						_getSource : function() {
							if (!this.store && this.url != null
									&& this.url != '')
								this.store = new JsonRest( {
									idProperty : 'fdId',
									target : util.formatUrl(this.url)
								});
						},

						buildRendering : function() {
							this.containerNode = domConstruct.create("div", {
								className : "muiListPicslideContainer",
								id : this.id + "_container"
							});
							this.inherited(arguments);
							var i, len;
							if (this.srcNodeRef) {
								for (i = 0, len = this.srcNodeRef.childNodes.length; i < len; i++) {
									this.containerNode
											.appendChild(this.srcNodeRef.firstChild);
								}
							}
							var pagingNode = domConstruct.create("div", {
								className : "muiListPicslidePaging"
							}, this.containerNode);
							this.curPagingNode = domConstruct.create("span", {
								className : "muiListPicslideCur"
							}, pagingNode);
							this.totalPagingNode = domConstruct.create("span",
									{
										className : "muiListPicslideTotal"
									}, pagingNode);
							this.titleNode = domConstruct.create("div", {
								className : "muiListPicslideTitle"
							}, this.containerNode);
							this.domNode.appendChild(this.containerNode);
							this._getSource();
						},

						postCreate : function() {
							this.inherited(arguments);
							this.subscribe(this.viewChanged,
									"_handleViewChanged");
							this
									.subscribe(this.changeView,
											"_changView");
						},

						startup : function() {
							if (this._started) {
								return;
							}
							//高宽处理
							var h, w;
							if (this.height === "inherit") {
								if (this.domNode.parentNode) {
									h = this.domNode.parentNode.offsetHeight + "px";
								}
							} else if (this.height) {
								h = this.height;
							}
							if (h) {
								this.domNode.style.height = h;
							}
	
							if (this.width === "inherit") {
								if (this.domNode.parentNode) {
									w = this.domNode.parentNode.offsetWidth + "px";
								}
							} else if (this.width) {
								w = this.width;
							}
							if (w) {
								this.domNode.style.width = w;
							}
	
							if (this.store) {
								this.setQuery( {}, {});
							} else {
								this.onComplete(this.items);
							}
							this.inherited(arguments);
					},

					//子对象resize
						resizeItems : function() {
							var h = this.domNode.offsetHeight, w = this.domNode.offsetWidth;
							topic.publish(this.picResizeEvt, this, {
								height : h,
								width : w,
								tensile : this.picTensile
							});
						},

						//数据请求回调
						onComplete : function(items) {
							array.forEach(this.getChildren(), function(child) {
								if (child instanceof SwapView) {
									child.destroyRecursive();
								}
							});
							this.items = items;
							var currV, h = this.domNode.offsetHeight;
							for ( var i = 0; i < items.length; i++) {
								var w = new SwapView( {
									height : h + "px",
									lazy : true
								});
								w.addChild(new PicItem(lang.mixin(items[i],{itemIndex:i})));
								this.addChild(w);
								if (i === 0) {
									w.show();
									currV = w;
								} else {
									w.hide();
								}
							}
							this.resizeItems();
							this._handleViewChanged(currV);
						},

						//图片切换事件
						_handleViewChanged : function(evt) {
							var view = null;
							var idx = 0;
							if (evt instanceof SwapView) {
								view = evt;
								idx = this.getIndexOfChild(view);
								if (this.currentView != view) {
									this.curPagingNode.innerHTML = (idx + 1);
									this.totalPagingNode.innerHTML = "/"
											+ this.getChildren().length;
									if (this.items[idx].label
											|| this.items[idx].alt) {
										this.titleNode.innerHTML = this.items[idx].label ? this.items[idx].label
												: this.items[idx].alt;
										domStyle.set(this.titleNode, {
											display : 'block'
										});
									} else {
										domStyle.set(this.titleNode, {
											display : 'none'
										});
									}
									this.currentView = view;
								}
							}
						},
						_changView:function(scrObj,evt){
							if(evt){
								var view = this.getChildren()[evt.curIndex];
								if (this.currentView != view) {
									view.show();
									this._handleViewChanged(view);
								}
							}
						}
					});
			return picslide;
		});
},
'sys/mobile/js/mui/form/_FormBase':function(){
define(["dojo/_base/declare", "dojo/dom-construct", "dijit/_WidgetBase" ,"dojo/dom-attr", "dojo/dom-style", "dojo/topic"], 
		function(declare, domConstruct, WidgetBase, domAttr, domStyle, topic) {
		var _field = declare("mui.form._FormBase", [WidgetBase], {
			//标题
			subject : null ,
			
			//变更事件
			onValueChange : null,
			
			//校验
			validate : null,
			
			//可编辑
			edit : true,
			
			//显示状态,前端只需处理noShow edit readOnly view状态
			showStatus:'edit',
			
			//值
			value : '',
			
			required : false ,
			
			baseClass : "muiField",
			
			opt : true,
	
			align : "left" ,
			
			EVENT_VALUE_CHANGED : "/mui/form/valueChanged" ,
			
			buildRendering : function() {
				this.inherited(arguments);
				this.edit = this.showStatus=='edit';
				this.innerHTML = this.domNode.innerHTML;
				this.fieldItem = domConstruct.create("div",{'className':'muiFieldItem ' + this.showStatus },this.domNode);
				if(this.subject){
					this.subjectNode = domAttr.set(this.domNode,'subject',this.subject);
				}
				this.valueNode = domConstruct.create("div",{'className':'muiFieldValue'},this.fieldItem);
				if(this.edit && this.required){
					this.requiredNode = domConstruct.create("div",{'className':'muiFieldRequired',innerHTML:'*'},this.fieldItem);
				}
				if(this.edit && this.opt){
					this.optNode = domConstruct.create("div" ,{className:'muiFieldOpt'},this.fieldItem);
					this.buildOptIcon(this.optNode);
				}
			},
			//加载
			startup : function() {
				this.inherited(arguments);
				domStyle.set(this.domNode,{'text-align':this.align});
			},
			
			buildOptIcon:function(optContainer){
				
			},
			
			_setValueAttr : function(val) {
				var oldValue = this.value || '';
				this._set("value", val);
				if (this.edit && oldValue != val) {
					topic.publish(this.EVENT_VALUE_CHANGED, this, {
						oldValue : oldValue,
						value : val
					});
					if (this.onValueChange) {
						var scriptFun = this.onValueChange+"(this.get('value'),this);";
						new Function(scriptFun).apply(this, [this]);
					}
				}
				if(this._started){
					if(this.validate!='' && this.edit && this.validateImmediate){
						if(this.validation)this.validation.validateElement(this);
					}
				}
			}
		});
		return _field;
});
},
'sys/mobile/js/mui/form/Editor':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/dom-construct",
				"dojo/dom-class", "mui/util", "dojo/_base/array", "dojo/topic",
				"dojo/touch", "mui/form/editor/EditorPluginMixin",
				"dojo/text!./editor/tmpl/layout.html", "dojo/html",
				"dojo/_base/lang", "dojo/query", "dojo/Deferred",
				"dojo/dom-style", "dojo/dom-attr" ],
		function(declare, WidgetBase, domConstruct, domClass, util, array,
				topic, touch, EditorPluginMixin, layout, html, lang, query,
				Deferred, domStyle, domAttr) {

			return declare(
					"mui.form.Editor",
					[ WidgetBase, EditorPluginMixin ],
					{

						edit : true,

						name : null,

						options : {},

						baseClass : 'muiEditor',

						showStatus : 'edit',
						// 支持自定义布局
						layout : layout,

						EVENT_VALUE_CHANGED : '/mui/form/valueChanged',

						buildRendering : function() {
							// 格式化内容
							this.formatContent = [];
							this.inherited(arguments);
							domClass.add(this.domNode, this.baseClass);
							this.edit = this.showStatus != 'view';
							this._buildValue();
							this.synValue();
						},

						// 提交时候设置同步textarea值
						synValue : function() {
							if (typeof (Com_Parameter) == 'undefined')
								return;
							var self = this;
							Com_Parameter.event["submit"].push(function() {
								self._synValue();
								return true;
							});
						},

						format : function() {
							return util.base64Encode(this._format());
						},

						_format : function() {
							if (this.__textNode) {
								var html = this.__textNode.innerHTML;
								for (var i = 0; i < this.formatContent.length; i++) {
									html = this.formatContent[i](html);
								}
								return html;
							}
							return "";
						},

						_synValue : function() {
							this.valueNode.value = this.format();
						},

						_buildValue : function() {
							this.inherited(arguments);
							var setBuildName = 'build'
									+ util.capitalize(this.showStatus);
							this[setBuildName] ? this[setBuildName]() : '';
							var setMethdName = this.showStatus + 'ValueSet';
							this.showStatusSet = this[setMethdName] ? this[setMethdName]
									: new Function();
						},

						buildEdit : function() {
							this.editorDeferred = new Deferred();

							// 容器节点
							this.editorNode = domConstruct.create('div', {
								className : 'muiEditorContainer'
							}, this.domNode);
							this.inherited(arguments);
							var self = this;
							var dhs = new html._ContentSetter({
								parseContent : true,
								cleanContent : true,
								node : this.editorNode,
								onBegin : function() {
									if (self.name)
										self.options.name = self.name;
									this.content = lang.replace(this.content,
											self.options);
									this.inherited("onBegin", arguments);
								}
							});
							if (this.layout)
								dhs.set(this.layout);
							else
								dhs.set(layout);
							dhs.parseDeferred.then(lang.hitch(this,
									function(parseResults) {
										this.pluginNode = query(
												'.muiEditorPlugin',
												this.editorNode)[0];
										this.textContainerNode = query(
												'.muiEditorTextContainer',
												this.editorNode)[0];
										this.__textNode = query(
												'div.muiEditorTextarea',
												this.textContainerNode)[0];
										if (this.placeholder)
											domAttr.set(this.__textNode,
													'placeholder',
													this.placeholder);
										this.connect(this.__textNode, 'blur',
												'onBlur');
										this.connect(this.__textNode, 'input',
												'onInput');
										this.valueNode = query(
												'textarea.muiEditorTextarea',
												this.textContainerNode)[0];
										this.editorDeferred.resolve();
									}));
							dhs.tearDown();
						},

						placeholder : null,

						onInput : function(evt) {
							this.publishValueChange();
						},

						onBlur : function(evt) {
							var selection = document.getSelection(), range = selection
									.getRangeAt(0);
							var pos = range.endOffset, container = range.endContainer;
							if (container.nodeType === 3) { // 文本节点
								this.isText = true;
							} else
								this.isText = false;
							this.__pos = pos;
							this.__container = container;
						},

						// 当前位置插入dom节点
						insertElement : function(node) {
							var c = this.__container;
							if (!c) {
								domConstruct.place(node, this.__textNode,
										'last');
							} else {
								var p = this.__pos;
								if (this.isText) {
									c.splitText(p);
									c.parentNode.insertBefore(node,
											c.nextSibling);
								} else
									c.insertBefore(node, c.childNodes[p]);
							}
							this.publishValueChange();
						},

						_getValueAttr : function() {
							return this.__textNode.innerHTML;
						},

						publishValueChange : function() {
							topic.publish(this.EVENT_VALUE_CHANGED, this, {
								value : this._format()
							});
						},

						_setValueAttr : function(value) {
							this._set("value", value);
							if (this.showStatusSet)
								this.showStatusSet(value);
							this.publishValueChange();
						},

						viewValueSet : function(value) {
							this.editValueSet(value);
						},

						editValueSet : function(value) {
							if (this.valueNode)
								this.valueNode.value = value;
							if (this.__textNode)
								this.__textNode.innerHTML = value;
						},

						readOnlyValueSet : function(value) {
							this.editValueSet(value);
						},

						hiddenValueSet : function(value) {
							if (this.valueNode)
								this.valueNode.value = value;
						}
					});
		});
},
'sys/mobile/js/mui/form/editor/EditorPopupMixin':function(){
define([ "dojo/_base/declare", "dojo/dom-construct", "dojo/dom-style",
		"mui/form/Editor", "dojo/string", "dojo/query", "dojo/request",
		"mui/dialog/Tip", "dojo/_base/array", "mui/util", "dojo/Deferred",
		"dojo/_base/lang", "dojo/when", "dojo/topic", "dijit/registry",
		"dojo/dom-class", "dijit/_WidgetBase" ], function(declare,
		domConstruct, domStyle, Editor, string, query, request, tip, array,
		util, Deferred, lang, when, topic, registry, domClass, _WidgetBase) {

	return declare("mui.form.EditorPopupMixin", [ _WidgetBase ], {

		/***********************************************************************
		 * 重写接口--开始
		 **********************************************************************/
		// 构建异步提交表单
		buildForm : function() {
			var formInfo = {};
			if (this.data) {
				formInfo = this.data;
			}
			formInfo[this.name] = this.textClaz.format();
			query("input", this.textNode).forEach(function(inputDom) {
				formInfo[inputDom.name] = inputDom.value;
			});
			return formInfo;
		},

		name : null,

		_url : null,

		_value : '',

		/***********************************************************************
		 * 重写接口--结束
		 **********************************************************************/

		disableClass : 'muiEditorSubmitDisable',

		EVENT_VALUE_CHANGED : "/mui/form/valueChanged",

		canSubmit : true,

		onOperationClick : function(evt) {
			this.inherited(arguments);
		},

		plugin : null,

		placeholder : null,

		buildEditorOptions : function() {
			var options = {
				name : this.name,
				value : this._value,
				layout : this.layout,
				options : this
			};
			if (this.plugin)
				options.plugins = this.plugin;
			if (this.placeholder)
				options.placeholder = this.placeholder;

			return options;
		},

		onEditorClick : function() {
			this.textClaz = new Editor(this.buildEditorOptions());
			this.textNode = this.textClaz.domNode;

			domClass.add(this.textNode, 'popup');
			// 遮罩节点
			if (!this.maskNode)
				this.maskNode = domConstruct.create('div', {
					className : 'muiEditorMask'
				}, document.body);
			domStyle.set(this.maskNode, 'opacity', 1);
			domConstruct.place(this.textNode, document.body, 'last');
			this.defer(function() {
				domStyle.set(this.textNode, '-webkit-transform',
						'translate3d(0px, 0px, 0px)');
			}, 100);

			this.defer(function() {
				this.maskHandle = this.connect(this.maskNode, 'click',
						'onMaskClick');
			}, 300);
			if (!this.canSubmit)
				return;
			this.textClaz.editorDeferred.then(lang.hitch(this, function() {
				this.submitNode = domConstruct.create('div', {
					className : 'muiEditorSubmit ' + this.disableClass,
					innerHTML : '发送'
				}, this.textClaz.pluginNode, 'last');
			}));
			this.subscribe(this.EVENT_VALUE_CHANGED, '_onValueChange');
		},

		// 检验内容，判断是否出现提交按钮
		_onValueChange : function(obj, evt) {
			if (!evt)
				return;
			this.validateSubmit(evt.value, 'submitHandle', 'onSubmit',
					this.submitNode);
		},

		// 校验提交按钮
		validateSubmit : function(value, handle, event, node) {
			// 过滤手机中生成的换行符
			var value = value.replace(/<br\/?[^>]*>/g, '').trim();
			if (value.length > 0) {
				if (!this[handle])
					this[handle] = this.connect(node, 'click', event);
				if (domClass.contains(node, this.disableClass))
					domClass.remove(node, this.disableClass);
			} else {
				if (this[handle]) {
					this.disconnect(this[handle]);
					this[handle] = null;
				}
				if (!domClass.contains(node, this.disableClass))
					domClass.add(node, this.disableClass);
			}
		},

		// 校验
		validates : [],

		// 提交按钮
		onSubmit : function(evt) {
			for (var i = 0; i < this.validates.length; i++) {
				if (this.validates[i].call(this, this) == false)
					return;
			}
			this.buildForm();
			this.disconnect(this.submitHandle);
			var promise = request.post(util.formatUrl(string.substitute(
					this._url, this)), {
				data : this.buildForm()
			});
			var self = this;
			promise.response.then(function(data) {
				self.deferred = new Deferred();
				self.hideMask();
				when(self.deferred.promise, lang.hitch(self,
						self.afterHideMask, data));
			});
		},

		afterHideMask : function(data) {
			this.showTip(data);
		},

		showTip : function(data) {
			if (data.status == 200) {
				tip.success({
					text : '操作成功'
				});
			} else
				tip.fail({
					text : '操作失败'
				});
		},

		hideMask : function() {
			this.defer(function() {
				domStyle.set(this.textNode, '-webkit-transform',
						'translate3d(0px, 400%, 0px)');
				domStyle.set(this.maskNode, {
					'opacity' : 0
				})
			}, 300);
			this.defer(function() {
				this.destroyMask();
				if (this.deferred)
					this.deferred.resolve();
			}, 500);
		},

		destroyMask : function() {
			// 低端android手机不支持remove方法，类似三星、魅族和华为
			this.maskNode.parentNode.removeChild(this.maskNode);
			this.maskNode = null;
			this.textClaz.destroy();
			this.disconnect(this.maskHandle);
		},

		eventStop : function(evt) {
			evt.preventDefault();
			evt.stopPropagation();
		},

		onMaskClick : function(evt) {
			this.eventStop(evt);
			var target = evt.target, isHide = true;
			while (target) {
				if (target == this.textNode) {
					isHide = false;
					break;
				}
				target = target.parentNode;
			}
			if (isHide) {
				this.textNode.blur();
				this.hideMask();
			}
		}
	});
});
},
'sys/mobile/js/mui/list/ProcessItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/ProcessItemMixin"
	], function(declare, _TemplateItemListMixin, ProcessItemMixin) {
	
	return declare("mui.list.ProcessItemListMixin", [_TemplateItemListMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: ProcessItemMixin
	});
});
},
'sys/mobile/js/mui/syscategory/SysCategoryHeader':function(){
define( [ "dojo/_base/declare", "mui/category/CategoryHeader"], function(declare,CategoryHeader) {
		var header = declare("mui.syscategory.SysCategoryHeader", [ CategoryHeader], {
				
				modelName: null ,
				
				title:"分类选择",
				
				//获取详细信息地址
				detailUrl : '/sys/category/mobile/sysCategory.do?method=detailList&cateId=!{curId}&modelName=!{modelName}'
			});
			return header;
});
},
'sys/mobile/js/mui/folder/Folder':function(){
define( [ "dojo/_base/declare", 
          "mui/folder/_Folder",
          "mui/util",
          "dojo/_base/array",
          "dojo/html",
          "dojo/dom-construct",
          "dojo/dom-style",
          "dojo/dom-class",
          "dojo/window",
          "dojo/query",
          "dojo/touch",
          "dojox/mobile/_css3",
          "dojo/topic"], function(declare, _Folder, util, array, html, domConstruct, domStyle, domClass, win, query, touch, css3, topic) {

	return declare("mui.folder.Folder", [_Folder], {
		//展开后，展示页面
		tmplURL: null,
		
		icon : 'mui mui-plus',
		
		HIDE_EVENT : '/mui/folder/hide',
		
		SHOW_EVENT: '/mui/folder/show',
		
		_scollTempl : "<div data-dojo-type=\"dojox/mobile/ScrollableView\" "
						+"data-dojo-props=\"scrollBar:true,height:'100%'\" class=\"muiFolderView\">!{tmplInfo}</div>",
		
		postCreate : function() {
			this.inherited(arguments);

		},
		
		hideStyle:{},
		
		showStyle:{},
		
		startup : function() {
			this.inherited(arguments);
			this.hideStyle[css3.name('transform')] = 'translate3d(0, -50%, 0)';
			this.showStyle[css3.name('transform')] = 'translate3d(0, 0, 0)';
		},
		
		show:function(evt){
			if(this._showed){
				this.hide();
				return ;
			}
			var topH = this.domNode.offsetHeight;
			domClass.add(this.domNode,"muiFolderRotate muiFolderRotate135");
			if(this.expandDiv == null){
				this.expandDiv = domConstruct.create("div", {className : 'muiFolderExpand'}, document.body,'last');
				domStyle.set(this.expandDiv,{top:topH + 'px', height: (win.getBox().h - topH)+'px'});
				if(this.tmplURL!=null && this.tmplURL!=''){
					var _self = this;
					require(["dojo/text!" + util.formatUrl(util.urlResolver(this.tmplURL , this))], function(tmplStr){
						tmplStr = _self._scollTempl.replace("!{tmplInfo}",tmplStr);
						tmplStr = tmplStr.replace("!{topHeight}",topH);
						var dhs = new html._ContentSetter({
							node: _self.expandDiv,
							parseContent : true,
							cleanContent : true
						});
						dhs.set(tmplStr);
						dhs.parseDeferred.then(function(results) {
							_self.parseResults = results;
							var viewDom = query(".muiFolderView", _self.expandDiv);
							domStyle.set(viewDom[0], _self.showStyle);
							_self._showed = true;
							topic.publish(_self.SHOW_EVENT,_self,{});
						});
						dhs.tearDown();
					});
				}
			}else{
				domStyle.set(this.expandDiv,{display:'block'});
				domStyle.set(this.expandDiv,{top:topH + 'px', height: (win.getBox().h-topH)+'px'});
				var viewDom = query(".muiFolderView", this.expandDiv);
				domStyle.set(viewDom[0], this.showStyle);
				this._showed = true;
				topic.publish(this.SHOW_EVENT,this,{});
			}
			this.expandHandle = this.connect(document.body, touch.press, 'hide');
		},
		
		hide:function(evt){
			topic.publish(this.HIDE_EVENT,this,{});
			if((evt && evt.target==this.domNode) || this.expandDiv == null){
				return ;
			}
			if(this._showed != true) return;
			domClass.remove(this.domNode,"muiFolderRotate muiFolderRotate135");
			var viewDom = query(".muiFolderView", this.expandDiv);
			domStyle.set(viewDom[0], this.hideStyle);
			this.defer(function(){
				domStyle.set(this.expandDiv,{display:'none'});
			},410);
			if(this.expandHandle){
				this.expandHandle.remove();
			}
			this._showed = false;
		}
	});
});

},
'sys/mobile/js/mui/form/editor/plugins/image/Plugin':function(){
define(
		[ "dojo/_base/declare", "dojo/dom-construct",
				"mui/form/editor/plugins/image/web/EditorUpload",
				"dojo/text!../tmpl/panelH.html", "dojo/html", "dojo/query",
				'mui/util', "dojo/_base/lang", "dojo/dom-style",
				"dojo/dom-attr", "dojo/dom-class", "dojo/topic",
				"mui/form/editor/plugins/EditorPluginBaseMixin", "dojo/dom",
				"dojo/_base/array", "dojo/string", "mui/device/adapter",
				"dojox/mobile/sniff" ],
		function(declare, domConstruct, EditorUpload, tmpl, html, query, util,
				lang, domStyle, domAttr, domClass, topic,
				EditorPluginBaseMixin, dom, array, string, adapter, has) {

			return declare(
					"mui.form.editor.plugins.face.Plugin",
					[ EditorPluginBaseMixin ],
					{
						type : 'image',

						event : function(evt) {
							this._imageShow(evt);
						},

						icon : 'mui-editor-image',

						// 事件前缀
						eventPrefix : "editorUpload_",

						show : function() {
							this.inherited(arguments);

							domStyle.set(this.container, {
								'display' : 'block'
							});

							this.defer(function() {
								domStyle.set(this.container, {
									'height' : '12rem'
								});
							}, 1);
						},

						hide : function() {
							this.inherited(arguments);

							domStyle.set(this.container, {
								'height' : 0
							});

							this.defer(function() {
								domStyle.set(this.container, {
									'display' : 'none'
								});
							}, 200);
						},

						constructor : function(options) {
							this.inherited(arguments);
						},

						// 上传开始
						_imgUploadStart : function(obj, evt) {
							if (window.console)
								console.log("图片上传开始");
							if (obj == window.EditorUpload[this.editor.name])
								this._imageBuildImage(evt);
						},

						// 上传完毕
						_imgUploadSuccess : function(obj, evt) {
							if (window.console)
								console.log("图片上传成功");
							if (!evt)
								return;
							if (obj != this.uploader)
								return;
							var item = query('#' + evt.file._fdId)[0];
							var img = query('img', item)[0], close = query(
									'.muiEditorImageClose', item)[0], defaultItem = query(
									'.muiEditorImageDefault', item)[0], loading = query(
									'.muiEditorImageStatus', item)[0], thumb = query(
									'.muiEditorImageThumb', item)[0];
							domConstruct.destroy(loading);
							domConstruct.destroy(defaultItem);
							domStyle.set(close, 'display', 'block');
							var src = window.EditorUpload[this.editor.name].downloadUrl
									+ '?fdId=' + evt.filekey;
							domAttr.set(img, 'src', adapter
									.readAsDataURL(evt.file));
							domStyle.set(thumb, 'opacity', 1);
							this.images.push({
								src : src,
								id : evt.file._fdId
							});
							this.editor.publishValueChange();
						},

						getImageById : function(id) {
							for (var i = 0; i < this.images.length; i++) {
								if (this.images[i].id == id)
									return this.images[i];
							}
						},

						deleteImageById : function(id) {
							for (var i = 0; i < this.images.length; i++) {
								if (this.images[i].id == id)
									this.images.splice(i, 1);
							}
							this.editor.publishValueChange();
						},

						// 上传中
						_imgUploadProcess : function(obj, evt) {
							if (window.console)
								console.log('图片上传中');
						},

						_imgUploadFail : function(obj, evt) {
							if (window.console)
								console.log("图片上传失败");
						},

						_imageBuildImage : function(evt) {
							var file = evt.file;
							var itemNode = domConstruct.create('div', {
								className : 'muiEditorImageItem',
								tabindex : 0,
								id : file._fdId,
							}, this._uploadNode, 'before');
							domConstruct.create('div', {
								className : 'muiEditorImageDefault',
								innerHTML : '<i class="mui mui-file-img"></i>'
							}, itemNode);

							domConstruct
									.create(
											'div',
											{
												className : 'muiEditorImageStatus',
												innerHTML : '<i class="mui mui-spin mui-loading2"></i>'
											}, itemNode);

							domConstruct.create('div', {
								className : 'muiEditorImageThumb',
								innerHTML : '<img src=""  align="middle">'
							}, itemNode);
							var deleteNode = domConstruct.create('div', {
								innerHTML : '<i class="mui mui-close"></i>',
								className : 'muiEditorImageClose'
							}, itemNode);
							this.connect(deleteNode, 'click', '_deleteNode');
						},

						_deleteNode : function(evt) {
							var target = evt.target;
							var parent = target.parentNode.parentNode;
							var id = domAttr.get(parent, 'id');
							if (id) {
								this.deleteImageById(id);
								domConstruct.destroy(dom.byId(id));
							}
						},

						startup : function() {
							this.subscribe(this.eventPrefix + 'start',
									'_imgUploadStart');
							this.subscribe(this.eventPrefix + 'fail',
									'_imgUploadFail');
							this.subscribe(this.eventPrefix + 'success',
									'_imgUploadSuccess');
							this.subscribe(this.eventPrefix + 'process',
									'_imgUploadProcess');
							this.images = [];

							this.editor.formatContent.push(lang.hitch(this,
									this.imageFormat));
						},

						imageFormat : function(html) {
							if (!this.images || this.images.length == 0)
								return html;
							var img = '<img src="${src}">';
							array.forEach(this.images, function(image) {
								var src = image.src;
								var tmpl = string.substitute(img, {
									src : src
								});
								html += tmpl;
							}, this);
							return html;
						},

						_imageShow : function(evt) {

							if (this._isShow) {
								this.hide();
								return;
							}

							this._isShow = true;

							if (this._imageIsInit) {
								this.show();
								return;
							}

							this.iconNode = evt.target;

							this.container = domConstruct.create('div', {
								className : 'muiEditorImage'
							}, this.editor.domNode, 'last');
							this._imageBuildPanel(evt);
							this.show();
							this._imageIsInit = true;
						},

						_upload : function(evt) {
							var target = evt.target;
							if (target)
								target.blur();
							this.uploader = adapter.uploadImage({
								evt : evt,
								name : this.editor.name,
								fdMulti : false,
								fdModelId : this.editor.fdModelId,
								fdModelName : this.editor.fdModelName
							});
						},

						_imageBuildPanel : function(evt) {
							var dhs = new html._ContentSetter({
								parseContent : true,
								cleanContent : true,
								node : this.container,
								onBegin : function() {
									this.content = this.content.replace(
											/!{panel}/g, '');
									this.inherited("onBegin", arguments);
								}
							});
							dhs.set(tmpl);
							dhs.parseDeferred.then(lang.hitch(this, function(
									parseResults) {
								if (parseResults.length == 0)
									return;
								this._imagePanel = parseResults[0];
								this.buildUploadBtn();
							}));
							dhs.tearDown();
						},

						// 构建上传按钮
						buildUploadBtn : function() {
							if (!this._imageContainer)
								this._imageContainer = domConstruct
										.create(
												'div',
												{
													className : 'muiEditorImageContainer'
												},
												this._imagePanel.containerNode);

							this._uploadNode = domConstruct
									.create(
											'div',
											{
												className : 'muiEditorImageUpload',
												innerHTML : '<div><i class="mui mui-plus"></i></div><div class="muiEditorImageUploadTip">添加到内容</div>'
											}, this._imageContainer);

							var input = domConstruct.create('input', {
								type : 'file',
								capture : 'camera',
								className : 'muiEditorImageInput'
							}, this._uploadNode);
							this.connect(input, 'click', '_click');
							this.connect(input, 'change', '_upload');
						},

						_click : function(evt) {
							if (has("android")) {
								if (evt.stopPropagation)
									evt.stopPropagation();
								if (evt.cancelBubble)
									evt.cancelBubble = true;
								if (evt.preventDefault)
									evt.preventDefault();
								if (evt.returnValue)
									evt.returnValue = false;
							}
						}
					});
		});
},
'sys/mobile/js/mui/nav/_StoreNavBarMixin':function(){
define("mui/nav/_StoreNavBarMixin", ["dojo/_base/declare", "dojo/dom-class",
				"dojox/mobile/_StoreMixin", "dojo/_base/array", "./NavItem",
				"dojo/store/JsonRest", "dojo/topic", "mui/util"], function(
				declare, domClass, StoreMixin, array, NavItem, JsonRest, topic,
				util) {
			var cls = declare('mui.nav._StoreNavBarMixin', StoreMixin, {
				// 渲染模板
				itemRenderer : NavItem,
				
				// 默认请求url
				defaultUrl : '',

				// 是否默认过，防止请求死循环
				defaulted : false,

				buildRendering : function() {
					this.inherited(arguments);
				},

				_setUrlAttr : function(url) {
					this.url = util.formatUrl(url);
					this._url = util.formatUrl(url);
				},

				_setDefaultUrlAttr : function(url) {
					this.defaultUrl = util.formatUrl(url);
				},

				onComplete : function(items) {
					// // 无数据启用默认url
					if (items.length == 0 && !this.defaulted && this.defaultUrl) {
						this.set('defaulted', true);
						this.url = this.defaultUrl;
						this.store.target = this.url;
						this.setQuery();
						return;
					}
					this.generateList(items);
					topic.publish('/mui/nav/onComplete', this, items);
//					var self = this;
//					this.selectedItem = self.getChildren()[2]; //TODO read ls to set
					if (this.selectedItem) {
						this.selectedItem.setSelected();
//						if (this.selectedItem.moveTo) {
//							this.selectedItem.makeTransition();
//						}
					}
				},

				generateList : function(items) {
					array.forEach(items, function(item, index) {
						if (index == 0) {
							this.addFirstChild(this.createListItem(item));
							return;
						}
						this.addChild(this.createListItem(item));
						if (item[this.childrenProperty]) {
							array.forEach(item[this.childrenProperty], function(child,
									index) {
								this.addChild(this.createListItem(child));
							}, this);
						}
					}, this);
				},

				selectedItem : null,
				
				addFirstChild:function(item){
					this.addChild(item);
				},

				// 构建子项
				createListItem : function(item) {
					var item = new this.itemRenderer(this
							._createItemProperties(item));
					if (item.selected === true)
						this.selectedItem = item;
					return item;
				},

				// 格式化数据
				_createItemProperties : function(item) {
					return item;
				},

				startup : function() {
					if (this._started)
						return;

					if (!this.url) {
						this.url = this.defaultUrl;
						this.set('defaulted', true);
					}

					if (!this.store && !this.url)
						return;
					if (!this.store && this.url)
						var store = new JsonRest({
									idProperty : 'fdId',
									target : this.url
								});
					else
						store = this.store;
					this.store = null;
					this.setStore(store, this.query, this.queryOptions);
					this.inherited(arguments);
				}
			});
			return cls;
		});
},
'sys/mobile/js/mui/table/DetailTableScrollableView':function(){
define( [ "dojo/_base/declare", "mui/view/DocScrollableView"],
		function(declare, DocScrollableView) {
	
	return declare("mui.table.DetailTableScrollableView", [ DocScrollableView], {
		stopParser:true,
		
		buildRendering : function() {
			this.inherited(arguments);
		}
	});
});
},
'sys/mobile/js/mui/device/webapi':function(){
/*
 * 用于web客户端对应功能接口调用
 */
define(["mui/picslide/ImagePreview", "mui/device/web/attachment","mui/form/editor/plugins/image/web/EditorUpload", "mui/util"],function(ImagePreview,Attachment,EditorUpload,util) {
	var webApi = {
			closeWindow : function() {
				location = dojoConfig.baseUrl ? dojoConfig.baseUrl : '/';
				return {};
			},
			
			goBack : function() {
				if(history.length>1){
					history.back();
				}else{
					location = dojoConfig.baseUrl ? dojoConfig.baseUrl : '/';
				}
				return {};
			},
			
			goForward : function(){
				history.forward();
				return {};
			},
			
			getUserID : function(){
				window.building();
				return null;
			},
			
			openSpeech:function(options){
				window.building();
				return null;
			},
			
			openCamera:function(options){
				window.building();
				return null;
			},

			selectFile:function(options){
				this.uploadFile(options);
				return {};
			},
			
			uploadImage : function(options) {
				var evt = options.evt;
				if (evt) {
					var files = evt.target.files;
					if (!window.EditorUpload)
						window.EditorUpload = {};
					var editorUploadObj = window.EditorUpload[options.name];
					if (!editorUploadObj) {
						editorUploadObj = new EditorUpload(options);
						window.EditorUpload[options.name] = editorUploadObj;
					}
					for (var i = 0; i < files.length; i++) {
						editorUploadObj.startUploadFile(files[i]);
					}
					return editorUploadObj;
				}
			},
			
			uploadFile:function(context){
				var options = context.options;
				if(!window.AttachmentList)
					window.AttachmentList = {};
				var attachmentObj = window.AttachmentList[options.fdKey];
				if(!attachmentObj){
					attachmentObj = new Attachment(options);
					window.AttachmentList[options.fdKey] = attachmentObj;
				}
				if(context.evt.target){
					var files = context.evt.target.files;
					for(var i=0 ; i < files.length ; i++){
						var url =  this.readAsDataURL(files[i]);
						if(url){
							files[i].href = url;
						}
						attachmentObj.startUploadFile(files[i]);
					}
				}else{
					attachmentObj.startUploadFile({
						href : context.evt.dataURL,
						size : context.evt.dataURL.size,
						name: "image.png"
					});
				}
				return {};
			},
			
			playSpeech:function(options){
				window.building();
				return null;
			},
			
			imagePreview:function(options){
				if(!this.preivew)
					this.preivew = new ImagePreview();
				this.preivew.play(options);
				return {};
			},
			
			download : function(options) {
				location.href = util.formatUrl(options.href);
			},
			
			captureScreen:function(options){
				window.building();
				return null;
			},
			
			readAsDataURL:function(file){
				if(window.URL){
					return window.URL.createObjectURL(file);
				}else if(window.webkitURL){
					return window.webkitURL.createObjectURL(file);
				}
				return null;
			}
		};
	return webApi;
});

},
'sys/mobile/js/mui/person/PersonDetailJsonStoreList':function(){
define([ "dojo/_base/declare",  "mui/list/JsonStoreList"
    ],function(declare,JsonStoreList){
	
	return declare("mui.person.PersonDetailJsonStoreList", [JsonStoreList], {
		
		formatDatas : function(datas) {
			var dataed = [];
			if(datas.length>0){
				var item=datas[0];
				if(item instanceof Array)
					dataed=this.inherited(arguments);
				else
					dataed=datas;
			}
			return dataed;
		}
		
	});
	
});
},
'sys/mobile/js/mui/tabbar/CreateButton':function(){
define([
    "mui/tabbar/TabBarButton",
	"dojo/_base/declare",
	"mui/form/_CategoryBase",
	"dojo/dom-construct",
	"mui/util",
	"mui/dialog/Tip"
	], function(TabBarButton, declare, CategoryBase, domConstruct, util, Tip) {
	
	return declare("mui.tabbar.CreateButton", [TabBarButton, CategoryBase], {
		icon1 : "mui mui-create",
		
		key : '_cateSelect',
		
		createUrl:'',
		
		buildRendering:function(){
			this.inherited(arguments);
		},
		
		postCreate : function() {
			this.inherited(arguments);
			this.eventBind();
		},
		
		_onClick : function(evt) {
			this.defer(function(){
				this._selectCate();
			}, 350);
		},
		
		afterSelectCate:function(evt){
			var process = Tip.processing();
			process.show();
			this.defer(function(){
				window.open(util.formatUrl(util.urlResolver(this.createUrl, evt)),"_self");
				process.hide();
			},300);
		},
		
		returnDialog:function(srcObj , evt){
			this.inherited(arguments);
			if(srcObj.key == this.key){
				this.afterSelectCate(evt);
			}
		}
	});
});
},
'sys/mobile/js/mui/address/AddressSearchBar':function(){
define([ "dojo/_base/declare","mui/search/SearchBar"],
		function(declare, SearchBar) {

			return declare("mui.address.AddressSearchBar",
					[ SearchBar ],{
						
						//搜索请求地址
						searchUrl : "/sys/organization/mobile/address.do?method=searchList&keyword=!{keyword}&orgType=!{orgType}",
						
						//搜索结果直接挑转至searchURL界面
						jumpToSearchUrl:false,
						
						//搜索关键字
						keyword : "",
						
						//提示文字
						placeHolder : '搜索',

						//是否需要输入提醒
						needPrompt:false,
						
						orgType:null
		});
});

},
'sys/mobile/js/mui/simplecategory/SimpleCategorySelection':function(){
define([ "dojo/_base/declare", "mui/iconUtils",
				"mui/category/CategorySelection" ],
		function(declare, iconUtils, CategorySelection) {
			var selection = declare("mui.simplecategory.SimpleCategorySelection",[ CategorySelection ],{

				modelName:null,
				
				//获取详细信息地址
				detailUrl : '/sys/category/mobile/sysSimpleCategory.do?method=detailList&cateId=!{curIds}&modelName=!{modelName}',

				buildIcon : function(iconNode, item) {
					iconUtils.setIcon("mui mui-file-text", null, null, null,
						iconNode);
				}
			});
			return selection;
		});
},
'sys/mobile/js/mui/dialog/Dialog':function(){
define([ "dojo/_base/declare", "mui/dialog/_DialogBase", "dojo/dom-construct",
		"dojo/dom-style", "dojo/dom-class", "dojo/_base/array",
		"dojo/_base/lang", 'dojo/parser', "mui/iconUtils" ], function(declare,
		_DialogBase, domConstruct, domStyle, domClass, array, lang, parser,
		iconUtils) {

	var claz = declare('mui.dialog.Dialog', [ _DialogBase ], {

		element : null,

		title : '',

		buttons : [],

		callback : null,
		
		onDrawed : null,

		showClass : 'muiDialogElementShow',

		closeClass : 'mui-close mui',

		//是否需要关闭
		canClose : true,

		//是否需要滚动，需要滚动时必须解析
		scrollable : true,
		
		//是否需要解析
		parseable : false,

		// 弹出框内容加载完毕后调整位置
		loaded : function() {
			domStyle.set(this.containerNode, {
				'margin-top' : -(this.containerNode.offsetHeight/2) + 'px',
				'margin-left' : -(this.containerNode.offsetWidth/2) + 'px'
			});
		},

		buildRendering : function() {
			this.inherited(arguments);
			this.domNode = domConstruct.create('div', {
				className : 'muiDialogElement' + (this.showClass!=null?(" " +this.showClass):'' )
			}, document.body, 'last');

			this.containerNode = domConstruct.create('div', {
				className : 'muiDialogElementContainer'
			}, this.domNode);
			// 头部容器
			this.divNode = domConstruct.create('div', {
				className : 'muiDialogElementDiv'
			}, this.containerNode);

			// 标题节点
			this.titleNode = domConstruct.create('div', {
				className : 'muiDialogElementTitle',
				innerHTML : this.title
			}, this.divNode);

			
			if (this.canClose) {
				this.closeNode = iconUtils.setIcon(this.closeClass
						+ ' muiDialogElementClose', null, null, null,
						this.divNode);
				this.connect(this.closeNode, 'click', '_onClose');
			}
			
			// 内容节点
			this.contentNode = domConstruct.create('div', {
				className : 'muiDialogElementContent'
			}, this.containerNode);

			// 创建按钮节点
			if (this.buttons.length > 0) {
				this.buttonsNode = domConstruct.create('div', {
					className : 'muiDialogElementButtons'
				}, this.containerNode);

				this.buttonsDom = [];
				array.forEach(this.buttons, lang.hitch(this, function(item) {
					var btn = domConstruct.create('div', {
						className : 'muiDialogElementButton',
						innerHTML : item.title
					}, this.buttonsNode);
					this.buttonsDom.push(btn);
				}));
				this.connect(this.buttonsNode, 'click', '_onClick');
			}
			
			var _container = this.contentNode;
			var isParse = this.parseable;
			if (this.scrollable) {
				_container = domConstruct.create('div', {
					'data-dojo-type' : 'dojox/mobile/ScrollableView',
					'data-dojo-props' : 'scrollBar:true,height:\'100%\''
				}, this.contentNode);
				isParse = true;
			}
			domConstruct.place(this.element, _container);
			if(isParse){
				var self = this;
				parser.parse(this.contentNode).then(function(widgetList) {
					self.htmlWdgts = widgetList;
					self.loaded();
					if(self.onDrawed){
						self.onDrawed(self);
					}
				});
			}else{
				this.loaded();
				if(this.onDrawed){
					this.onDrawed(this);
				}
			}
			
		},

		_onClick : function(evt) {
			var target = evt.target;
			for (var i = 0; i < this.buttonsDom.length; i++) {
				if (target === this.buttonsDom[i]) {
					this.buttons[i].fn.call(window, this);
					if (this.callback)
						this.callback(window, this);
					break;
				}
			}
		},

		_onClose : function(evt) {
			if (this.callback)
				this.callback(window, this);
			this.hide();
		},

		show : function() {
			return this.inherited(arguments);
		},

		hide : function() {
			this.inherited(arguments);
			array.forEach(this.htmlWdgts,function(wdt){
				if(wdt && wdt.destroy){
					wdt.destroy();
				}
			});
			domConstruct.destroy(this.domNode);
			this.domNode = null;
			this.destroy();
		}
	});

	return {
		element : function(options) {
			var obj = new claz(options);
			return obj.show();
		}
	};

})
},
'sys/mobile/js/mui/fixed/FixedItem':function(){
define("mui/fixed/FixedItem", ["dojo/dom-construct", 'dojo/_base/declare',
				"dojo/dom-class", "dojo/dom-style", "dojo/topic",
				"dojo/_base/lang", "dijit/_WidgetBase", "dijit/_Contained",
				"dijit/_Container"], function(domConstruct, declare, domClass,
				domStyle, topic, lang, WidgetBase, Contained, Container) {
			return declare('mui.fixed.FixedItem', [WidgetBase, Contained,
							Container], {

						buildRendering : function() {
							this.inherited(arguments);
						},

						showNav : function() {

						},

						hideNav : function() {

						},

						startup : function() {
							if (this._started)
								return;
							this.inherited(arguments);
							// this.top = this.domNode.offsetTop;
						}
					});
		});
},
'sys/mobile/js/mui/header/Header':function(){
define( [ "dojo/_base/declare", "dojo/dom-style", "dojo/dom-class", "dijit/_WidgetBase",
		"dijit/_Contained", "dijit/_Container", "dojo/_base/array","dojo/_base/lang" ], 
	function(declare, domStyle, domClass, WidgetBase, Contained, Container, array, lang) {
	var header = declare("mui.header.Header", [ WidgetBase, Container,
			Contained ], {
		//默认自适应
		width : "100%",

		height : "",

		baseClass : "muiHeader",

		buildRendering : function() {
			this.inherited(arguments);
			if (this.width != '100%') {
				domStyle.set(this.domNode,{"width" : this.width});
			}
			if (this.height != '') {
				domStyle.set(this.domNode,{"height" : this.height});
			}
		},
		//加载
		startup : function() {
			this.inherited(arguments);
			this.changeChildDisplay();
		},

		//子对象处理
		changeChildDisplay : function() {
			array.forEach(this.getChildren(), lang.hitch(this,function(_weiget) {
				if(_weiget && _weiget.domNode){
					domClass.add( _weiget.domNode,"muiHeaderItem");
				}
			}));
		}
	});
	return header;
});
},
'sys/mobile/js/mui/category/CategoryScrollNav':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase" , "dojo/_base/array", "dojo/dom", "dojo/dom-construct" ,
          "dojo/dom-style" , "dojo/topic" , "mui/dialog/Tip" ], function(declare,
		WidgetBase, array, dom, domConstruct, domStyle, topic , Tip) {
			var nav = declare("mui.category.CategoryScrollNav", [ WidgetBase], {
				//高度参考dom元素,计算时使用此dom高度
				refrenceDom : null,
				
				//高度相对dom元素,计算时将减去此dom高度
				absoluteDom : null,
				
				baseClass : 'muiCateNav',
				
				//导航数据
				navDatas: [],
				
				//导航dom元素
				navItems :[],
				
				//对外事件对应的唯一标示
				key:null,
				
				buildRendering : function() {
					this.inherited(arguments);
					if(typeof(this.refrenceDom)=='string'){
						this.refrenceDom = dom.byId(this.refrenceDom);
					}
					if(typeof(this.absoluteDom)=='string'){
						this.absoluteDom = dom.byId(this.absoluteDom);
					}
					this.navDatas=[];
					this.navItems=[];
				},

				postCreate : function() {
					this.inherited(arguments);
					this.subscribe("/mui/view/resized","_resizeNav");
					this.subscribe("/mui/category/addNav","_addNavItem");
				},
				
				_resizeNav:function(srcObj){
					if(srcObj.key==this.key){
						domConstruct.empty(this.domNode);
						var height = this.refrenceDom.offsetHeight;
						var absH = 0;
						if(this.absoluteDom)
							absH = this.absoluteDom.offsetHeight;
						var _self = this;
						array.forEach(this.navDatas,function(txt,idx){
							if(txt!='2' && txt!='4'){
								var navItem = domConstruct.create('span',{"className":"muiCateNavItem",innerHTML:txt},_self.domNode);
								_self.connect(navItem,'click',function(){
									_self._ItemClick({label:txt,refHeight:height});
								});
								_self.navItems.push(navItem);
							}
						});
						if(this.navItems.length>0){
							domStyle.set(this.domNode,{
								'display':'block',
								'top':(this.refrenceDom.offsetTop + absH) +'px',
								'height':(height-absH) + 'px'});
							var toTop = domConstruct.create('span',{"className":"muiCateNavItem"},this.domNode,'first');
							var searchIcon = domConstruct.create('i',{"className":"mui mui-search"},toTop);
							this.connect(toTop,'click','_toTop');
							this.navItems.push(toTop);
							var tmpH = 18;
							if(this.navItems.length>20)
								tmpH = Math.floor((height-absH)/this.navItems.length) ;
							domStyle.set(searchIcon,{'font-size': '12px'});
							domStyle.set(searchIcon,{'height': tmpH + 'px'});
							domStyle.set(searchIcon,{'line-height': tmpH + 'px'});
							array.forEach(this.navItems,function(item){
								domStyle.set(item,{'height':tmpH + 'px','line-height':tmpH + 'px','font-size':'12px'});
							});
						}else{
							domStyle.set(this.domNode,{'display':'none'});
						}
						this.navDatas = [];
						this.navItems = [];
					}
				},
				
				_ItemClick:function(evt){
					Tip.tip({text:evt.label,time:900});
					this.defer(function(){
						topic.publish("/mui/cate/navTo",this,evt);
					},200);
				},
				
				_toTop:function(evt){
					this.defer(function(){
						topic.publish("/mui/view/scrollTo",this);
					},200);
				},
				
				_addNavItem:function(srcObj,evt){
					if(srcObj.key==this.key){
						if(evt && evt.label){
							this.navDatas.push(evt.label);
						}
					}
				},
					
				startup : function() {
					if (this._started) {
						return;
					}
					this.inherited(arguments);
				}
				
			});
			return nav;
});
},
'sys/mobile/js/mui/person/PersonList':function(){
/**人员列表(简单形式,只显示一排,多余的用省略号替代) **/
define([
    "dojo/_base/declare", 
    "dijit/_WidgetBase",
    "dijit/_TemplatedMixin",
    "dojo/_base/array",
    "dojo/text!./person_list.html",
    "dojo/request",
    'dojo/query',
    'dojo/dom-geometry',
    'dojo/dom-construct',
    'dojo/dom-style',
    "dojox/mobile/TransitionEvent",
    'mui/util',
    'mui/person/PersonDetailMixin'
    ],function(declare,WidgetBase,_TemplatedMixin,array,template,request,query,domGeometry,domConstruct,domStyle,TransitionEvent,util,PersonDetailMixin){
	
	return declare("mui.person.PersonList", [WidgetBase,_TemplatedMixin,PersonDetailMixin], {
		
		personId:null,
		defaultUrl:'/sys/organization/mobile/address.do?method=personList',
		
		//简要列表属性
		title:'',
		url:'',
		templateString:template,
		
		total:0,
		
		buildRendering : function(){
			this.inherited(arguments);
			if(this.personId && !this.url){
				this.url=this.defaultUrl+'&personId='+this.personId;
			}
		},
		
		startup:function(){
			this._request({});
			this._bindEvent();
			if(!this.title) {
				domConstruct.destroy(this.personListTitleNode);
			}
		},
		
		//请求
		_request:function(queryData){
			var self=this;
			if(this.url){
				var _allWidth=query('.personList',this.domNode)[0].offsetWidth,
				_itemWidth=domGeometry.getMarginSize(query('.personMore',this.domNode)[0]).w;
				var count = parseInt(_allWidth/_itemWidth) - 1;
				queryData.count = count;
				queryData.rowsize = count;
				request
					.post(util.formatUrl(this.url), {handleAs : 'json',data : queryData})
					.response
					.then(function(datas) {
						if(datas.status=='200'){
							self._render(datas);
						}
				});
			}
		},
		
		//渲染
		_render:function(datas){
			var data=datas.data;
			var more = 0;
			if(data && data.list){
				this._buildingDom(data.list);
				if(data.total){
					this.total=data.total;
				}
				more=this.total-data.list.length;
			} else if(data && data.page) {
				this.total = data.page.totalSize;
				var dataList =  this.formatDatas(data.datas);
				this._buildingDom(dataList);
				more= this.total - dataList.length;
			}
			if(more> 0){
				query('.personMore',this.domNode)[0].style.display='';
			}else{
				query('.personMore',this.domNode)[0].style.display='none';
			}
			if(this.title) {
				query('.personTotal',this.domNode)[0].innerHTML=this.total;
			}
		},
		
		//生成人物头像节点
		_buildingDom:function(list){
			for(var i=0;i<list.length;i++){
				var staffCell=domConstruct.create('div',{className:'staffCell'},this.personListNode);
				domConstruct.create('img',{src:list[i].src},staffCell);
				domConstruct.create('span',{className:'name',innerHTML:list[i].name},staffCell);
			}
		},
		
		_bindEvent:function(){
			//更多按钮事件绑定
			if(this.personMoreNode)
				this.connect(this.personMoreNode, 'click','onMoreClick');
		},
		
		onMoreClick:function(){
			if(this.moveTo){//切换到指定view页面
				var opts = {
					transition : 'slide',
					moveTo:this.moveTo
				};
				new TransitionEvent(this.personMoreNode,  opts ).dispatch();
			}else if(this.href){//跳到自定义页面或者 javascript:
				location.href = util.formatUrl(this.href);
			}else if(this.detailUrl){//切换到默认人员详情页面
				this.openDeatailView();
			}
		},
		
		
		formatDatas : function(datas) {
			var dataed = [];
			for (var i = 0; i < datas.length; i++) {
				var datasi = datas[i];
				dataed[i] = {};
				for (var j = 0; j < datasi.length; j++) {
					dataed[i][datasi[j].col] = datasi[j].value;
				}
			}
			return dataed;
		}
		
	});
	
});
},
'sys/mobile/js/mui/datetime/DatePicker':function(){
define([ "dojo/_base/declare", "dojox/mobile/SpinWheelDatePicker" ], function(
		declare, SpinWheelDatePicker) {
	var claz = declare("mui.datetime.DatePicker", [ SpinWheelDatePicker ], {
		yearPattern: "yyyy年",

		monthPattern: "MM月",

		dayPattern: "dd日"
	});
	return claz;
});
},
'sys/mobile/js/mui/device/kkapi':function(){
/*
 * 用于KK客户端对应功能接口调用
 */
define(['dojo/topic','dojo/_base/lang','mui/device/kk/attachment','mui/mime/mime'],function(topic, lang, Attachment, mime) {
	var kkApi = {
		_cacheId : 0,
		
		_cachePrefix : '_device_context_',
		
		_caches : {},
		
		_generateCacheId:function(){
			this._cacheId = this._cacheId + 1;
			return this._cachePrefix + this._cacheId;
		},
		
		/******************************************************
		 * ‘device_’开头函数为客户端调用js接口函数
		 *****************************************************/
		/*
		 * 功能：执行对应方法
		 * 参数：
		 * 		cacheId     缓存ID  客户端通过prompt第一个参数中获取cacheId信息
		 * 		methodName	方法名
		 *		params		方法对应传递参数
		 * 返回值：
		 * 		无
		 */
		device_execute : function(cacheId, methodName, params) {
			if(this._caches[cacheId]!=null){
				this._caches[cacheId][methodName](cacheId, params);
			}
		},
		
		
		/*******************************************************
		 * kk对外接口
		 * 参数：
		 * 		signStr   功能特性标识
		 *      cacheObj  功能对应参数信息
		 * 返回值：
		 *      prompt返回的字符串为json类型的格式信息，信息对应如下：
		 *	{
		 *    status:-1/0/1             -1：不支持该功能特性。   0：调用失败。  1：调用成功。
		 *    message:string/json/null  当status为-1时，返回空。
		 *								当status为0时，返回错误信息。
		 *								当status为1时成功，返回调用后所需信息，由具体接口处理 
		 *	}
		 *	处理后的返回值为，成功后的返回信息或空值
		 ******************************************************/
		 _appCallback:function(signStr , cacheObj){
			var cacheId = this._generateCacheId();
			var apiUrl = "kkapi://" + signStr ;
			var extArgu = '';
			if(cacheObj!=null){
				this._caches[cacheId] = cacheObj;
				apiUrl += "?cacheId=" + cacheId;
				extArgu = this._formatArgu(cacheObj);
			}
			var rtnStr = window.prompt(apiUrl , extArgu);
			if(rtnStr!=null && rtnStr!=''){
				var rtnObj = this._formatJson(rtnStr);
				if(rtnObj.status == 1){
					if(window.console){
						window.console.log(signStr + '调用成功，返回信息为：' + rtnObj.message);
					}
					return {result:rtnObj.message};
				}else if(rtnObj.status == 0){
					if(window.console){
						window.console.error(signStr + '调用失败，错误信息为：' + rtnObj.message);
					}
					this._clearCache(cacheId);
				}else if(rtnObj.status == -1){
					if(window.console){
						window.console.error(signStr + '接口，当前客户端暂不支持。');
					}
					this._clearCache(cacheId);
				}
			}
			return null;
		},
		/*******************************************************
		 * json字符串转化为json对象
		 * 参数：
		 * 		jsonStr    json格式字符串
		 * 返回值：
		 *      json对象或数组。
		 ******************************************************/
		_formatJson:function(jsonStr){
			var rtnObj = null;
			if(window.JSON){
				rtnObj = JSON.parse(jsonStr);
			}else if(rtnStr.parseJSON){
				rtnObj = jsonStr.parseJSON();
			}else{
				rtnObj = eval("(" + jsonStr + ")");
			}
			return rtnObj;
		},
		/*******************************************************
		 * json对象转化为url参数格式
		 * 参数：
		 * 		jsonObj    json对象
		 * 返回值：
		 *      url参数格式的字符串
		 ******************************************************/
		_formatArgu:function(jsonObj){
			var extArgu = '';
			for(var key in jsonObj){
				if(typeof(jsonObj[key])=='string'){
					extArgu += "&" + key + '=' +  window.encodeURIComponent(jsonObj[key]);
				}else if(typeof(jsonObj[key])=='array'){
					var vlas = jsonObj[key];
					for(var i =0;i<vlas.length;i++){
						extArgu += "&" + key + '=' + window.encodeURIComponent(vlas[i]);
					}
				}else if(typeof(jsonObj[key])=='function'){//do nothing
				}else{
					extArgu += "&" + key + '=' +  window.encodeURIComponent(jsonObj[key]);
				}
			}
			return extArgu;
		},
		/*
		 * 功能：清理缓存
		 * 参数：
		 * 		cacheId     缓存ID
		 * 返回值：
		 * 		无
		 */
		_clearCache : function(cacheId){
			if(this._caches[cacheId]!=null){
				delete this._caches[cacheId];
			}
		},
		
		/*
		 * 功能：	
		 * 			关闭appView页面
		 * 参数说明：
		 * 			无参
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		closeWindow : function(){
			return this._appCallback("closeWindow");
		},
		/*
		 * 功能：	
		 * 			显示隐藏banner
		 * 参数说明：
		 * 			isShow 	是否显示
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 * 
		 */
		showTitleBar:function(isShow){
			return this._appCallback("showTitleBar",{'show':isShow});
		},
		/*
		 * 功能：	
		 * 			是否可返回
		 * 参数说明：
		 * 			无参
		 * 返回说明：
		 * 			是否可进行返回操作，为空表示无此特性或调用出错，true表示支持，false表示不支持
		 */
		_canGoBack : function(){
			var res = this._appCallback("canGoBack");
			if(res!=null)
				return res.result;
			 return null;
		},
		/*
		 * 功能：	
		 * 			返回
		 * 参数说明：
		 * 			无参
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		goBack : function(){
			var rtn = null;
			var canBack = this._canGoBack();
			if(canBack == true){		//可后退
				rtn = this._appCallback("goBack");
			}else if(canBack == false){	//不可后退
				rtn = this.closeWindow();
			}else{ 						//功能不支持
				rtn = null;
			}
			return rtn;
		},
		/*
		 * 功能：	
		 * 			前进
		 * 参数说明：
		 * 			无参
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		goForward : function(){
			return this._appCallback("goForward");
		},
		/*
		 * 功能：	
		 * 			获取当前用户ID即登陆名
		 * 参数说明：
		 * 			无参
		 * 返回说明：
		 * 			当前用户名称，为空表示无此特性或调用出错
		 */
		getUserID : function(){
			var res = this._appCallback("getUserID");
			if(res!=null)
				return res.result;
			 return null;
		},
		
		_select : function(feature, context){
			if(window.console){
				window.console.log(feature + ' begin..');
			}
			var attSetting = context.options;
			if(!window.AttachmentList)
				window.AttachmentList = {};
			var attachmentObj = window.AttachmentList[attSetting.fdKey];
			if(!attachmentObj){
				attachmentObj = new Attachment(attSetting);
				window.AttachmentList[attSetting.fdKey] = attachmentObj;
			}
			var _self = this;
			this._appCallback(feature , {
				"complete":function(cacheId,files){
					var uploadingFiles = files;
					if(typeof(files)=='string'){
						uploadingFiles = _self._formatJson(files);
					}
					if(window.console){
						window.console.log(feature + " complete cacheId = "+cacheId+",files=" + files );
					}
					if(lang.isArray(uploadingFiles)){
						for ( var i = 0; i < uploadingFiles.length; i++) {
							if(feature=="openCamera" || feature=="selectFile"){
								uploadingFiles[i].href = _self.readAsDataURL(uploadingFiles[i]);
							}
							attachmentObj.startUploadFile(uploadingFiles[i]);
						}
					}else{
						if(feature=="openCamera" || feature=="selectFile"){
							uploadingFiles.href = _self.readAsDataURL(uploadingFiles);
						}
						attachmentObj.startUploadFile(uploadingFiles);
					}
					_self._clearCache(cacheId);
				},
				"cancel":function(cacheId){
					_self._clearCache(cacheId);
				},
				"error":function(cacheId , msg){
					attachmentObj.uploadError(null,{rtn:{'status':'-1','msg':'附件错误:' + msg}});
					_self._clearCache(cacheId);
				}
			});
			return {};
		},
		/*
		 * 功能：	
		 * 			打开语音
		 * 参数说明：
		 * 		options
		 * 			{
		 *				"complete":function //必须参数,用于语音完毕后回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *													fileInfo：文件相关信息（json格式字符串）
		 *				"cancel":function   //必须参数，用于语音取消回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function   //必须参数，用于语音错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		openSpeech:function(context){
			return this._select("openSpeech",context);
		},
		
		/*
		 * 功能：	
		 * 			打开相机
		 * 参数说明：
		 * 			{
		 *				"complete":function //必须参数,用于相机拍摄完毕回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *													fileInfo：图片文件相关信息（json格式字符串）
		 *				"cancel":function   //必须参数，用于拍摄取消时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function   //必须参数，用于拍摄过程错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		openCamera:function(context){
			 return this._select("openCamera",context);
		},
		
		/*
		 * 功能：	
		 * 			选择附件
		 * 参数说明：
		 * 		options
		 * 			{
		 *				"complete":function //必须参数,用于选择文件完毕后回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *													files：图片文件相关信息（json格式数组）
		 *                                                  	size, name, type, fullpath, lastModifiedDate
		 *				"cancel":function   //必须参数，用于取消文件选择时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function   //必须参数，用于选择文件过程错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		selectFile:function(context){
			return this._select("selectFile",context);
		},
		
		/*
		 * 功能：	
		 * 			上传指定标识附件
		 * 参数说明：
		 * 			options
		 *{
		 *				"filepath"：string,	//必须参数，附件路径
		 *				"userkey":token,	//必须参数，附件上传必须参数
		 *				"uploadurl":string,	//必须参数，附件上传URL
		 *				"complete":function //必须参数，用于附件上传完毕后回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *                                                  filekey:附件标示，由服务器上传后返回
		 *													file：附件信息（json格式字符串, size, name, type, fullpath, lastModifiedDate）
		 *				"progress":function //必须参数，返回进度信息.
		 *									//接受参数：		cacheId：缓存ID
		 *                                                  loaded:附件已上传数
		 *                                                  file：附件信息（json格式字符串: size, name, type, fullpath, lastModifiedDate）
		 *				"cancel":function   //必须参数，用于附件取消上传后回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function   //必须参数，用于附件上传错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 *}
		 * 			
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		uploadFile:function(file, uploadurl, userKey, successFun, progressFun, errorFun){
			var self = this;
			return this._appCallback("uploadFile" , {
				"filepath" : file.fullpath,
				
				"userkey" : userKey,
				
				"uploadurl" : uploadurl,
				
				"complete" : function(cacheId ,fileInfo){
					if(window.console){
						window.console.log("UploadFile complete cacheId="+cacheId+",fileInfo=" + fileInfo );
					}
					var fileJson = self._formatJson(fileInfo);
					if(successFun)
						successFun(fileJson);
					self._clearCache(cacheId);
				},
				"progress" : function(cacheId ,loaded){
					if(progressFun)
						progressFun(loaded);
				},
				"cancel" : function(cacheId){
					self._clearCache(cacheId);
				},
				"error" : function(cacheId , msg){
					if(errorFun){
						errorFun({
							rtn:{'status':'-1','msg':'附件上传错误:' + msg}
						});
					}
					if(window.console){
						window.console.error("UploadFile Error:" + msg );
					}
					self._clearCache(cacheId);
				}
			});
		},
		
		/*
		 * 功能：	
		 * 			播放语音
		 * 参数说明：
		 * 			options
		 * 			{
		 *				"downloadurl":string//语音播放地址
		 *				"complete":function //必须参数，用于语音播放完毕后回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *													fileInfo：附件相关信息（json格式字符串）
		 *				"cancel":function   //必须参数，用于语音播放取消后回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function    //必须参数，用于语音播放错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		playSpeech:function(voiceUrl){
			var _self = this;
			this._appCallback("playSpeech",{
				downloadurl: voiceUrl,
				complete:function(cacheId){
					_self._clearCache(cacheId);
				},
				cancel:function(cacheId){
					_self._clearCache(cacheId);
				},
				error:function(cacheId, msg){
					if(window.console)
						window.console.error("语音播放错误:" + msg);
					_self._clearCache(cacheId);
				}
			});
			return {};
		},
		/*
		 * 功能：	
		 * 			播放图片
		 * 参数说明：
		 * 			options
		 * 			{
		 *				"curSrc":string		//当前展示图片地址
		 *				"srcList":[string]  //所有图片列表
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		 //	imagePreview:function(options){
		 //		return this._appCallback("imagePreview" , options); 
		 //	},
		/*
		 * 功能：	
		 * 			截取屏幕
		 * 参数说明：
		 * 			options
		 * 			{
		 *				"complete":function //必须参数，用于截屏完毕后回调。
		 *									//接受参数：		cacheId：缓存ID		
		 *													src：截屏后的图片地址
		 *				"cancel":function   //必须参数，用于截屏取消后回调
		 *									//接受参数：		cacheId：缓存ID	
		 *				"error":function    //必须参数，用于语音播放错误时回调
		 *									//接受参数：		cacheId：缓存ID	
		 *													msg:错误信息
		 * 			}
		 * 返回说明：
		 * 			返回调用信息，为空表示无此特性或调用出错
		 */
		captureScreen:function(callback){
			 var _self = this;
			 this._appCallback("captureScreen",{
					complete:function(cacheId, fileInfo){
						var uploadingFile = fileInfo;
						if(typeof(fileInfo)=='string'){
							uploadingFile = _self._formatJson(fileInfo);
						}
						var rtn = _self.readAsDataURL({'fullpath':uploadingFile["src"]});
						if(rtn){
							callback(rtn);
						}
						_self._clearCache(cacheId);
					},
					cancel:function(cacheId){
						_self._clearCache(cacheId);
					},
					error:function(cacheId, msg){
						if(window.console)
							window.console.error("截屏出错:" + msg);
						_self._clearCache(cacheId);
					}
				});
			 return {};
		},
		
		/*
		 * 功能：	
		 * 			图片转义为dataURL信息
		 * 参数说明：
		 * 			options
		 * 			{
		 *				fullpath：“”   图片位于手机的路径信息
		 * 			}
		 * 返回说明：
		 * 			返回图片base64信息,格式：
		 *{
		 *	  status:-1/0/1             -1：不支持该功能特性。   0：调用失败。  1：调用成功。
		 *    message:string/json/null  当status为-1时，返回空。
		 *								当status为0时，返回错误信息。
		 *								当status为1时成功，返回图片base64字符信息。
		 *}
		 */
		readAsDataURL:function(file){
			var rtn = this._appCallback("readAsDataURL" , file);
			if(rtn!=null){//检查
				var base64Url = rtn.result;
				var fileType = mime.getMime(file['fullpath']);
				if(fileType!=null && fileType!=''){
					base64Url = "data:" + fileType+ ";base64," + base64Url;
				}else{
					base64Url = "data:image/jpeg;base64," + base64Url;
				}
				return base64Url;
			}
			return null;
		}
	};
	window.kkApi = kkApi;
	return kkApi;
});

},
'sys/mobile/js/mui/form/Radio':function(){
define([ "dojo/_base/declare", "dojo/query", "dojo/dom-class",
		"mui/form/_OptionsBase", "dojo/dom-construct", "dojo/topic",
		"dojo/_base/lang", "dojo/dom-style" ], function(declare, query,
		domClass, _OptionsBase, domConstruct, topic, lang, domStyle) {
	var _field = declare("mui.form.Radio", [ _OptionsBase ], {

		valueField : null,

		// 与标准html属性重名会出问题
		// name : null,

		opt : false,

		edit : true,

		type : 'radio',

		checked : false,

		checkedClass : 'muiFormRadioChecked',

		RADIO_CHANGE : 'mui/form/radio/change',

		checkedIcon : 'mui-radio-checked',
		unCheckedIcon : 'mui-radio-unchecked',

		_buildValue : function() {
			// 多选外部容器
			this.radioNode = domConstruct.create('div', {
				className : 'muiFormRadio'
			}, this.fieldOptions, 'first');
			// 多选遮罩
			this.overlay = domConstruct.create('div', {
				className : 'muiFormRadioOverlay mui ' + this.unCheckedIcon
			}, this.radioNode, 'last');
			domConstruct.place(this.domNode, this.radioNode, 'last');
			this.inherited(arguments);
		},

		checkedChange : function(obj, evt) {
			if (!evt)
				return;
			if (evt.name == this.name && obj != this)
				this.set('checked', false);
		},

		_setCheckedAttr : function(checked) {
			this.inherited(arguments);
			if (this.checked) {
				domClass.replace(this.overlay, this.checkedIcon,
						this.unCheckedIcon);
				topic.publish(this.RADIO_CHANGE, this, {
					name : this.name
				});
			} else
				domClass.replace(this.overlay, this.unCheckedIcon,
						this.checkedIcon);
		},

		_onClick : function(evt) {
			if (!this.fireClick())
				return;
			this.set('checked', true);
		},

		buildEdit : function() {
			this.connect(this.fieldOptions, 'click', '_onClick');
			this.subscribe(this.RADIO_CHANGE, lang.hitch(this,
					this.checkedChange));
		},

		buildHidden : function() {
			domStyle.set(this.domNode, {
				display : 'none'
			});
		},

		buildReadOnly : function() {
			domStyle.set(this.domNode, {
				readOnly : 'readOnly'
			});
		},

		buildView : function() {
			this.buildReadOnly();
		},

		viewValueSet : function(value) {
			this.domNode.value = value;
		},

		editValueSet : function(value) {
			this.viewValueSet(value);
		},

		hiddenValueSet : function(value) {
			this.viewValueSet(value);
		},

		readOnlyValueSet : function(value) {
			this.viewValueSet(value);
		}
	});
	return _field;
});
},
'sys/mobile/js/mui/calendar/CalendarBottom':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase",
				"mui/calendar/base/CalendarScrollable",
				"dojo/text!./tmpl/calendar_bottom.html", "dojo/date",
				"dojo/date/locale", "dojo/string", "dojo/dom-construct",
				"dojo/dom-style", "dojo/dom-geometry", "dojo/query",
				"dijit/registry", "mui/calendar/_BottomEventMixin" ],
		function(declare, _WidgetBase, CalendarScrollable, template, dateClaz,
				locale, string, domConstruct, domStyle, domGeometry, query,
				registry, _BottomEventMixin) {
			var claz = declare(
					"mui.calendar.CalendarBottom",
					[ _WidgetBase, CalendarScrollable, _BottomEventMixin ],
					{
						templateString : template,

						dateNode : null,

						y2mNode : null,

						weekNode : null,

						compNode : null,

						reparent : function() {
							this.tmplNode = domConstruct.create('div');
							var i, idx, len, c;
							var domNode = this.srcNodeRef;
							for (i = 0, idx = 0,
									len = domNode.childNodes.length; i < len; i++) {
								c = domNode.childNodes[idx];
								domConstruct.place(c, this.tmplNode, 'last');
							}
						},

						buildRendering : function() {
							this.reparent();
							this.inherited(arguments);
							domConstruct.place(this.tmplNode, this.domNode,
									'last');
							this.subscribe(this.VALUE_CHANGE, 'nodeChange');
							this.subscribe('/mui/calendar/contentComplete',
									'contentComplete');
							this.subscribe('/mui/calendar/weekComplete',
									'weekComplete');
							this.subscribe('/mui/calendar/headerComplete',
									'headerComplete');
							this.subscribe('/mui/calendar/viewComplete',
									'viewComplete');
						},

						resize : function() {
							var viewNode = query('.mblView', this.domNode)[0];
							domStyle
									.set(
											viewNode,
											'height',
											this.getScreenHeight()
													- (viewNode.offsetTop
															- this.headerHeight - this.contentHeight)
													- this.headerHeight
													- this.weekHeight
													- this.fixedHeaderHeight
													- this.fixedFooterHeight
													+ 'px')
						},

						contentComplete : function(obj, evt) {
							this.contentHeight = evt.height;
						},

						viewComplete : function(obj, evt) {
							this.fixedHeaderHeight = evt.fixedHeaderHeight;
							this.fixedFooterHeight = evt.fixedFooterHeight;
						},
						weekComplete : function(obj, evt) {
							this.weekHeight = evt.height;
						},

						headerComplete : function(obj, evt) {
							this.headerHeight = evt.height;
						},

						nodeChange : function(evt) {
							if (!evt)
								return;
							var date = evt.currentDate,
								dayHTML= date.getDate() > 9? date.getDate() : '0'+date.getDate(),
								monthHTML=	date.getMonth() + 1 >9 ? date.getMonth() + 1: '0'+ (date.getMonth() + 1);
							this.dateNode.innerHTML =dayHTML;
							this.y2mNode.innerHTML = date.getFullYear() + '.' + monthHTML;
							this.dayNames = locale.getNames('days', 'wide',
									'standAlone');
							this.weekNode.innerHTML = this.dayNames[date
									.getUTCDay()];
							var comp = dateClaz.difference(date, null, "day"), absComp = Math
									.abs(comp);
							if (comp > 0)
								absComp += '天前';
							else if (comp == 0)
								absComp = '今天';
							else
								absComp += '天后';
							this.compNode.innerHTML = absComp;
						}
					});
			return claz;
		});
},
'sys/mobile/js/mui/panel/Content':function(){
define("mui/panel/Content", [ "dojo/dom-construct", 'dojo/_base/declare',
		"dojo/dom-class", "dojo/dom-style", "dojo/topic", "dojo/_base/lang",
		"dijit/_WidgetBase", "dijit/_Contained", "dijit/_Container",
		"dojo/_base/array" ], function(domConstruct, declare, domClass,
		domStyle, topic, lang, WidgetBase, Contained, Container, array) {
	return declare('mui.panel.Content', [ WidgetBase, Contained, Container ], {

		title : '',

		icon : '',

		baseClass : 'muiAccordionPanelContent',

		toggle : true,

		expand : true,

		// 是否初始化
		inited : false,

		// 是否初始化内容
		loaded : false,

		hasChild : true,

		buildRendering : function() {
			this.domNode = this.containerNode = this.srcNodeRef
					|| domConstruct.create('div', {
						className : 'muiAccordionPanelContent'
					});
			this.inherited(arguments);

		},

		postscript : function() {
			this.inherited(arguments);
		},

		startup : function() {
			if (this._started)
				return;
			this.inherited(arguments);
		},

		// 加载内容
		initContent : function() {
			if (this.inited)
				return;
			var children = this.getChildren();
			// 内部无mobile组件
			if (children.length == 0) {
				this.set('hasChild', false);
				if (this.expand)
					this.show();
				return;
			}
			this.content = children[0];
			this.expand = this.content.lazy ? false : true;
			this.loaded = this.expand;
			this.inited = true;
			if (this.expand)
				this.show();
		},

		reload : function() {
			if (this.loaded)
				return;
			var content = this.content;
			if (content.reload)
				content.reload();
			this.loaded = true;
		},

		hide : function() {
			domStyle.set(this.domNode, 'opacity', 0);
			this.defer(function() {
				domStyle.set(this.domNode, 'display', 'none');
				this.expand = false;
			}, 200);

		},

		show : function() {
			if (this.reload && !this.loaded && this.hasChild)
				this.reload();
			domStyle.set(this.domNode, {
				'display' : 'block',
				'opacity' : 1
			});
			this.expand = true;
		}

	});
});
},
'sys/mobile/js/mui/list/TextItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"mui/list/item/TextItemMixin"
	], function(declare, _TemplateItemListMixin, TextItemMixin) {
	
	
	return declare("mui.list.TextItemListMixin", [_TemplateItemListMixin], {
		
		itemTemplateString : null,

		itemRenderer : TextItemMixin
	});
});
},
'sys/mobile/js/mui/rtf/_ImageGlobalResizeMixin':function(){
define(
		[ "dojo/_base/declare", "mui/rtf/_ImageResizeMixin", "dojo/_base/array" ],
		function(declare, _ImageResizeMixin, array) {

			return declare("mui.rtf._ImageGlobalResizeMixin",
					_ImageResizeMixin, {
						initSrcList : function() {
							var w = window;
							if (!w.RtfImages)
								w.RtfImages = {};
							if (!w.RtfImages[this.channel]) {
								w.RtfImages[this.channel] = [];
							}
							this.srcs = [];
						},

						addSrcList : function(src) {
							this.srcs.push(src);
							window.RtfImages[this.channel].push(src);
						},

						getSrcList : function() {
							return window.RtfImages[this.channel];
						},

						emptySrcList : function() {
							array.forEach(this.srcs, function(src, index) {
								window.RtfImages[this.channel] = array.filter(
										window.RtfImages[this.channel],
										function(i) {
											return i != src
										});
							}, this);
							this.srcs.length = 0;
						}
					});

		});
},
'sys/mobile/js/mui/top/_TopViewMixin':function(){
define( [ "dojo/_base/declare", 'dojo/topic', 'dojo/dom-style',
		"dojo/_base/lang" ], function(declare, topic, domStyle, lang) {
	return declare("mui.list._TopViewMixin", null, {
		adjustDestination : '/mui/list/adjustDestination',

		listTop : '/mui/list/toTop',

		toTop : function(evt) {
			topic.publish(this.listTop , this);
		},

		connectToggle : function() {
			this.subscribe(this.adjustDestination, lang.hitch( function(srcObj, to, pos, dim) {
				var beShow = to.y < -5 && ((dim!=null && dim.c.h >= dim.d.h) || dim==null);
				if (beShow && !this._show)
					this.show();

				if (!beShow && this._show)
					this.hide();
			}));
		}
	});
});
},
'sys/mobile/js/mui/form/editor/plugins/EditorPluginBaseMixin':function(){
define(
		[ "dojo/_base/declare", "dijit/_WidgetBase", "dojo/dom-style",
				"dojo/topic", "dojo/dom-class" ],
		function(declare, WidgetBase, domStyle, topic, domClass) {

			return declare(
					"mui.form.editor.plugins.EditorPluginBaseMixin",
					[ WidgetBase ],
					{
						EVENT_PLUGIN_CLICK : '/mui/editor/plugin/click',
						selectedClass : 'muiEditorPluginSelected',

						constructor : function() {
							this.subscribe(this.EVENT_PLUGIN_CLICK, '_unclick');
							this._isShow = false;
						},

						show : function() {
							topic.publish(this.EVENT_PLUGIN_CLICK, this, {
								target : this.iconNode
							});
							domClass.add(this.iconNode, this.selectedClass);
						},

						hide : function() {
							domClass.remove(this.iconNode, this.selectedClass);
							this._isShow = false;
						},

						_unclick : function(obj, evt) {
							if (!evt)
								return;
							var target = evt.target;
							if (!this.iconNode || target == this.iconNode)
								return;
							this.hide();
						},

						/*******************************************************
						 * 重复点击控制
						 ******************************************************/
						_faceHoldTime : 250,

						_faceLastTime : null,

						_faceFireClick : function(evt) {
							var time = this._faceLastTime;
							this._faceLastTime = new Date().getTime()
							if (time
									&& this._faceLastTime - time <= this._faceHoldTime)
								return false;
							return true;
						}
					});
		});
},
'sys/mobile/js/mui/category/CategoryNavInfo':function(){
define( [ "dojo/_base/declare", "dijit/_WidgetBase" , "dojo/_base/array", "dojo/dom", "dojo/dom-construct" ,
          "dojo/dom-style" , "dojo/topic" , "mui/dialog/Tip" ], function(declare,
		WidgetBase, array, dom, domConstruct, domStyle, topic , Tip) {
			var navInfo = declare("mui.category.CategoryNavInfo", [ WidgetBase], {
				
				baseClass : 'muiCateNavInfo',
				
				key : null, 
				
				top : null,
					
				buildRendering : function() {
					this.inherited(arguments);
					this.cateContainer = domConstruct.create("div",{className:"muiCateContainer"},this.domNode);
					this.titleNode = domConstruct.create('div', {
							'className' : 'muiCateName muiCateTitle'
							}, this.cateContainer);
					domStyle.set(this.domNode,{display:'none'});
				},

				postCreate : function() {
					this.inherited(arguments);
					this.subscribe("/mui/category/navChange","_changeNavInfo");
					this.subscribe("/mui/search/submit",function(){
						domStyle.set(this.domNode,{top:'0px'});
					});
					this.subscribe("/mui/search/cancel",function(){
						domStyle.set(this.domNode,{top:this.top});
					});
				},
				
				startup : function() {
					if (this._started) {
						return;
					}
					this.inherited(arguments);
					if(!this.top){
						var prvNode = this.getPrevNode(this.domNode);
						if(prvNode){
							this.top = prvNode.offsetHeight + "px";
						}else{
							this.top = "0px";
						}
					}
					domStyle.set(this.domNode,{top:this.top});
				},
				
			    getPrevNode: function(node) {
		            var tempFirst = node.parentNode.firstChild;
		            if (node == tempFirst) return null;
		            var tempObj = node.previousSibling;
		            while (tempObj.nodeType != 1 && tempObj.previousSibling != null) {
		                tempObj = tempObj.previousSibling;
		            }
		            return (tempObj.nodeType==1)? tempObj:null;
		        },    
				
				_changeNavInfo:function(srcObj,evt){
					if(srcObj.key == this.key){
						if(evt){
							this.titleNode.innerHTML = evt.label;
							domStyle.set(this.domNode,{display:'block'});
						}else{
							this.titleNode.innerHTML = '';
							domStyle.set(this.domNode,{display:'none'});
						}
					}
				}
			});
			return navInfo;
});
},
'sys/mobile/js/mui/list/item/TextItemMixin':function(){
define(	["dojo/_base/declare", "dojo/dom-construct", "dojo/dom-class",
				"dojo/dom-style", "dojo/dom-attr", "dojox/mobile/_ItemBase",
				"dojox/mobile/iconUtils", "mui/util", "./_ListLinkItemMixin"],
		function(declare, domConstruct, domClass, domStyle, domAttr, ItemBase,
				iconUtils, util, _ListLinkItemMixin) {
			var item = declare("mui.list.item.TextItemMixin", [ItemBase,
							_ListLinkItemMixin], {

						// 标题
						label : '',
						// 文档附件类型
						icon : '',
						// 创建时间
						created : '',
						// 创建者
						creator : '',
						
						tag : 'li',

						leftIcon : '',
						rightIcon : '',

						inheritParams : function() {
							if (this.icon)
								this.set('rightIcon', this.icon);
						},

						buildRendering : function() {
							this._templated = !!this.templateString;
							if (!this._templated) {
								this.domNode = this.containerNode = this.srcNodeRef
										|| domConstruct.create(this.tag, {
											className : 'muiTextItem'
										});
								this.contentNode = domConstruct.create(
										'div', {
											className : 'muiListItem'
										}, this.domNode);
							}
							this.inherited(arguments);

							if (!this._templated)
								this.buildInternalRender();
						},

						buildInternalRender : function() {

							this.titleNode = domConstruct.create('a', null,
									this.contentNode);
							if (this.leftIcon) {
								domClass.add(this.contentNode, 'muiTextItemL');
								iconUtils.setIcon(this.leftIcon, null,
										this.leftIconNode, null, this.contentNode);
							}

							if (this.label) {
								this.labelNode = domConstruct.create('span', {
											'innerHTML' : this.label,
											'className' : 'muiSubject'
										}, this.titleNode);
							}

							if (this.rightIcon)
								iconUtils.setIcon(this.rightIcon, null,
										this.rightIconNode, null,
										this.titleNode);

							if (this.href) {
								this.makeLinkNode(this.titleNode);
							}

							this.otherNode = domConstruct.create('p', {
										className : 'muiListInfo'
									}, this.contentNode);

							if (this.creator) {
								this.creatorNode = domConstruct.create('div',
										{
											'innerHTML' : this.creator,
											'className' : 'muiAuthor muiTextCreator'
										}, this.otherNode);
							}

							if (this.created) {
								this.createdNode = domConstruct.create('div',
										{
											'innerHTML' : '<i class="mui mui-todo_date"></i>' + this.created,
											'className' : 'muiTextCreated'
										}, this.otherNode);
							}

						},

						startup : function() {
							if (this._started) {
								return;
							}
							this.inherited(arguments);
						},

						_setLabelAttr : function(text) {
							if (text)
								this._set("label", text);
						}
					});
			return item;
		});
},
'sys/mobile/js/mui/query/CommonQueryDialogMixin':function(){
//常用查询
define( [ "dojo/_base/declare", "mui/panel/SlidePanel", "mui/util", "dojo/query"],
		function(declare, SlidePanel, util, query) {
			var query = declare("mui.query.CommonQueryDialogMixin", null, {
				filterURL:null,
				
				redirectURL: null,
				
				SLIDE_PANEL_CLICK : '/mui/panel/slide/click',
				
				//数组，格式对象包含信息，text，dataURL，icon
				store:[],
				
				postCreate : function() {
					this.inherited(arguments);
					this.subscribe(this.SLIDE_PANEL_CLICK,"doValueChange");
				},
			
				doValueChange:function(srcObj, evt){
					if(!this.dealed){
						if(evt && evt.index){
							var selected = this.store[evt.index];
							this.defer(function(){
								window.open(this._formatParam(selected) , "_self");
								this.dealed = false;
							},200);
						}else{
							this.dealed = false;
						}
					}
					this.dealed = true;
				},
				
				show:function(evt){
					var slides = query("#_common_query_panel");
					if(slides.length>0) 
						return;
					var slidePanel = new SlidePanel({id:'_common_query_panel',store:this.store,dir:'right',
						width:'45%',icon:'mui-file-text'});
					document.body.appendChild(slidePanel.domNode);
					slidePanel.startup();
				},
				
				_formatParam:function(item){
					var url = location.href;
					if(this.redirectURL){
						item.text = encodeURIComponent(item.text);
						url =  util.formatUrl(util.urlResolver(this.redirectURL,item));
					}
					return util.setUrlParameter(url,"queryStr",item['dataURL']);
				}
			});
			return query;
	});
},
'sys/mobile/js/mui/category/CategoryItemMixin':function(){
define(	["dojo/_base/declare", "dojo/dom-construct", "dojo/dom-class",
				"dojo/topic", "dojox/mobile/_ItemBase", "mui/util", "mui/iconUtils"],
		function(declare, domConstruct, domClass, topic, ItemBase, util, iconUtils) {
			var item = declare("mui.category.CategoryItemMixin", [ItemBase], {

						fdId : '',
						
						//名称
						label : '',
						
						// 文档附件类型
						icon : '',
						
						//组织架构,类别,模板类型
						type : null,
						
						//是否是分类
						header : "false",
						
						tag : 'li',
						
						//事件key
						key : null,
						
						_enterClass:'mblListItemSelected',
						
						buildRendering : function() {
							this._templated = !!this.templateString;
							if (!this._templated) {
								this.domNode = this.containerNode = this.srcNodeRef
										|| domConstruct.create(this.tag, {
											className : 'muiCateItem'
										});
								var className = 'muiCateInfoItem';
								if(this.header == 'true'){
									className = ' muiGroupItem';
								}
								this.contentNode = domConstruct.create(
										'div', {
											className : className
										}, this.domNode);
							}
							this.inherited(arguments);

							if (!this._templated)
								this._buildItemBase();
						},
						
						postCreate : function() {
							this.inherited(arguments);
							this.subscribe('/mui/category/cancelSelected','_cancelSelected');
							this.subscribe('/mui/category/setSelected','_setSelected');
						},
						
						//构建基本框架
						_buildItemBase : function() {
							this.cateContainer = domConstruct.create("div",{className:"muiCateContainer"},this.contentNode);
							if(this.header != 'true' ){
								this.iconNode = domConstruct.create('div', {
												'className' : 'muiCateIcon'
											}, this.cateContainer);
								this.buildIcon(this.iconNode);
								this.infoNode = domConstruct.create('div', {
												'className' : 'muiCateInfo'
											}, this.cateContainer);
								this.titleNode = domConstruct.create('div', {
												'className' : 'muiCateName',
												'innerHTML' : this.label 
											}, this.infoNode);
								this.connect(this.iconNode,"click","_selectCate");
								this.connect(this.infoNode,"click","_selectCate");
							}else{
								this.titleNode = domConstruct.create('div', {
									'className' : 'muiCateName muiCateTitle',
									'innerHTML' : this.getTitle()
								}, this.cateContainer);
							}
							this.moreArea = domConstruct.create("div",{className:"muiCateMore"},this.cateContainer);
						},

						startup : function() {
							if (this._started) {
								return;
							}
							this.inherited(arguments);
							var parent = this.getParent();
							this.key = parent.key;
							if(this.header != 'true' ){
								if( parent.showMore && this.showMore()){		//构建更多
									domConstruct.create("i",{className:"mui mui-forward"},this.moreArea);
									this.connect(this.moreArea,"click","_openCate");
								}
								
								if(parent.selType!=null){	//构建选择区域
									this.selectArea = domConstruct.create('div', {
											'className' : 'muiCateSelArea'
										}, this.cateContainer,'first');//用于占位
									if(this.showSelect()){
										 this.selectNode = domConstruct.create('div', {
												'className' : 'muiCateSel'
											}, this.selectArea);
										 if(this.isSelected()){
											 this.checkedIcon= domConstruct.create('i', {
													'className' : 'mui mui-checked muiCateSelected'
												}, this.selectNode);
											 domClass.add(this.selectNode,"muiCateSeled");
										 }
										 this.connect(this.selectArea,"click","_selectCate");
									}
								}
							}else{
								topic.publish("/mui/category/addNav",this,{label:this.label});
							}
						},
						
						_openCate:function(evt){
							this.set("entered", true);
							this.defer(function(){
								this.set("entered", false);
								topic.publish("/mui/category/changed",this,{
									'fdId':this.fdId,
									'label':this.label
								});
							}, 200);
							return;
						},
						
						_cancelSelected:function(srcObj , evt){
							if(srcObj.key==this.key){
								if(evt && evt.fdId){
									if(evt.fdId.indexOf(this.fdId)>-1){
										if(this.checkedIcon){
											 domClass.remove(this.selectNode,"muiCateSeled");
											 domConstruct.destroy(this.checkedIcon);
											 this.checkedIcon= null;
											 topic.publish("/mui/category/unselected",this,{
													'label':this.label,
													'fdId':this.fdId,
													'icon':this.icon,
													'type':this.type
												});
										}
									}
								}
							}
						},
						
						_setSelected:function(srcObj,evt){
							if(srcObj.key==this.key){
								if(evt && evt.fdId){
									if(evt.fdId==this.fdId){
										domClass.add(this.selectNode,"muiCateSeled");
										this.checkedIcon= domConstruct.create('i', {
											'className' : 'mui mui-checked muiCateSelected'
										}, this.selectNode);
										this.set("entered", true);
										this.defer(function(){
											this.set("entered", false);
										},200);
										topic.publish("/mui/category/selected",this,{
											'label':this.label,
											'fdId':this.fdId,
											'icon':this.icon,
											'type':this.type
										});
								     }
								}
							}
						},
						
						_selectCate:function(evt){
							if(evt){
								if (evt.stopPropagation)
									evt.stopPropagation();
								if (evt.cancelBubble)
									evt.cancelBubble = true;
								if (evt.preventDefault)
									evt.preventDefault();
								if (evt.returnValue)
									evt.returnValue = false;
							}
						
							if(this.selectArea){
								if(this.selectNode){//存在选择区域时设置是否选中
									if(this.checkedIcon != null){
										this._cancelSelected(this,this);
									}else{
										this._setSelected(this,this);
									}
									return;
								}
							}
							if(this.showMore()){
								this._openCate();
							}else{
								this.showItemDetail();
							}
							return;
						},
						
						//获取分组标题信息
						getTitle:function(){
							return this.label;
						},
						
						//是否显示往下一级
						showMore : function(){
							return true;
						},
						
						//是否显示选择框
						showSelect:function(){
							return true;
						},
						
						//是否选中
						isSelected:function(){
							return true;
						},
						
						showItemDetail:function(){
							
						},
						
						buildIcon:function(iconNode){
							if(this.icon){
								iconUtils.setIcon(this.icon, null,
										this._headerIcon, null, iconNode);
							}
						},
						
						_setLabelAttr : function(text) {
							if (text)
								this._set("label", text);
						},
						
						_setEnteredAttr: function(entered){
							domClass.toggle(this.domNode, this._enterClass, entered);
						}
					});
			return item;
		});
},
'sys/mobile/js/mui/property/filter/FilterCheckBox':function(){
define([ "dojo/_base/declare", "mui/property/filter/FilterRadio",
		"dojo/dom-construct", "dojo/_base/array" ], function(declare,
		FilterRadio, domConstruct, array) {
	var claz = declare("mui.property.FilterCheckBox", [ FilterRadio ], {

		selectChange : function(obj, evt) {

		}

	});
	return claz;
});
},
'sys/mobile/js/mui/category/_ViewScrollResizeMixin':function(){
define( [ "dojo/_base/declare","dojo/topic"], function(declare, topic) {

	return declare("mui.list._ViewScrollResizeMixin", null, {

		startup : function() {
			if (this._started) {
				return;
			}
			this.inherited(arguments);
			this.subscribe("/mui/list/loaded",'_scrollResize');
			this.subscribe("/mui/view/scrollTo",'_scrollTo');
		},
		
		_scrollTo:function(srcObj,evt){
			if(srcObj.key==this.key && this.slideTo){
				if(evt){
					if(evt.y && evt.y!=0){
						var scrollH = this.domNode.offsetHeight;
						var listH = this.containerNode.offsetHeight;
						var navAreaH = listH + evt.y;
						var yTop = 0;
						if(navAreaH < scrollH){
							if(listH<scrollH){
								yTop = 0;
							}else{
								yTop = 0 - (listH - scrollH);
							}
							 evt.y = yTop;
						}
						this.slideTo(evt, 0.5, 'linear');
						return;
					}
				}
				this.slideTo({y:0}, 0.5, 'linear');	
				return;
			}
		},
		
		_runSlideAnimation : function(from, to, duration, easing, node, idx) {
			topic.publish("/mui/view/afterScroll", this, {
				from : from,
				to : to
			});
			this.inherited(arguments);
		},

		
		_scrollResize : function(srcObj){
			if(srcObj.key==this.key){
				if(this.resize){
					this.resize();
					topic.publish("/mui/view/resized",this);
				}
				this._scrollTo(srcObj);
			}
		}
	});
});
},
'sys/mobile/js/mui/category/CategoryList':function(){
define( [ "dojo/_base/declare", "dojo/topic", "dojo/dom-construct", "dojo/_base/array","dojo/_base/lang", 
          "mui/util", "mui/list/JsonStoreList" ], function(declare, topic, domConstruct, array, lang,
		util, JsonStoreList) {
	return declare("mui.category.CategoryList", [ JsonStoreList ], {
		//数据请求URL
		dataUrl : '',
		
		//父分类ID
		parentId : null,
		
		//选择类型要求
		selType : null,
		
		//当前值初始
		curIds : null,
		
		//当前值初始
		curNames : null,
		
		//单选|多选
		isMul : false,
		
		baseClass : "muiCateLists",
		
		//对外事件对应的唯一标示
		key : null,
		
		//搜索后不允许再往下查看子分类
		showMore:true,
		
		buildRendering : function() {
			this.dataUrl = util.formatUrl(this.dataUrl);
			this.url = util.urlResolver(this.dataUrl,this);
			this.inherited(arguments);
			this.domNode.className = this.baseClass;
			this.buildLoading();
		},
		postCreate : function() {
			this.inherited(arguments);
			this.subscribe("/mui/category/changed","_cateChange");
			this.subscribe("/mui/search/submit","_cateChange");
			this.subscribe("/mui/search/cancel","_cateReback");
			this.subscribe("/mui/category/selected","_cateSelected");
			this.subscribe("/mui/cate/navTo","_scrollToCate");
			this.subscribe("/mui/category/selChanged","_setCurSel");
			this.subscribe('/mui/view/afterScroll','_setNavInfo');
		},
		
		startup : function() {
			this.inherited(arguments);
		},
		
		buildLoading:function(){
			if(this.tmpLoading == null){
				domConstruct.empty(this.domNode);
				this.tmpLoading = domConstruct.create("li",{className:'muiCateLoading',
					innerHTML:'<i class="mui mui-loading mui-spin"></i>'},this.domNode);
			}
		},
		
		onComplete:function(){
			if(this.tmpLoading){
				domConstruct.destroy(this.tmpLoading);
				this.tmpLoading = null;
			}
			this.inherited(arguments);
		},
		
		_setCurSel:function(srcObj,evt){
			if(srcObj.key==this.key){
				if(evt){
					this.curIds = evt.curIds;
					this.curNames = evt.curNames;
				}
			}
		},
		
		_setNavInfo:function(srcObj,evt){
			if(srcObj.key == this.key){
				var chs = this.getChildren();
				var selItem = null;
				if(evt.to.y < 0){
					var redraw = false; 
					for ( var i = 0; i < chs.length; i++) {
						if(chs[i].header=='true' && (0 - evt.to.y) > (chs[i].domNode.offsetTop-chs[i].domNode.offsetHeight)){
							topic.publish("/mui/category/navChange",this,{'label':chs[i].getTitle()});
							redraw = true;
						}
					}
					if(!redraw)
						topic.publish("/mui/category/navChange",this, null);
				}else{
					topic.publish("/mui/category/navChange",this, null);
				}
			}
		},
		
		//滚动到header
		_scrollToCate:function(srcObj,evt){
			if(srcObj.key==this.key){
				if(evt){
					var chs = this.getChildren();
					var selItem = null;
					for ( var i = 0; i < chs.length; i++) {
						if(chs[i].header=='true' && chs[i].label == evt.label){
							selItem =  chs[i];
							break;
						}
					}
					if(selItem){
						topic.publish("/mui/view/scrollTo",this,{y:(0 - selItem.domNode.offsetTop)});
					}
				}
			}
		},
		
		//搜索后返回
		_cateReback:function(srcObj,evt){
			if(srcObj.key==this.key){
				if(this._addressUrl){
					this.url = this._addressUrl;
				}
				//TODO  loading
				this.showMore=true;
				this.buildLoading();
				this.reload();
			}
		},
		
		//往下查看数据
		_cateChange:function(srcObj,evt){
			if(srcObj.key==this.key){
				if(evt && evt.url){
					if(!this._addressUrl){
						this._addressUrl = this.url;
					}
					this.showMore=false;
					this.url = evt.url;
				}else{
					this.showMore=true;
					this.parentId = evt.fdId;
					this.url = util.urlResolver(this.dataUrl,this);
				}
				this.buildLoading();
				this.reload();
			}
		},
		
		//选中
		_cateSelected:function(srcObj,evt){
			if(srcObj.key==this.key){
				if(!this.isMul){
					this.curIds = evt.fdId;
					this.curNames = evt.label;
					array.forEach(this.getChildren(),lang.hitch(this,function(item){
						if(item.header!='true' && item.fdId != evt.fdId){
							topic.publish("/mui/category/cancelSelected",this,{fdId:item.fdId});
						}
					}));
					topic.publish("/mui/category/submit" ,this, {
						key: this.key,
						curIds:this.curIds,
						curNames:this.curNames
					});	
				}
			}
		}
		
	});
});
},
'sys/mobile/js/mui/syscategory/SysCategoryDialogMixin':function(){
define( [ "dojo/_base/declare", "mui/query/_CategoryQueryDialogMixin",
		"mui/syscategory/SysCategoryMixin" ], function(declare,
		CategoryQueryDialogMixin, SysCategoryMixin) {
	var sysCategory = declare("mui.syscategory.SysCategoryDialogMixin", [
			CategoryQueryDialogMixin, SysCategoryMixin ], {
		
		type : SYS_CATEGORY_TYPE_CATEGORY,
		
		//是否取模板, 值:0 否  , 1 是
		getTemplate : 0,
		
		key : '_sys_cate_dialog'
	});
	return sysCategory;
});

}
}});