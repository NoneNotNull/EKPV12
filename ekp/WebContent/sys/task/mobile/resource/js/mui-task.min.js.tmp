require({cache:{
'sys/task/mobile/resource/js/list/item/EvaluateItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"mui/list/item/_ListLinkItemMixin",
	"dojo/date/locale",
	"mui/i18n/i18n!sys-mobile" 	
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util, _ListLinkItemMixin,locale,msg) {
	
	var item = declare("sys.task.list.item.EvaluateItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		
		baseClass:"taskCommonListItem muiEvaluateListItem",
		 
		href : 'javascript:void(0);',
		
		buildRendering:function(){
			this.inherited(arguments);
			
			this.domNode = this.containerNode= this.srcNodeRef
				|| domConstruct.create(this.tag,{className:this.baseClass});
			
			//上方信息
			var info=domConstruct.create("div",{className:"info"},this.containerNode);
			domConstruct.create("img", { className: "infoImg",src:this.icon}, info);//评价人头像
			var h4= domConstruct.create("h4", { innerHTML:this.creator}, info);//评价人名字
			var __p=domConstruct.create("p", { className:"infoApprove mui mui-editor-face"}, h4);//评价满意度
			domConstruct.create("span", { innerHTML:this.fdApprove }, __p);
			
			
			var __p=domConstruct.create("p", { className:"infoDate mui mui-time"}, info);//评价日期
			domConstruct.create("span", { innerHTML:this.created }, __p);
			if(this.clientType)
				domConstruct.create("span", { innerHTML:"来自"+msg['mui.comefrom.'+this.clientType] }, __p);//来自XX客户端
			
			//下方反馈内容
			if(this.title){
				var content=domConstruct.create("div",{className:"content"},info);
				domConstruct.create("p",{innerHTML:this.title},content);
			}
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
			//new RtfResizeUtil({
			//	channel:this.fdId,
			//	containerNode:this.containerNode
			//});
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		}
		
		
	});
	return item;
});
},
'sys/task/mobile/resource/js/EditorMixin':function(){
define(
		[ "dojo/_base/declare","dojo/text!../tmpl/editor_layout.html" ],
		function(declare,layout) {

		return declare("sys.task.mobile.resource.js.EditorMixin",null,{
			layout : layout
		});
			
});
},
'sys/task/mobile/resource/js/list/_CollpaseListItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/ready",
    "dojo/dom-construct",
    "dojo/dom-style",
    "dojo/dom-attr",
    "mui/util"
	], function(declare,ready,domConstruct,domStyle,domAttr,util) {
	
	return declare("sys.task.list._CollpaseListItemMixin", null , {
		
		maxCount:3,
		
		collpase:true,
		
		buildRendering:function(){
			this.inherited(arguments);
			var self=this,
				maxCount=this.maxCount;
			
			this.url=util.setUrlParameter(this.url,'rowsize',maxCount);
			
			this.subscribe('/mui/list/loaded', function(widget,items){
				if(this == widget ){
					//var children=widget.getChildren();
					//总数超过maxcount，多余行隐藏(点击可展开)
					var page=items.page,
						leftCount=page.totalSize-(page.currentPage*page.pageSize);
					if(self.collpase && leftCount > 0){
						//for(var i=maxCount;i<children.length;i++){
						//	domStyle.set(children[i].domNode,'display','none');
						//}
						self.buildToggleDom(items);//构造展开节点
					}else{
						self.collpase=false;
						self.buildToggleDom(items);//销毁展开节点
					}
				}
			});
		},
		
		buildToggleDom:function(items){
			if(!this.toggleDom){
				this.toggleDom=domConstruct.create('li',{className:'toggle'},this.domNode,'last');
				domStyle.set(this.toggleDom,{
					'text-align':'center',
					'margin':'0.5rem 0'
				});
				this.connect(this.toggleDom,'click','___toggle');
			}
			if(this.collpase){
				//折叠情况,显示dom为展开
				var page=items.page,
					leftCount=page.totalSize-(page.currentPage*page.pageSize);
				domConstruct.empty(this.toggleDom);
				domAttr.set(this.toggleDom,'innerHTML','还有'+leftCount+'项');
				domConstruct.create('i',{className:'mui mui-down-n'},this.toggleDom);
			}else{
				domConstruct.destroy(this.toggleDom);
				//domAttr.set(this.toggleDom,'innerHTML','');
				//domConstruct.create('i',{className:'mui mui-up-n'},this.toggleDom);
			}
		},
		
		___toggle:function(){
			if(this.collpase){
				
				if(this._loadOver){
					
				}else{
					this.loadMore();
				}
				
				//for(var i=this.maxCount;i<children.length;i++){
				//	domStyle.set(children[i].domNode,'display','block');
				//}
				//this.collpase=false;
			}else{
				//for(var i=this.maxCount;i<children.length;i++){
				//	domStyle.set(children[i].domNode,'display','none');
				//}
				//this.collpase=true;
			}
			//this.buildToggleDom();
		},
		

		buildNoDataItem:function(){
			//不做nodata处理...
		},
		
		handleOnPush:function(){
			//滑动到底部不刷加载更多操作
		}
		
	});
});
},
'sys/task/mobile/resource/js/list/FeedbackItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"sys/task/mobile/resource/js/list/item/FeedbackItemMixin",
	"sys/task/mobile/resource/js/list/_CollpaseListItemMixin"
	], function(declare, _TemplateItemListMixin, FeedbackItemMixin,_CollpaseListItemMixin) {
	
	return declare("sys.task.list.FeedbackItemListMixin", [_TemplateItemListMixin,_CollpaseListItemMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: FeedbackItemMixin
	});
});
},
'sys/task/mobile/resource/js/NavBarMixin':function(){
/**
 * NavBar mixin,覆盖原NavBar的选中样式
 */
define(['dojo/_base/declare','dojo/dom-style','dojo/dom-construct'],
		function(declare,domStyle,domConstruct){
	
	return declare('sys.task.mobile.resource.js.NavBarMixin',null,{
		
		buildRendering:function(){
			this.inherited(arguments);
			
			//自定义选中节点(覆盖原来的样式)
			domConstruct.destroy(this.selectedNode);
			this.selectedNode=domConstruct.create('div', {
				className : 'muiTaskNavBarSelected'
			}, this.domNode);
			domConstruct.create('i', {
				className : 'arr arrM'
			}, this.selectedNode);
			domConstruct.create('i', {
				className : 'arr arrC'
			}, this.selectedNode);
		},
		
		formatEvt:function(evt){
			return evt;
		}
		
	});
	
	
	
});
},
'sys/task/mobile/resource/js/list/EvaluateItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"sys/task/mobile/resource/js/list/item/EvaluateItemMixin",
	"sys/task/mobile/resource/js/list/_CollpaseListItemMixin"
	], function(declare, _TemplateItemListMixin, EvaluateItemMixin,_CollpaseListItemMixin) {
	
	return declare("sys.task.list.EvaluateItemListMixin", [_TemplateItemListMixin,_CollpaseListItemMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: EvaluateItemMixin
	});
});
},
'sys/task/mobile/resource/js/RtfAttachmentPlugin':function(){
/**
 * 附件mixin(嵌入rtf用)
 */
define(["dojo/_base/declare",
        "dojo/dom-style",
        "dojo/query",
        "mui/form/editor/plugins/EditorPluginBaseMixin"
       ],function(declare,domStyle,query,EditorPluginBaseMixin){
	
	return declare("mui.form.editor.plugins.face.Plugin",[EditorPluginBaseMixin],{
		
		type : 'attachment',
		
		attachmentView:'#attachmentView',//业务模块,临时写死
		
		_isShow:false,
		
		icon : 'mui-attachEdit',
		
		event:function(evt){
			this._attachmentShow(evt);
		},
		
		_attachmentShow:function(evt){
			this.iconNode = evt.target;
			
			if (this._isShow) {
				this.hide();
				return;
			}
			this._isShow = true;
			this.show();
		},
		
		show:function(){
			this.inherited(arguments);
			if(this.attachmentView){
				domStyle.set(this.attachmentView,'display','block');
			}
		},
		
		hide:function(){
			this.inherited(arguments);
			if(this.attachmentView){
				domStyle.set(this.attachmentView,'display','none');
			}
		},
		
		startup:function(){
			this.inherited(arguments);
			if(typeof (this.attachmentView) == "string"){
				this.attachmentView=query(this.attachmentView)[0];
			}
		}
			
	});
	
	
});
},
'sys/task/mobile/resource/js/list/item/FeedbackItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
	"dojo/date/locale" , 
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"mui/list/item/_ListLinkItemMixin",
   	"mui/rtf/RtfResizeUtil",
   	"sys/task/mobile/resource/js/_AttachmentItemMixin",
	"mui/i18n/i18n!sys-mobile" 	
	], function(declare, domConstruct,domClass , domStyle , domAttr,locale , ItemBase , util, _ListLinkItemMixin,RtfResizeUtil,_AttachmentItemMixin,msg) {
	
	var item = declare("sys.task.list.item.FeedbackItemMixin", [ItemBase, _ListLinkItemMixin,_AttachmentItemMixin], {
		tag:"li",
		
		baseClass:"taskCommonListItem muiFeedbackListItem",
		
		href : 'javascript:void(0);',
		
		fdModelName:'com.landray.kmss.sys.task.model.SysTaskFeedback',
		formBeanName:'sysTaskFeedbackForm',
		
		buildRendering:function(){
			this.inherited(arguments);
			
			this.domNode = this.containerNode= this.srcNodeRef
				|| domConstruct.create(this.tag,{className:this.baseClass});
			
			//上方信息
			var feedbackInfo=domConstruct.create("div",{className:"info"},this.containerNode);
			domConstruct.create("img", { className: "infoImg",src:this.icon}, feedbackInfo);//反馈人头像
			domConstruct.create("h4", { innerHTML:this.creator}, feedbackInfo);//反馈人名字
			var date=domConstruct.create("p", { className:"infoDate mui mui-time"}, feedbackInfo);
			domConstruct.create("span", { innerHTML:this.created }, date);//反馈日期
			if(this.clientType)
				domConstruct.create("span", { innerHTML:"来自"+msg['mui.comefrom.'+this.clientType] }, date);//来自XX客户端
			var progressContainer=domConstruct.create("div", { className: "progress"}, feedbackInfo);//进度
			this._buildProgress(this.progress,progressContainer);
			
			//下方反馈内容
			if(this.title){
				var feedbackContent=domConstruct.create("div",{className:"content"},feedbackInfo);
				domConstruct.create("p",{innerHTML:this.title},feedbackContent);
			}
			//附件
			if(this.fdId){
				var attContainer=domConstruct.create("div",{className:""},feedbackInfo);
				this.createAtt(attContainer,{
					fdModelId:this.fdId
				});
			}
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
			//new RtfResizeUtil({
			//	channel:this.fdId,
			//	containerNode:this.containerNode
			//});
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		},
		
		_buildProgress:function(progress,containerNode){
			progress=progress.replace('%','');
			//角度=360度*progress/100
			var deg=(18*parseInt(progress)/5);
			var pie_left=domConstruct.create("div",{className:"pie_left"},containerNode);
			var left=domConstruct.create("div",{className:"left"},pie_left);
			if(deg > 180){
				var _deg=deg-180;
				domStyle.set(left,'transform','rotate('+_deg+'deg)');
				domStyle.set(left,'-webkit-transform','rotate('+_deg+'deg)');
			}
			var pie_right=domConstruct.create("div",{className:"pie_right"},containerNode);
			var right=domConstruct.create("div",{className:"right"},pie_right);
			if(deg < 180){
				domStyle.set(right,'transform','rotate('+deg+'deg)');
				domStyle.set(right,'-webkit-transform','rotate('+deg+'deg)');
			}else{
				domStyle.set(right,'transform','rotate(180deg)');
				domStyle.set(right,'-webkit-transform','rotate(180deg)');
			}
			var mask=domConstruct.create("div",{className:"mask",innerHTML:'%'},containerNode);
			var span=domConstruct.create("span",{innerHTML:progress});
			domConstruct.place(span,mask,'first');
		}
		
		
	});
	return item;
});
},
'sys/task/mobile/resource/js/list/CalendarItemListMixin':function(){
define([
    "dojo/_base/declare",
	"mui/list/_TemplateItemListMixin",
	"sys/task/mobile/resource/js/list/item/CalendarItemMixin"
	], function(declare, _TemplateItemListMixin, SysTaskItemMixin) {
	
	return declare("sys.task.list.CalendarItemListMixin", [_TemplateItemListMixin], {
		
		itemTemplateString : null,
		
		itemRenderer: SysTaskItemMixin
	});
});
},
'sys/task/mobile/resource/js/_AttentionTabBarButtonMixin':function(){
/**
 * 关注任务按钮组件
 */
define(	["dojo/_base/declare", "dojo/_base/lang", "dojo/request", "mui/util",
				"dojo/dom-class", "mui/dialog/Tip"], function(declare, lang,
				req, util, domClass, Tip) {

			return declare("sys.task.mixin._AttentionTabBarButtonMixin", null, {
				// 关注
				attentionUrl : '/sys/task/sys_task_main/sysTaskMain.do?method=updateAttention&forward=lui-source',
				// 取消关乎
				disAttentionUrl : '/sys/task/sys_task_main/sysTaskMain.do?method=updateAttention&isAttention=true&forward=lui-source',

				hasAttention : false,

				fdId : null,

				scaleClass : 'muiAttentionMaskScale',

				attentionClass : 'mui-focus-on',

				disAttentionClass : 'mui-focus-off',

				buildRendering : function() {
					this.inherited(arguments);
				},

				startup : function() {
					if (this._started)
						return;
					this.inherited(arguments);
					this.toggleAttention(this.hasAttention);
				},

				replaceClass : function(flag) {
					var i1 = this["iconNode" + 1], i2 = this["iconNode" + 2];
					var class1 = flag ? this.attentionClass : this.disAttentionClass, class2 = flag
							? this.disAttentionClass 
							: this.attentionClass;
					domClass.replace(i1, class1 + ' ' + this.scaleClass, class2
									+ ' ' + this.scaleClass);
					domClass.replace(i2, class1 + ' ' + this.scaleClass, class2
									+ ' ' + this.scaleClass);
				}, 

				removeScaleClass : function() {
					var i1 = this["iconNode" + 1], i2 = this["iconNode" + 2];
					this.defer(lang.hitch(this, function() {
										domClass.remove(i1, this.scaleClass);
										domClass.remove(i2, this.scaleClass);
									}), 300);
				},

				toggleAttention : function(hasAttention) {
					
					this.replaceClass(hasAttention);
					this.removeScaleClass();
					this.set('hasAttention', hasAttention);
					this.set('lock', false);
				},

				rq : function(url, data, handleAs, callback) {
					req(util.formatUrl(url), {
								handleAs : handleAs,
								method : 'post',
								data : data
							}).then(lang.hitch(this, callback));
				},

				// 切换关注
				onClick : function(evt) {
					if (this.lock)
						return false;

					this.set('lock', true);
					if (!this.hasAttention)
						this.rq(this.attentionUrl, {
								fdTaskId : this.fdId,
								}, 'json', function(data) {
									this.toggleAttention(true);
									Tip.tip({
												icon : 'mui '
														+ this.attentionClass,
												text : '加入关注'
											});

								});
					else
						this.rq(this.disAttentionUrl, {
								fdTaskId : this.fdId
								}, 'json', function(data) {
									this.toggleAttention(false);
									Tip.tip({
												icon : 'mui '
														+ this.disAttentionClass,
												text : '取消关注'
											});
								});
					return false;
				}
		});
});
},
'sys/task/mobile/resource/js/OverflowTabBar':function(){
/**
 * 自定义TabBar,按屏幕尽可能显示多的按钮,显示不下的塞进更多操作栏
 */
define([
        "dojo/_base/declare",
        "dojox/mobile/TabBar",
        "dojo/query",
        "dojo/parser",
        "dojo/dom-class",
        "dojo/dom-style",
    	"dojo/dom-geometry",
    	"dojo/dom-construct",
    	"dojo/_base/array",
    	"dojox/mobile/Tooltip",
    	"dojo/text!../tmpl/more_button.html",
    	"mui/util"
	], function(declare, TabBar, query, parser, domClass,domStyle ,domGeometry, domConstruct, array, Tooltip,template,util) {
	
	return declare("sys.task.mobile", [TabBar], {
		
		fill:'overflow',
		
		template:template,
		
		resize: function(size){},
		
		//按宽度显示个数,多余的隐藏在下拉Tip中
		startup:function(){
			this.inherited(arguments);
			this.resizeByWidth();
			this.subscribe('/mui/list/afterScroll','hideOpener');
		},
		
		resizeByWidth: function() {
			var self=this;
			
			if(this.getChildren().length == 0) {
				domStyle.set(this.domNode,'margin','0');
				domStyle.set(this.domNode,'padding','0');
			}
			
			domClass.add(this.domNode, "muiTabBarGrid");
			domClass.add(this.domNode, "taskTabBar");
			
			var container=domGeometry.getContentBox(this.domNode),
				tmpWidth=0;
			array.forEach(this.getChildren(), function(child, i) {
				tmpWidth+=domGeometry.getMarginBox(child.domNode).w;
				if(tmpWidth > (container.w-50) ){
					//初始化更多按钮和Tooltip
					if( !this.opener ){
						//button构造
						parser.parse(domConstruct.create('div', {innerHTML: this.template},this.domNode))
							.then(function(widgetList){
								array.forEach(widgetList, function(widget, index) {
									self.aroundNode=domConstruct.place(widget.domNode,self.domNode, "last");
									self.aroundWidget=widget;
								});
							});
						//tip构造
						this.opener = new Tooltip();
						domConstruct.place(this.opener.domNode,document.body, "last");
						domClass.add(this.opener.domNode, 'muiNavBarGroup taskNavBarGroup');
						var cover = this.opener.containerNode;
						domConstruct.create('div', {className : 'muiNavBarGroupContainer'}, cover);
						//绑定弹出tip事件
						this.connect(this.aroundNode, "click", '_openerClick');
					}
					//this.aroundWidget.addChild(child);
					var _button = domConstruct.create("div", {
						'innerHTML' : child.label,
						'className':'mblTabBarButton overflowBarButton'
					});
					if(child.href){
						this.connect(_button,'click',function(){
							location.href=util.formatUrl(child.href);
						});
					}
					domConstruct.place(_button,query('.muiNavBarGroupContainer',self.opener.containerNode)[0] ,"last");
					
					child.destroy();
					
				}
			},this);
			
		},
		
		_openerClick:function(){
			var opener = this.opener;
			if (!opener)
				return;
			if (opener.resize) {
				opener.hide();
			}
			else {
				opener.show(this.aroundNode,['below']);
			}
			this.handle = this.connect(document.body, 'touchend', 'unClick');
		},
		
		hideOpener:function(){
			var opener = this.opener;
			if(opener && opener.resize){
				opener.hide();
			}
		},
		// 点击页面其他地方隐藏弹出层
		unClick : function(evt) {
			var target = evt.target, isHide = true;
			while (target) {
				if (target == this.domNode) {
					isHide = false;
					break;
				}
				target = target.parentNode;
			}
			if (isHide) 
				this.defer(function() {
					this.hideOpener();
				}, 400);
			this.disconnect(this.handle);
		}
		
		
		
		
		
	});
});
},
'sys/task/mobile/resource/js/_AttachmentItemMixin':function(){
define([ "dojo/_base/declare","dojo/request","dojo/html","dojo/query","dojo/dom-construct","mui/util"],
		function(declare,request,html,query,domConstruct,util){
	
	return declare("sys.task.mobile.resource.js._AttachmentItemMixin", null, {
		
		attUrl : '/sys/task/sys_task_feedback/sysTaskFeedback.do?method=loadAttachmentInfo',//没有默认的,暂时用任务的代替
		
		rscriptType : /^$|\/(?:java|ecma)script/i,
		
		//创建附件区域
		createAtt : function(container,args) {
			if(!args.fdModelId && !this.fdModelId )
				return;
			this.fdModelId=args.fdModelId || this.fdModelId;
			if(!args.fdModelName && !this.fdModelName )
				return;
			this.fdModelName=args.fdModelName || this.fdModelName;
			if(!args.formBeanName && !this.formBeanName)
				return;
			this.formBeanName=args.formBeanName || this.formBeanName;
			var self=this;
			var dhs = new html._ContentSetter({
				parseContent : true,
				onEnd : function() {
					var scripts = query('script', this.node);
					scripts.forEach(function(node, index) {
						//只处理javascript
						if (self.rscriptType.test(node.type || "")) {
							if (node.src) {
								//src方式引入的暂时没解决方案
							} else {
								window["eval"].call(window,
										(node.text || node.textContent
												|| node.innerHTML || ""));
							}
						}
					});
					this.inherited("onEnd", arguments);
				}
			});
			this.attContent=domConstruct.create('div',{className:'listAttachmentContent'},container,'last');
			dhs.node = this.attContent;
			this.getText(function(text) {
				dhs.set(text);
			});
			dhs.tearDown();
		},
	
		getText : function(callBack) {
			var self = this;
			var formData = {};
			formData['fdModelId'] = this.fdModelId;
			formData['fdModelName'] = this.fdModelName;
			formData['formBeanName'] = this.formBeanName;
			var promise = request.post(util.formatUrl(this.attUrl), {
				data : formData,
				sync : true
			}).response.then(function(data) {
				if (data.status == 200) {
					var text = data.data;
					callBack.call(self, text);
				}
			});
		}
		
	});
	
	
	
});
},
'sys/task/mobile/resource/js/_ProgressSliderMixin':function(){
/**
 * 进度条组件mixin
 */
define([ "dojo/_base/declare","dojo/dom-construct","dojo/dom-style","dojo/dom-class","dojo/touch"],
		function(declare,domConstruct,domStyle,domClass,touch){
	
	return declare("sys.task.mobile._ProgressSliderMixin", null, {
		
		valueText:0,
		
		buildRendering:function(){
			this.inherited(arguments);
			if(!this.templateString){ // true if this widget is not templated
				this.valueTextNode = domConstruct.create("div", {className:'progressValueText'}, this.domNode, "last");
				
				this.valueTextInnerNode=domConstruct.create("div", {innerHTML:this.valueText+"%" ,className:'progressValueTextInner'}, this.valueTextNode);//显示百分比文本的节点
				domConstruct.create("div", {"class":"progressTriangle"}, this.valueTextNode);//向下箭头
				
				domStyle.set(this.domNode,"width","80%");
				if(this.valueText){
					this.set('value',this.valueText);
					var ___left=parseInt(this.valueText)+'%';
					domStyle.set(this.valueTextNode,{
						left:___left
					})
				}
			}
		},
		
		_setValueTextAttr:function(valueText){
			this.valueText=valueText;
			this.valueTextInnerNode.innerHTML=valueText+"%";
		},
		
		_setValueAttr:function(value){
			//滑动结束
			this.inherited(arguments);
			this.set("valueText",value);
			var ___left=parseInt(value)+'%';
			domStyle.set(this.valueTextNode,{
				left:___left
			})
		},
		
		show:function(){
			domStyle.set(this.domNode,"display","block");
		},
		
		hide:function(){
			domStyle.set(this.domNode,"display","none");
		},
		
		setDisabled:function(){
			this.disabled=true;
			this.disconnect(this.touchBox, touch.press);
			this.disconnect(this.handle, touch.press);
		}
		
	});
	
	
	
});
},
'sys/task/mobile/resource/js/list/SysTaskJsonStoreList':function(){
define([
    "dojo/_base/declare",
    "dojo/topic",
	"mui/list/JsonStoreList",
	"dojox/mobile/viewRegistry"
	], function(declare,topic, JsonStoreList,viewRegistry) {
	
	return declare("sys.task.list.SysTaskJsonStoreList", [JsonStoreList], {
		
		
		onComplete:function(){
			this.inherited(arguments);
			var parentView=viewRegistry.getEnclosingView(this.domNode);
			//手动控制push的显示与隐藏，防止其他view页面也出现push提示信息
			topic.publish('/mui/list/pushDomHide',parentView);
		},
		
		//重写下拉刷新事件
		handleOnPush: function(widget, handle) {
			var parentView=viewRegistry.getEnclosingView(this.domNode);
			if(parentView.isVisible() && !this._loadOver){
				topic.publish('/mui/list/pushDomShow',parentView);
				this.loadMore(handle);
			}
			if (handle)
				handle.done(this);
		},
		
		startup:function(){
			this.inherited(arguments);
		}
		
		
	});
});
},
'sys/task/mobile/resource/js/list/item/CalendarItemMixin':function(){
define([
    "dojo/_base/declare",
    "dojo/dom-construct",
    "dojo/dom-class",
	"dojo/dom-style",
	"dojo/dom-attr",
    "dojox/mobile/_ItemBase",
   	"mui/util",
   	"mui/i18n/i18n",
   	"mui/list/item/_ListLinkItemMixin",
	"dojo/date/locale"   	
	], function(declare, domConstruct,domClass , domStyle , domAttr , ItemBase , util,i18n, _ListLinkItemMixin,locale) {
	
	var item = declare("sys.task.list.item.CalendarItemMixin", [ItemBase, _ListLinkItemMixin], {
		tag:"li",
		
		baseClass:"muiTaskListItem",
		
		href : 'javascript:void(0);',
		
		buildRendering:function(){
			this.inherited(arguments);
			
			this.domNode = this.containerNode= this.srcNodeRef
				|| domConstruct.create(this.tag,{className:this.baseClass});
			
			//左侧头像(取第一个人负责人的头像...)
			var leftBar=domConstruct.create("div",{className:"leftBar"},this.containerNode);
			domConstruct.create("img", { className: "muiProcessImg",src:this.performSrc}, leftBar);
			if(this.personCount > 1){
				var muiTaskMore=domConstruct.create("div", { className: "muiTaskMore"}, leftBar);
				domConstruct.create('i',{className:'mui mui-more'},muiTaskMore);
			}
			
			//右侧内容
			var rightContainer=domConstruct.create("div", { className: "rightContainer"}, this.containerNode),
				contentContainer=domConstruct.create("div", { className: "contentContainer"}, rightContainer),
				progressContainer=domConstruct.create("div", { className: "progress"}, rightContainer);
			
			//标题
			if(this.title){
				this.labelNode = domConstruct.create("h4",{className:"muiSubject",innerHTML:this.title},contentContainer);
			}
			var taskIcoList=domConstruct.create("ul", { className: "taskIcoList"}, contentContainer);
			var li;
			//状态
			if(this.fdStatus){
				var _statusInfo=this._getStatusInfo(this.fdStatus);
				li=domConstruct.create("li", { }, taskIcoList);
				domConstruct.create("div", { className:"muiTaskStatusTag "+_statusInfo.className,innerHTML:this.fdStatusText }, li);
			}
			//超期
			if(this.overDay){
				li=domConstruct.create("li", { }, taskIcoList);
				domConstruct.create("span", { className:"overday", innerHTML:"超期"+ this.overDay+"天" }, li);
			}
			//负责人
			li=domConstruct.create("li", {className:'muiTaskPersons' }, taskIcoList);
			domConstruct.create("i", { className: "mui mui-person"}, li);
			domConstruct.create("span", { innerHTML: this.performs }, li);
			
			//进度
			this._buildProgress(this.progress,progressContainer);
			
		},
		
		startup:function(){
			if(this._started){ return; }
			this.inherited(arguments);
		},
	
		_setLabelAttr: function(text){
			if(text)
				this._set("label", text);
		},
		
		_buildProgress:function(progress,containerNode){
			progress=progress.replace('%','');
			//角度=360度*progress/100
			var deg=(18*parseInt(progress)/5);
			var pie_left=domConstruct.create("div",{className:"pie_left"},containerNode);
			var left=domConstruct.create("div",{className:"left"},pie_left);
			if(deg > 180){
				var _deg=deg-180;
				domStyle.set(left,'transform','rotate('+_deg+'deg)');
				domStyle.set(left,'-webkit-transform','rotate('+_deg+'deg)');
			}
			var pie_right=domConstruct.create("div",{className:"pie_right"},containerNode);
			var right=domConstruct.create("div",{className:"right"},pie_right);
			if(deg < 180){
				domStyle.set(right,'transform','rotate('+deg+'deg)');
				domStyle.set(right,'-webkit-transform','rotate('+deg+'deg)');
			}else{
				domStyle.set(right,'transform','rotate(180deg)');
				domStyle.set(right,'-webkit-transform','rotate(180deg)');
			}
			if(this.fdStatus=='3'){
				var mask=domConstruct.create("div",{className:"mask"},containerNode);
				var span=domConstruct.create("i",{className:'mui mui-taskComplete'});
			}else if(this.fdStatus=='6'){
				var mask=domConstruct.create("div",{className:"mask"},containerNode);
				var span=domConstruct.create("i",{className:'mui mui-taskClose'});
			}else{
				var mask=domConstruct.create("div",{className:"mask",innerHTML:'%'},containerNode);
				var span=domConstruct.create("span",{innerHTML:progress});
			}
			
			domConstruct.place(span,mask,'first');
			
		},
		
		_getStatusInfo:function(value){
			var statusInfo={
				'1':{
					className:'muiTaskInactive'
				},
				'2':{
					className:'muiTaskProgress'
				},
				'3':{
					className:'muiTaskComplete'
				},
				'4':{
					className:'muiTaskTerminate'
				},
				'5':{
					className:'muiTaskOverrule'
				},
				'6':{
					className:'muiTaskClose'
				}
			}
			return statusInfo[value];
		}
		
		
	});
	return item;
});
}
}});